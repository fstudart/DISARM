Author: Dr. Fernando Sergio S. Leitao Filho
Center for Heart Lung Innovation â€“ University of British Columbia
E-mail: Fernando.Studart@hli.ubc.ca

NOTE 1: SEQUENCING DATA COMES FROM TWO BATCHES: 
- BATCH 1: All samples collected at both time points (V3 and V7) were included in this batch, except for those related to Disarm participant 85 (who was randomized to the 
Formoterol arm). For this participant, his samples collected during the first bronchoscopy visit were also included in Batch 1. 
- Batch 2: Contains all samples collected at the second bronchocopy visit from the Disarm participant 85. 

NOTE 2: File "Attributes.tsv" available in folder DISARM/Files_used_analysis indicates which samples were sequenced in each batch.

NOTE 3: V3 STANDS FOR VISIT V3 (FIRST BRONCHOSCOPY VISIT), AND V7 STANDS FOR VISIT V7 (SECOND BRONCHOSCOPY VISIT).

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART I (BATCH 1) / Environment: QIIME2 (2020.2)

#IMPORTING DATA
#Place all fastq.gz files (both forward and reverse files from Batch 1) into the same folder; in this example: Fastq-R1.
#Note: All sequencing data are already demultiplexed.

qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path Fastq-R1 \
  --input-format CasavaOneEightSingleLanePerSampleDirFmt \
  --output-path Disarm-only-demux-paired-end1.qza
  
 qiime demux summarize \
  --i-data Disarm-only-demux-paired-end1.qza \
  --o-visualization Disarm-only-demux-paired-end1.qzv

#DENOISING TH SEQUENCING DATA
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs Disarm-only-demux-paired-end1.qza \
  --o-table Disarm-only-samples-dada2-run1.qza \
  --p-n-threads 0 \
  --o-representative-sequences Disarm-only-rep-seqs-run1.qza \
  --p-trim-left-f 12 \
  --p-trim-left-r 12 \
  --p-trunc-len-f 242 \
  --p-trunc-len-r 133 \
  --o-denoising-stats Disarm-only-samples-denoising-stats-run1.qza
 
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run1.qza \
  --o-visualization Disarm-only-samples-dada2-run1.qzv

qiime metadata tabulate \
  --m-input-file Disarm-only-samples-denoising-stats-run1.qza \
  --o-visualization Disarm-only-samples-denoising-stats-run1.qzv

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run1.qza \
  --o-visualization Disarm-only-rep-seqs-run1.qzv

#SEQUENCING QUALITY CONTROL (USING THE SILVA DATABASE V132 WITH 99% COVERAGE)
#File "Silva132-99-ref-seqs.qza" available at https://drive.google.com/file/d/1tXllQlQ5gSU21JYt6t8HHfup2Cz-1YRs/view?usp=sharing
qiime quality-control exclude-seqs \
  --i-query-sequences Disarm-only-rep-seqs-run1.qza \
  --i-reference-sequences Silva132-99-ref-seqs.qza \
  --p-method blast \
  --p-perc-identity 0.80 \
  --p-perc-query-aligned 0.80 \
  --o-sequence-hits hits-run1.qza \
  --o-sequence-misses misses-run1.qza

qiime feature-table tabulate-seqs \
  --i-data hits-run1.qza \
  --o-visualization hits-run1.qzv
  
qiime feature-table tabulate-seqs \
  --i-data misses-run1.qza \
  --o-visualization misses-run1.qzv

qiime feature-table filter-features \
  --i-table Disarm-only-samples-dada2-run1.qza \
  --m-metadata-file misses-run1.qza \
  --o-filtered-table Disarm-only-samples-dada2-run1-filtered.qza \
  --p-exclude-ids

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run1-filtered.qza \
  --o-visualization Disarm-only-samples-dada2-run1-filtered.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run1.qza \
--i-table Disarm-only-samples-dada2-run1-filtered.qza \
--o-filtered-data Disarm-only-rep-seqs-run1-filtered.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run1-filtered.qza \
  --o-visualization Disarm-only-rep-seqs-run1-filtered.qzv

#TAXONOMIC CLASSIFICATION (USING THE SILVA DATABASE V132 WITH 99% COVERAGE)
#File "Silva132-classifier-my-primers-majority-v-0.22.1.qza" available at https://drive.google.com/file/d/1w9ip_WVazOE55p1oGs-V9PdFg0WAi262/view?usp=sharing
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-classifier-my-primers-majority-v-0.22.1.qza \
  --i-reads Disarm-only-rep-seqs-run1-filtered.qza \
  --p-reads-per-batch 2000 \
  --p-n-jobs -2 \
  --o-classification Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
  --verbose

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
  --o-visualization Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qzv

qiime metadata tabulate \
--m-input-file Disarm-only-rep-seqs-run1-filtered.qza \
--m-input-file Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
--o-visualization Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy-tabulated.qzv

#File "Disarm_Library_Prep_full_simplified-R1.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-run1-filtered.qza \
  --i-taxonomy Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified-R1.txt \
  --o-visualization Disarm-only-taxa-bar-plots-run1-filtered-Silva132.qzv

#REMOVING ASVS IDENTIFIED AS POTENTIAL CONTAMINANTS ACCORDING TO THE DECONTAM R PACKAGE
#File "Decontam-frequency-Batch1.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table filter-features \
--i-table Disarm-only-samples-dada2-run1-filtered.qza \
--m-metadata-file Decontam-frequency-Batch1.txt \
--p-exclude-ids \
--o-filtered-table Disarm-only-samples-dada2-run1-filtered-after-decontam.qza

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run1-filtered-after-decontam.qza \
  --o-visualization Disarm-only-samples-dada2-run1-filtered-after-decontam.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run1-filtered.qza \
--i-table Disarm-only-samples-dada2-run1-filtered-after-decontam.qza \
--o-filtered-data Disarm-only-rep-seqs-run1-filtered-after-decontam.qza

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run1-filtered-after-decontam.qza \
  --o-visualization Disarm-only-rep-seqs-run1-filtered-after-decontam.qzv

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART II (BATCH 2) / Environment: QIIME2 (2020.2)

#IMPORTING DATA 
#Place all fastq.gz files (both forward and reverse files from Batch 2) into the same folder; in this example: Fastq-R2.
#Note: All sequencing data are already demultiplexed.

qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path Fastq-R2 \
  --input-format CasavaOneEightSingleLanePerSampleDirFmt \
  --output-path Disarm-only-demux-paired-end2.qza
  
 qiime demux summarize \
  --i-data Disarm-only-demux-paired-end2.qza \
  --o-visualization Disarm-only-demux-paired-end2.qzv

#DENOISING DATA (using the same trimming parameters as Batch 1)
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs Disarm-only-demux-paired-end2.qza \
  --o-table Disarm-only-samples-dada2-run2.qza \
  --p-n-threads 0 \
  --o-representative-sequences Disarm-only-rep-seqs-run2.qza \
  --p-trim-left-f 12 \
  --p-trim-left-r 12 \
  --p-trunc-len-f 242 \
  --p-trunc-len-r 133 \
  --o-denoising-stats Disarm-only-samples-denoising-stats-run2.qza
 
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run2.qza \
  --o-visualization Disarm-only-samples-dada2-run2.qzv

qiime metadata tabulate \
  --m-input-file Disarm-only-samples-denoising-stats-run2.qza \
  --o-visualization Disarm-only-samples-denoising-stats-run2.qzv

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run2.qza \
  --o-visualization Disarm-only-rep-seqs-run2.qzv

#SEQUENCING QUALITY CONTROL (USING THE SILVA DATABASE V132 WITH 99% COVERAGE)
#File "Silva132-99-ref-seqs.qza" available at https://drive.google.com/file/d/1tXllQlQ5gSU21JYt6t8HHfup2Cz-1YRs/view?usp=sharing
qiime quality-control exclude-seqs \
  --i-query-sequences Disarm-only-rep-seqs-run2.qza \
  --i-reference-sequences Silva132-99-ref-seqs.qza \
  --p-method blast \
  --p-perc-identity 0.80 \
  --p-perc-query-aligned 0.80 \
  --o-sequence-hits hits-run2.qza \
  --o-sequence-misses misses-run2.qza

qiime feature-table tabulate-seqs \
  --i-data hits-run2.qza \
  --o-visualization hits-run2.qzv
  
qiime feature-table tabulate-seqs \
  --i-data misses-run2.qza \
  --o-visualization misses-run2.qzv

qiime feature-table filter-features \
  --i-table Disarm-only-samples-dada2-run2.qza \
  --m-metadata-file misses-run2.qza \
  --o-filtered-table Disarm-only-samples-dada2-run2-filtered.qza \
  --p-exclude-ids

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run2-filtered.qza \
  --o-visualization Disarm-only-samples-dada2-run2-filtered.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run2.qza \
--i-table Disarm-only-samples-dada2-run2-filtered.qza \
--o-filtered-data Disarm-only-rep-seqs-run2-filtered.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run2-filtered.qza \
  --o-visualization Disarm-only-rep-seqs-run2-filtered.qzv

#TAXONOMIC CLASSIFICATION
#File "Silva132-classifier-my-primers-majority-v-0.22.1.qza" available at https://drive.google.com/file/d/1w9ip_WVazOE55p1oGs-V9PdFg0WAi262/view?usp=sharing
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-classifier-my-primers-majority-v-0.22.1.qza \
  --i-reads Disarm-only-rep-seqs-run2-filtered.qza \
  --p-reads-per-batch 2000 \
  --p-n-jobs -2 \
  --o-classification Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
  --verbose

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
  --o-visualization Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qzv

qiime metadata tabulate \
--m-input-file Disarm-only-rep-seqs-run2-filtered.qza \
--m-input-file Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
--o-visualization Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy-tabulated.qzv

#File "Disarm_Library_Prep_full_simplified-R2.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-run2-filtered.qza \
  --i-taxonomy Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified-R2.txt \
  --o-visualization Disarm-only-taxa-bar-plots-run2-filtered-Silva132.qzv

#REMOVING ASVS IDENTIFIED AS POTENTIAL CONTAMINANTS ACCORDING TO THE DECONTAM R PACKAGE
#File "Decontam-frequency-Batch2.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table filter-features \
--i-table Disarm-only-samples-dada2-run2-filtered.qza \
--m-metadata-file Decontam-frequency-Batch2.txt \
--p-exclude-ids \
--o-filtered-table Disarm-only-samples-dada2-run2-filtered-after-decontam.qza

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run2-filtered-after-decontam.qza \
  --o-visualization Disarm-only-samples-dada2-run2-filtered-after-decontam.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run2-filtered.qza \
--i-table Disarm-only-samples-dada2-run2-filtered-after-decontam.qza \
--o-filtered-data Disarm-only-rep-seqs-run2-filtered-after-decontam.qza

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run2-filtered-after-decontam.qza \
  --o-visualization Disarm-only-rep-seqs-run2-filtered-after-decontam.qzv

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART III (MERGING BATCHES 1 AND 2) / Environment: QIIME2 (2020.2)

qiime feature-table merge \
  --i-tables Run1/Disarm-only-samples-dada2-run1-filtered-after-decontam.qza \
  --i-tables Run2/Disarm-only-samples-dada2-run2-filtered-after-decontam.qza \
  --o-merged-table Disarm-only-samples-dada2-both-runs-after-decontam.qza

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam.qza \
  --m-sample-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-samples-dada2-both-runs-after-decontam.qzv

qiime feature-table merge-seqs \
  --i-data Run1/Disarm-only-rep-seqs-run1-filtered-after-decontam.qza \
  --i-data Run2/Disarm-only-rep-seqs-run2-filtered-after-decontam.qza \
  --o-merged-data Disarm-only-rep-seqs-both-runs-after-decontam.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-both-runs-after-decontam.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam.qzv

#Removing singletons and low abundant taxa features
qiime feature-table filter-features \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam.qza \
  --p-min-samples 2 \
  --p-min-frequency 10 \
  --o-filtered-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
  --m-sample-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization RDisarm-only-samples-dada2-both-runs-after-decontam-contingency.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-both-runs-after-decontam.qza \
--i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
--o-filtered-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qzv

qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-classifier-my-primers-majority-v-0.22.1.qza \
  --i-reads Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
  --p-reads-per-batch 2000 \
  --o-classification Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --verbose

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qzv

qiime metadata tabulate \
--m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
--m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
--o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy-tabulated.qzv

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
  --i-taxonomy Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-taxa-bar-plots-both-runs-after-decontam-contigency-Silva132.qzv

#Removing other known contaminants (Mitochondria, Chloroplast, and Archaea) and only keeping ASVs with at least taxonomic annotations at the phylum level
qiime taxa filter-table \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
  --i-taxonomy Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --p-include D_1__\
  --p-exclude mitochondria,chloroplast,archaea \
  --o-filtered-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
  --m-sample-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
--i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
--o-filtered-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qza

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qzv

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
  --i-taxonomy Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-taxa-bar-plots-both-runs-after-decontam-contingency-phyla-Silva132.qzv

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART IV - DIVERSITY ANALYSES INCLUDING LONGITUDINAL MICROBIOME COMPARISONS BETWEEN V3 AND V7 SAMPLES / Environment: QIIME2 (2020.2)

#Generating a phylogenetic tree for diversity analysis
qiime phylogeny align-to-tree-mafft-fasttree \
  --i-sequences Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qza \
  --output-dir mafft-fasttree-output

#Diversity analysis
#Note: Copy "Disarm_metadata-V3-V7-simplified-for-R1.txt" to core-metrics-results folder
cd core-metrics-results

qiime diversity core-metrics-phylogenetic \
  --i-phylogeny mafft-fasttree-output/rooted_tree.qza \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
  --p-sampling-depth 3101 \
  --m-metadata-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --output-dir core-metrics-results

qiime diversity alpha-group-significance \
  --i-alpha-diversity faith_pd_vector.qza \
  --m-metadata-file  Disarm_metadata-V3-V7-simplified-for-R1.txt  \
  --o-visualization V3-V7-faith-pd-group-significance.qzv

qiime diversity alpha-group-significance \
  --i-alpha-diversity observed_otus_vector.qza \
  --m-metadata-file  Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --o-visualization V3-V7-observed-otu-group-significance.qzv

qiime diversity alpha-group-significance \
  --i-alpha-diversity shannon_vector.qza \
  --m-metadata-file  Disarm_metadata-V3-V7-simplified-for-R1.txt  \
  --o-visualization V3-V7-shannon-group-significance.qzv

qiime diversity alpha-group-significance \
  --i-alpha-diversity evenness_vector.qza \
  --m-metadata-file  Disarm_metadata-V3-V7-simplified-for-R1.txt  \
  --o-visualization V3-V7-evenness-group-significance.qzv

qiime metadata tabulate \
  --m-input-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --m-input-file observed_otus_vector.qza \
  --m-input-file shannon_vector.qza \
  --m-input-file evenness_vector.qza \
  --m-input-file faith_pd_vector.qza \
  --o-visualization Both-visits-alpha-diversity-from-Qiime2.qzv 

Note: Beta diversity analyses performed using the vegan and phyloseq packages.

#Longitudinal analyses
qiime longitudinal pairwise-differences \
  --m-metadata-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --m-metadata-file observed_otus_vector.qza \
  --p-metric observed_otus \
  --p-group-column Treatment_Arm \
  --p-state-column Visit \
  --p-state-1 V3 \
  --p-state-2 V7 \
  --p-individual-id-column Unique_ID \
  --p-replicate-handling random \
  --o-visualization observed-otus-pairwise-differences-arm.qzv

qiime longitudinal pairwise-differences \
  --m-metadata-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --m-metadata-file observed_otus_vector.qza \
  --p-metric observed_otus \
  --p-group-column ICS \
  --p-state-column Visit \
  --p-state-1 V3 \
  --p-state-2 V7 \
  --p-individual-id-column Unique_ID \
  --p-replicate-handling random \
  --o-visualization observed-otus-pairwise-differences-ics.qzv

qiime longitudinal pairwise-differences \
  --m-metadata-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --m-metadata-file shannon_vector.qza \
  --p-metric shannon \
  --p-group-column Treatment_Arm \
  --p-state-column Visit \
  --p-state-1 V3 \
  --p-state-2 V7 \
  --p-individual-id-column Unique_ID \
  --p-replicate-handling random \
  --o-visualization shannon-pairwise-differences-arm.qzv

qiime longitudinal pairwise-differences \
  --m-metadata-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --m-metadata-file shannon_vector.qza \
  --p-metric shannon \
  --p-group-column ICS \
  --p-state-column Visit \
  --p-state-1 V3 \
  --p-state-2 V7 \
  --p-individual-id-column Unique_ID \
  --p-replicate-handling random \
  --o-visualization shannon-pairwise-differences-ics.qzv
  
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART V - PROCRUSTES ANALYSES - Environment: QIIME2 (2021.4)  
#All samples rarefied to the same sampling depth (3,146 reads)

1) Bud + Form  
qiime diversity beta-phylogenetic \
--i-table Symb-V3-reindexed-table.qza \
--i-phylogeny rooted_tree.qza \
--p-metric unweighted_unifrac \
--o-distance-matrix Symb-V3-unweighted_unifrac.qza

qiime diversity pcoa \
--i-distance-matrix Symb-V3-unweighted_unifrac.qza \
--o-pcoa Symb-V3-pcoa.qza
  
qiime diversity beta-phylogenetic \
--i-table Symb-V7-reindexed-table.qza \
--i-phylogeny rooted_tree.qza \
--p-metric unweighted_unifrac \
--o-distance-matrix Symb-V7-unweighted_unifrac.qza

qiime diversity pcoa \
--i-distance-matrix Symb-V7-unweighted_unifrac.qza \
--o-pcoa Symb-V7-pcoa.qza

mkdir Procrust-Symb
  
qiime diversity procrustes-analysis \
--i-reference Symb-V3-pcoa.qza \
--i-other Symb-V7-pcoa.qza \
--p-dimensions 10 \
--o-transformed-reference Procrust-Symb/Symb-unweighted_unifrac_pcoa-V3-transformed.qza \
--o-transformed-other Procrust-Symb/Symb-unweighted_unifrac_pcoa-V7-transformed.qza \
--o-disparity-results Procrust-Symb/Symb-pcoa_distance_disparity.qza

qiime metadata tabulate \
  --m-input-file Procrust-Symb/Symb-pcoa_distance_disparity.qza \
  --o-visualization Procrust-Symb/Symb-pcoa_distance_disparity.qzv
  
qiime emperor procrustes-plot \
--i-reference-pcoa Symb-V3-pcoa.qza \
--i-other-pcoa Symb-V7-pcoa.qza \
--i-m2-stats Procrust-Symb/Symb-pcoa_distance_disparity.qza \
--m-metadata-file Disarm_metadata-symb-procrust.txt \
--o-visualization Procrust-Symb/Symb-procrust-plot.qzv
  
2) Flu + Salm  
qiime diversity beta-phylogenetic \
--i-table Adv-V3-reindexed-table.qza \
--i-phylogeny rooted_tree.qza \
--p-metric unweighted_unifrac \
--o-distance-matrix Adv-V3-unweighted_unifrac.qza

qiime diversity pcoa \
--i-distance-matrix Adv-V3-unweighted_unifrac.qza \
--o-pcoa Adv-V3-pcoa.qza
  
qiime diversity beta-phylogenetic \
--i-table Adv-V7-reindexed-table.qza \
--i-phylogeny rooted_tree.qza \
--p-metric unweighted_unifrac \
--o-distance-matrix Adv-V7-unweighted_unifrac.qza

qiime diversity pcoa \
--i-distance-matrix Adv-V7-unweighted_unifrac.qza \
--o-pcoa Adv-V7-pcoa.qza

mkdir Procrust-Adv
  
qiime diversity procrustes-analysis \
--i-reference Adv-V3-pcoa.qza \
--i-other Adv-V7-pcoa.qza \
--p-dimensions 10 \
--o-transformed-reference Procrust-Adv/Adv-unweighted_unifrac_pcoa-V3-transformed.qza \
--o-transformed-other Procrust-Adv/Adv-unweighted_unifrac_pcoa-V7-transformed.qza \
--o-disparity-results Procrust-Adv/Adv-pcoa_distance_disparity.qza

qiime metadata tabulate \
  --m-input-file Procrust-Adv/Adv-pcoa_distance_disparity.qza \
  --o-visualization Procrust-Adv/Adv-pcoa_distance_disparity.qzv
  
qiime emperor procrustes-plot \
--i-reference-pcoa Adv-V3-pcoa.qza \
--i-other-pcoa Adv-V7-pcoa.qza \
--i-m2-stats Procrust-Adv/Adv-pcoa_distance_disparity.qza \
--m-metadata-file Disarm_metadata-Adv-procrust.txt \
--o-visualization Procrust-Adv/Adv-procrust-plot.qzv
  
3) Form 
qiime diversity beta-phylogenetic \
--i-table Oxeze-V3-reindexed-table.qza \
--i-phylogeny rooted_tree.qza \
--p-metric unweighted_unifrac \
--o-distance-matrix Oxeze-V3-unweighted_unifrac.qza

qiime diversity pcoa \
--i-distance-matrix Oxeze-V3-unweighted_unifrac.qza \
--o-pcoa Oxeze-V3-pcoa.qza
  
qiime diversity beta-phylogenetic \
--i-table Oxeze-V7-reindexed-table.qza \
--i-phylogeny rooted_tree.qza \
--p-metric unweighted_unifrac \
--o-distance-matrix Oxeze-V7-unweighted_unifrac.qza

qiime diversity pcoa \
--i-distance-matrix Oxeze-V7-unweighted_unifrac.qza \
--o-pcoa Oxeze-V7-pcoa.qza

mkdir Procrust-Oxeze
  
qiime diversity procrustes-analysis \
--i-reference Oxeze-V3-pcoa.qza \
--i-other Oxeze-V7-pcoa.qza \
--p-dimensions 10 \
--o-transformed-reference Procrust-Oxeze/Oxeze-unweighted_unifrac_pcoa-V3-transformed.qza \
--o-transformed-other Procrust-Oxeze/Oxeze-unweighted_unifrac_pcoa-V7-transformed.qza \
--o-disparity-results Procrust-Oxeze/Oxeze-pcoa_distance_disparity.qza

qiime metadata tabulate \
  --m-input-file Procrust-Oxeze/Oxeze-pcoa_distance_disparity.qza \
  --o-visualization Procrust-Oxeze/Oxeze-pcoa_distance_disparity.qzv
  
qiime emperor procrustes-plot \
--i-reference-pcoa Oxeze-V3-pcoa.qza \
--i-other-pcoa Oxeze-V7-pcoa.qza \
--i-m2-stats Procrust-Oxeze/Oxeze-pcoa_distance_disparity.qza \
--m-metadata-file Disarm_metadata-Oxeze-procrust.txt \
--o-visualization Procrust-Oxeze/Oxeze-procrust-plot.qzv  

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART VI - EXPORTING SOURCE FILES / Environment: QIIME2 (2020.2)

cd ..

#Removing sample "320067-V7-BC" due to low number or reads
qiime feature-table filter-samples \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
  --p-min-frequency 3000 \
  --o-filtered-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla-rarefaction.qza 

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla-rarefaction.qza \
  --m-sample-metadata-file Disarm_metadata-V3-V7-simplified-for-R1.txt \
  --o-visualization Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla-rarefaction.qzv
  
#Exporting BIOM file (not subsampled)  
qiime tools export \
--input-path Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla-rarefaction.qza  \
--output-path exported

mv exported/feature-table.biom exported/Disarm-table.biom

#Exporting Tree file  
qiime tools export \
--input-path mafft-fasttree-output/rooted_tree.qza \
--output-path exported

mv exported/tree.nwk  exported/Disarm-tree-mafft.nwk

#Exporting file with taxonomic classifications
qiime tools export \
--input-path Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
--output-path exported

echo -e "#OTUID\ttaxonomy\tconfidence" | cat - exported/taxonomy.tsv > exported/taxonomy1.tsv

sed -i '2d' exported/taxonomy1.tsv

#Adding taxonomic assignments to biom file
biom add-metadata -i exported/Disarm-table.biom -o exported/Disarm-table-with-taxonomy.biom --observation-metadata-fp exported/taxonomy1.tsv --sc-separated taxonomy

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART VII - ALPHA AND DIVERSITY ANALYSES / Environment: R (4.02)

rm(list=ls())
library(phyloseq)
library(ggplot2)
library(stringr)
library(ape)
library(tidyr)
library(broom)
library(dplyr)
library(plyr)
library(reshape2)
library(doBy)
library(RVAideMemoire)
library(vegan)
library(phangorn)
library(RColorBrewer)
library(gplots)
library(kableExtra)
library(gridExtra)
library(knitr)
library(plotly)
library(ggpubr)
library(data.table)
library(survival)
library(forcats)

#Removing scientific notation
options(scipen = 999)

setwd("C:/Users/ferna/Desktop/R1-Disarm paper/Replication/Source_files")

--------------------------------------------------------------Source files-------------------------------------------------------------------------------------------------
# Importing medatata
metadata = read.csv(file="Disarm_metadata-V3-V7.txt", header=T, sep='\t')

metadata = metadata[order(metadata$SampleID),]
rownames(metadata) = NULL

metadata$Treatment_Arm = as.factor(metadata$Treatment_Arm)

metadata$ICS = as.factor(metadata$ICS)

metadata$Visit = as.factor(metadata$Visit)

#Checking metadata
metadata %>%
  group_by(Treatment_Arm, Visit) %>%
  tally()

#One bronchial brushing (320067-V7-BC [collected at V7] from the Formoterol arm was discarded due to low number of reads) 

metadata %>%                       
  group_by(ICS, Visit) %>%
  tally()

#Importing OTU table, map and tree files
biom = import_biom("Disarm-table-with-taxonomy-subsampled.biom")

map = import_qiime_sample_data("Disarm_metadata-V3-V7.txt")
rownames(map) = map$SampleID

tree = read.tree("Disarm-tree-mafft.nwk")
tree$tip.label = gsub("'", "", tree$tip.label, fixed = TRUE)
tree$tip.label = gsub('"', '', tree$tip.label, fixed = TRUE)

#Creating phyloseq object
OTU = merge_phyloseq(biom,map,tree)
OTU

#Changing taxonomic ranks (Phyloseq object: OTU)
colnames(tax_table(OTU))

colnames(tax_table(OTU)) = c("Kingdom", "Phylum", "Class", 
                             "Order", "Family", "Genus", "Species")

OTU

#Pre-Processing (Phyloseq object: OTU)
OTU = prune_taxa(taxa_sums (OTU) > 0, OTU)

OTU

# Histogram of sample read counts (Phyloseq object: OTU)
sample_sum_df = data.frame(sum = sample_sums(OTU))

ggplot(sample_sum_df, aes(x = sum)) + 
  geom_histogram(color = "black", fill = "indianred", binwidth = 500) +
  ggtitle("Distribution of sample sequencing depth") + 
  xlab("Read counts") +
  theme(axis.title.y = element_blank())

smin = min(sample_sums(OTU))
smean = mean(sample_sums(OTU))
smax = max(sample_sums(OTU))

smin
smean
smax

#Checking Phyloseq object
head(sample_names(OTU))
sample_variables(OTU)
get_taxa_unique(OTU, "Phylum")
get_taxa_unique(OTU, "Genus")

#Transform to relative abundances (Phyloseq object: OTU)
OTU_RA = transform_sample_counts(OTU, function(x) x / sum(x))

-----------------------------------------------------------------Alpha Diversity Analyses-------------------------------------------------------------------------------------
#Importing diversity values from Qiime2
alpha_diversity = read.table ("Both-visits-alpha-diversity-from-Qiime2.txt", header=TRUE)
is.num <- sapply(alpha_diversity, is.numeric)
alpha_diversity[is.num] <- lapply(alpha_diversity[is.num], round, 2)

#Creating dataset with alpha diversity values only from V3
alpha_diversity_V3 = alpha_diversity %>%
  filter(Visit == "V3") %>%
  droplevels()

alpha_diversity_V3 = alpha_diversity_V3 [,-2]

#Creating dataset with clinical data only from V3
metadata_V3 = metadata %>%
  filter(Visit == "V3") %>%
  droplevels()

##Creating dataset with alpha diversity values only from V7
alpha_diversity_V7 = alpha_diversity %>%
  filter(Visit == "V7") %>%
  droplevels()

alpha_diversity_V7 = alpha_diversity_V7 [,-2]

#Creating dataset with clinical data only from V7
metadata_V7 = metadata %>%
  filter(Visit == "V7") %>%
  droplevels()

---------------------------------------------------------------Alpha Diversity Analyses (V3)----------------------------------------------------------------------------------
alpha_diversity_final_v3 <- merge(alpha_diversity_V3, metadata_V3,by="SampleID")

alpha_diversity_final_v3 <- alpha_diversity_final_v3 %>%
  select(SampleID, Treatment_Arm, ICS, everything())

alpha_diversity_final_v3 %>%
  group_by(Treatment_Arm) %>%
  tally()

alpha_diversity_final_v3 %>%
  group_by(ICS) %>%
  tally()

#Richness vs. Randomization Arm (V3)
attach (alpha_diversity_final_v3)

xlabs <- paste(levels(alpha_diversity_final_v3$Treatment_Arm),"\n(N=",table(alpha_diversity_final_v3$Treatment_Arm),")",sep="")

ggplot(alpha_diversity_final_v3, aes(x=Treatment_Arm, y=observed_otus, fill=Treatment_Arm)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Observed ASVs\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 100)) + 
  scale_y_continuous(breaks=seq(0, 100, 25)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V3/V3-Disarm-Arm-Richness.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_v3 %>%
  group_by(Treatment_Arm) %>%
  summarise(median = median (observed_otus), IQR = IQR (observed_otus))

kruskal.test (observed_otus ~ Treatment_Arm)

#Shannon Index vs. Randomization Arm (V3)
ggplot(alpha_diversity_final_v3, aes(x=Treatment_Arm, y=shannon, fill=Treatment_Arm)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Shannon Index\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 6)) + 
  scale_y_continuous(breaks=seq(0, 6, 1)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V3/V3-Disarm-Arm-Shannon.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_v3 %>%
  group_by(Treatment_Arm) %>%
  summarise(median = median (shannon), IQR = IQR (shannon))

kruskal.test (shannon ~ Treatment_Arm)

#Evenness vs. Randomization Arm (V3)
xlabs <- paste(levels(alpha_diversity_final_v3$Treatment_Arm),"\n(N=",table(alpha_diversity_final_v3$Treatment_Arm),")",sep="")

ggplot(alpha_diversity_final_v3, aes(x=Treatment_Arm, y=pielou_e, fill=Treatment_Arm)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("PielouÂ´s Evenness\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 1)) + 
  scale_y_continuous(breaks=seq(0, 1, 0.2)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V3/V3-Disarm-Arm-Evenness.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_v3 %>%
  group_by(Treatment_Arm) %>%
  summarise(median = median (pielou_e), IQR = IQR (observed_otus))

kruskal.test (pielou_e ~ Treatment_Arm)

#Richness vs. ICS status (V3)
xlabs <- paste(levels(alpha_diversity_final_v3$ICS),"\n(N=",table(alpha_diversity_final_v3$ICS),")",sep="")

ggplot(alpha_diversity_final_v3, aes(x=ICS, y=observed_otus, fill=ICS)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Observed ASVs\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 100)) + 
  scale_y_continuous(breaks=seq(0, 100, 25)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V3/V3-Disarm-ICS-Richness.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_v3 %>%
  group_by(ICS) %>%
  summarise(median = median (observed_otus), IQR = IQR (observed_otus))

wilcox.test(observed_otus ~ ICS, paired = FALSE, exact = TRUE)

#Shannon Index vs. ICS status (V3)
ggplot(alpha_diversity_final_v3, aes(x=ICS, y=shannon, fill=ICS)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Shannon Index\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(1, 6)) + 
  scale_y_continuous(breaks=seq(1, 6, 1)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V3/V3-Disarm-ICS-Shannon.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_v3 %>%
  group_by(ICS) %>%
  summarise(median = median (shannon), IQR = IQR (shannon))

wilcox.test(shannon ~ ICS, paired = FALSE, exact = TRUE)

#Evenness vs. ICS status (V3)
ggplot(alpha_diversity_final_v3, aes(x=ICS, y=pielou_e, fill=ICS)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("PielouÂ´s Evenness\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 1)) + 
  scale_y_continuous(breaks=seq(0, 1, 0.2)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V3/V3-Disarm-ICS-Evenness.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_v3 %>%
  group_by(ICS) %>%
  summarise(median = median (pielou_e), IQR = IQR (shannon))

wilcox.test(pielou_e ~ ICS, paired = FALSE, exact = TRUE)

---------------------------------------------------------------Alpha Diversity Analyses (V7)----------------------------------------------------------------------------------
alpha_diversity_final_V7 <- merge(alpha_diversity_V7, metadata_V7,by="SampleID")

alpha_diversity_final_V7 <- alpha_diversity_final_V7 %>%
  select(SampleID, Treatment_Arm, ICS, everything())

alpha_diversity_final_V7 %>%
  group_by(Treatment_Arm) %>%
  tally()

alpha_diversity_final_V7 %>%
  group_by(ICS) %>%
  tally()

#Richness vs. Randomization Arm (V7)
attach (alpha_diversity_final_V7)

xlabs <- paste(levels(alpha_diversity_final_V7$Treatment_Arm),"\n(N=",table(alpha_diversity_final_V7$Treatment_Arm),")",sep="")

ggplot(alpha_diversity_final_V7, aes(x=Treatment_Arm, y=observed_otus, fill=Treatment_Arm)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Observed ASVs\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 100)) + 
  scale_y_continuous(breaks=seq(0, 100, 25)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V7/V7-Disarm-Arm-Richness.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_V7 %>%
  group_by(Treatment_Arm) %>%
  summarise(median = median (observed_otus), IQR = IQR (observed_otus))

kruskal.test (observed_otus ~ Treatment_Arm)

#Shannon Index vs. Randomization Arm (V7)
ggplot(alpha_diversity_final_V7, aes(x=Treatment_Arm, y=shannon, fill=Treatment_Arm)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Shannon Index\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 6)) + 
  scale_y_continuous(breaks=seq(0, 6, 1)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V7/V7-Disarm-Arm-Shannon.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_V7 %>%
  group_by(Treatment_Arm) %>%
  summarise(median = median (shannon), IQR = IQR (shannon))

kruskal.test (shannon ~ Treatment_Arm)

#Richness vs. ICS status (V7)
xlabs <- paste(levels(alpha_diversity_final_V7$ICS),"\n(N=",table(alpha_diversity_final_V7$ICS),")",sep="")

ggplot(alpha_diversity_final_V7, aes(x=ICS, y=observed_otus, fill=ICS)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Observed ASVs\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(0, 100)) + 
  scale_y_continuous(breaks=seq(0, 100, 25)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V7/V7-Disarm-ICS-Richness.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_V7 %>%
  group_by(ICS) %>%
  summarise(median = median (observed_otus), IQR = IQR (observed_otus))

wilcox.test(observed_otus ~ ICS, paired = FALSE, exact = TRUE)

#Shannon Index vs. ICS status (V7)
ggplot(alpha_diversity_final_V7, aes(x=ICS, y=shannon, fill=ICS)) + geom_boxplot() +
  theme_bw() +
  guides(fill=guide_legend(title=NULL))+
  xlab(NULL) +
  ylab("Shannon Index\n") +
  theme(plot.title = element_text(color="black", face="bold", size=18, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=18)) +
  theme(axis.text.x = element_text(color="black", size=18, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=18, face="bold")) +
  coord_cartesian(ylim=c(1, 6)) + 
  scale_y_continuous(breaks=seq(1, 6, 1)) +
  scale_x_discrete(labels=xlabs) +
  theme(legend.position="none") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

ggsave(filename = "Output-diversity-V7/V7-Disarm-ICS-Shannon.tiff",
       width = 8, height = 6, dpi = 300, units = "in", device='tiff', compression = "lzw")

alpha_diversity_final_V7 %>%
  group_by(ICS) %>%
  summarise(median = median (shannon), IQR = IQR (shannon))

wilcox.test(shannon ~ ICS, paired = FALSE, exact = TRUE)

---------------------------------------------------------------Beta Diversity Analyses (V3)----------------------------------------------------------------------------------
#Creating phyloseq object with only V3 samples
OTU_V3 = subset_samples (OTU, Visit=="V3")
OTU_V3 = prune_taxa(taxa_sums (OTU_V3) > 0, OTU_V3)
OTU_V3

#Importing distance matrix (Unweighted Unifrac) from Qiime2 based on samples collected at V3
Dist_UU_Q_V3 = read.csv(file="V3-UU-mafft-distance-matrix.txt", header=T, row.names = 1, sep='\t')
Dist_UU_Q_V3  = as.dist(as(Dist_UU_Q_V3, "matrix"))
class (Dist_UU_Q_V3)

ordUU_qiime_V3 = ordinate(OTU_V3, method = "PCoA", distance = Dist_UU_Q_V3)
plot_scree(ordUU_qiime_V3, "Scree Plot: V3-UU-QIIME2")

-----------------------------------------------------Beta Diversity Analyses (V3 vs. Randomization Arm)-----------------------------------------------------------------------
#Creating additional files 
sampledf_V3 <- data.frame(sample_data(OTU_V3))
groups_OTU_V3_arm <- sampledf_V3[["Treatment_Arm"]]
table(groups_OTU_V3_arm)
UU_disp_OTU_V3_q_arm <-betadisper(Dist_UU_Q_V3, groups_OTU_V3_arm, type=c("centroid"))

#PCoA plot (Option 1)
dev.off()
labs <- paste("Dimension", 1:4, "(", round(100*UU_disp_OTU_V3_q_arm$eig / sum(UU_disp_OTU_V3_q_arm$eig), 2), "%)")
labs
tiff(file = "Output-diversity-V3/V3-UU-Qiime2-arm.tiff", height = 7, width = 7, units = "in", res = 800, compression = "lzw")
plot(UU_disp_OTU_V3_q_arm, cex=1.2, pch=c(16,16,16), main="V3-UU-Qiime2-arm", cex.lab=1.6,
     xlab="PCoA1 (21.1% Explained)" , ylab="PCoA2 (7.4% Explained)",
     hull=FALSE, ellipse=FALSE, lwd=2, label=F, cex.lab = 1.4, font.lab = 2, font.axis=2.0, cex.axis=1.2,  
     col = c("#F8766D", "#0093C4", "#7CAE00"))

lines(c(-0.7, 0.8), c(0.0,0.0), type = "l", lty = "dashed", col = "black", lwd=1.2)
lines(c(0.0,0.0), c(-0.6,0.5), type = "l", lty = "dashed", col = "black", lwd=1.2)
ordispider(UU_disp_OTU_V3_q_arm, groups_OTU_V3_arm, lwd=0.5, col = c("#F8766D", "#0093C4", "#7CAE00"))
points(UU_disp_OTU_V3_q_arm$centroids[,1:3], pch=15, cex=2, col=c("#F8766D", "#0093C4", "#7CAE00"))
dev.off()

#PCoA plot (Option 2)
scrs <- scores(UU_disp_OTU_V3_q_arm$vectors, display = 'sites')
scrs <- cbind(as.data.frame(scrs), Arm = sampledf_V3$Treatment_Arm)
cent <- aggregate(cbind(PCoA1, PCoA2) ~ Arm, data = scrs, FUN = mean)

segs <- merge(scrs, setNames(cent, c('Arm','oPCoA1','oPCoA2')),
              by = 'Arm', sort = FALSE)

ggplot(scrs, aes(x = PCoA1, y = PCoA2, color = Arm)) +
  geom_segment(data = segs,
               mapping = aes(xend = oPCoA1, yend = oPCoA2)) + # spiders
  geom_point(data = cent, size = 5, shape=19) + #centroids
  geom_point(size=3) +  # sample scores
  labs (x = "\nPCoA1 (21.1% Explained)" , y="PCoA2 (7.4% Explained)\n") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  guides(shape=FALSE) +
  theme(legend.title = element_text(face = "bold")) +
  theme(plot.title = element_text(color="black", face="bold", size=20, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=20)) +
  theme(axis.text.x = element_text(color="black", size=16, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=16, face="bold")) +
  coord_equal() +
  scale_color_manual(values=c("#F8766D", "#0093C4", "#7CAE00")) +
  theme(panel.grid.minor=element_blank(), panel.grid.major=element_blank(), panel.background=element_blank(), 
        axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position=c(+0.15, 0.12)) +
  theme(legend.text = element_text(colour="black", size = 12, face = "bold")) +
  geom_hline(yintercept=0, linetype="dashed", color = "black") + 
  geom_vline(xintercept=0, linetype="dashed", color = "black") +
  theme(legend.title = element_blank())

ggsave(filename = "Output-diversity-V3/V3-UU-Qiime2-arm-using-ggplot2.tiff",
       width = 7, height = 7, dpi = 800, units = "in", device='tiff', compression = "lzw")

dev.off()

## Within-group dispersion that PERMDISP is testing
boxplot(UU_disp_OTU_V3_q_arm)
TukeyHSD(UU_disp_OTU_V3_q_arm)

# Adonis test 
adonis(Dist_UU_Q_V3 ~ Treatment_Arm+Age+Sex+Smoking_Status, data = sampledf_V3, permutations=1000)

# Homogeneity of dispersion test
beta_UU_Arm_V3 <- betadisper(Dist_UU_Q_V3, sampledf_V3$Treatment_Arm)
permutest(beta_UU_Arm_V3)

-------------------------------------------------------------Beta Diversity Analyses (V3 vs. ICS Status)----------------------------------------------------------------------
#Creating additional files 
groups_OTU_V3_ics <- sampledf_V3[["ICS"]]
UU_disp_OTU_V3_q_ics <-betadisper(Dist_UU_Q_V3, groups_OTU_V3_ics, type=c("centroid"))

#PCoA plot (Option 1)
labs <- paste("Dimension", 1:4, "(", round(100*UU_disp_OTU_V3_q_ics$eig / sum(UU_disp_OTU_V3_q_ics$eig), 2), "%)")
labs
tiff(file = "Output-diversity-V3/V3-UU-Qiime2-ics.tiff", height = 7, width = 7, units = "in", res = 800, compression = "lzw")
plot(UU_disp_OTU_V3_q_ics, cex=1.2, pch=c(16,16), main="V3-UU-Qiime2-ics", cex.lab=1.6,
     xlab="PCoA1 (21.1% Explained)" , ylab="PCoA2 (7.4% Explained)",
     hull=FALSE, ellipse=FALSE, lwd=2, label=F, cex.lab = 1.4, font.lab = 2, font.axis=2.0, cex.axis=1.2,  
     col = c("#F8766D", "#0093C4"))

lines(c(-0.7, 0.8), c(0.0,0.0), type = "l", lty = "dashed", col = "black", lwd=1.2)
lines(c(0.0,0.0), c(-0.6,0.5), type = "l", lty = "dashed", col = "black", lwd=1.2)
ordispider(UU_disp_OTU_V3_q_ics, groups_OTU_V3_ics, lwd=0.5, col = c("#F8766D", "#0093C4"))
points(UU_disp_OTU_V3_q_ics$centroids[,1:2], pch=15, cex=2, col=c("#F8766D", "#0093C4"))
dev.off()

#PCoA plot (Option 2)
scrs <- scores(UU_disp_OTU_V3_q_ics$vectors, display = 'sites')
scrs <- cbind(as.data.frame(scrs), ICS = sampledf_V3$ICS)
cent <- aggregate(cbind(PCoA1, PCoA2) ~ ICS, data = scrs, FUN = mean)

segs <- merge(scrs, setNames(cent, c('ICS','oPCoA1','oPCoA2')),
              by = 'ICS', sort = FALSE)

ggplot(scrs, aes(x = PCoA1, y = PCoA2, color = ICS)) +
  geom_segment(data = segs,
               mapping = aes(xend = oPCoA1, yend = oPCoA2)) + # spiders
  geom_point(data = cent, size = 5, shape=19) + #centroids
  geom_point(size=3) +  # sample scores
  labs (x = "\nPCoA1 (21.1% Explained)" , y="PCoA2 (7.4% Explained)\n") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  guides(shape=FALSE) +
  theme(legend.title = element_text(face = "bold")) +
  theme(plot.title = element_text(color="black", face="bold", size=20, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=20)) +
  theme(axis.text.x = element_text(color="black", size=16, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=16, face="bold")) +
  coord_equal() +
  scale_color_manual(values=c("#F8766D", "#0093C4")) +
  theme(panel.grid.minor=element_blank(), panel.grid.major=element_blank(), panel.background=element_blank(), 
        axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position=c(+0.15, 0.12)) +
  theme(legend.text = element_text(colour="black", size = 12, face = "bold")) +
  geom_hline(yintercept=0, linetype="dashed", color = "black") + 
  geom_vline(xintercept=0, linetype="dashed", color = "black") +
  theme(legend.title = element_blank())

ggsave(filename = "Output-diversity-V3/V3-UU-Qiime2-ics-using-ggplot2.tiff",
       width = 7, height = 7, dpi = 800, units = "in", device='tiff', compression = "lzw")

dev.off()

## Within-group dispersion that PERMDISP is testing
boxplot(UU_disp_OTU_V3_q_ics)
TukeyHSD(UU_disp_OTU_V3_q_ics)

# Adonis test 
adonis(Dist_UU_Q_V3 ~ ICS+Age+Sex+Smoking_Status, data = sampledf_V3, permutations=1000)

# Homogeneity of dispersion test
beta_UU_ICS_V3 <- betadisper(Dist_UU_Q_V3, sampledf_V3$ICS)
permutest(beta_UU_ICS_V3)

-------------------------------------------------------------Beta Diversity Analyses (V7 vs. Randomization Arm)---------------------------------------------------------------
#Creating phyloseq object with only V7 samples
OTU_V7 = subset_samples (OTU, Visit=="V7")
OTU_V7 = prune_taxa(taxa_sums (OTU_V7) > 0, OTU_V7)
OTU_V7

#Importing distance matrix (Unweighted Unifrac) from Qiime2 based on samples collected at V7 
Dist_UU_Q_V7 = read.csv(file="V7-UU-mafft-distance-matrix.txt", header=T, row.names = 1, sep='\t')
Dist_UU_Q_V7  = as.dist(as(Dist_UU_Q_V7, "matrix"))
class (Dist_UU_Q_V7)

ordUU_qiime_V7 = ordinate(OTU_V7, method = "PCoA", distance = Dist_UU_Q_V7)
plot_scree(ordUU_qiime_V7, "Scree Plot: V7-UU-QIIME2")

#Creating additional files 
sampledf_V7 <- data.frame(sample_data(OTU_V7))
groups_OTU_V7_arm <- sampledf_V7[["Treatment_Arm"]]
table(groups_OTU_V7_arm)
UU_disp_OTU_V7_q_arm <-betadisper(Dist_UU_Q_V7, groups_OTU_V7_arm, type=c("centroid"))

#PCoA plot (Option 1)
dev.off()
labs <- paste("Dimension", 1:4, "(", round(100*UU_disp_OTU_V7_q_arm$eig / sum(UU_disp_OTU_V7_q_arm$eig), 2), "%)")
labs
tiff(file = "Output-diversity-V7/V7-UU-Qiime2-arm.tiff", height = 7, width = 7, units = "in", res = 800, compression = "lzw")
plot(UU_disp_OTU_V7_q_arm, cex=1.2, pch=c(16,16,16), main="V7-UU-Qiime2-arm", cex.lab=1.6,
     xlab="PCoA1 (21.3% Explained)" , ylab="PCoA2 (7.0% Explained)",
     hull=FALSE, ellipse=FALSE, lwd=2, label=F, cex.lab = 1.4, font.lab = 2, font.axis=2.0, cex.axis=1.2,  
     col = c("#F8766D", "#0093C4", "#7CAE00"))

lines(c(-0.7, 0.8), c(0.0,0.0), type = "l", lty = "dashed", col = "black", lwd=1.2)
lines(c(0.0,0.0), c(-0.6,0.5), type = "l", lty = "dashed", col = "black", lwd=1.2)
ordispider(UU_disp_OTU_V7_q_arm, groups_OTU_V7_arm, lwd=0.5, col = c("#F8766D", "#0093C4", "#7CAE00"))
points(UU_disp_OTU_V7_q_arm$centroids[,1:3], pch=15, cex=2, col=c("#F8766D", "#0093C4", "#7CAE00"))
dev.off()

#PCoA plot (Option 2)
scrs <- scores(UU_disp_OTU_V7_q_arm$vectors, display = 'sites')
scrs <- cbind(as.data.frame(scrs), Arm = sampledf_V7$Treatment_Arm)
cent <- aggregate(cbind(PCoA1, PCoA2) ~ Arm, data = scrs, FUN = mean)

segs <- merge(scrs, setNames(cent, c('Arm','oPCoA1','oPCoA2')),
              by = 'Arm', sort = FALSE)

ggplot(scrs, aes(x = PCoA1, y = PCoA2, color = Arm)) +
  geom_segment(data = segs,
               mapping = aes(xend = oPCoA1, yend = oPCoA2)) + # spiders
  geom_point(data = cent, size = 5, shape=19) + #centroids
  geom_point(size=3) +  # sample scores
  labs (x = "\nPCoA1 (21.1% Explained)" , y="PCoA2 (7.4% Explained)\n") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  guides(shape=FALSE) +
  theme(legend.title = element_text(face = "bold")) +
  theme(plot.title = element_text(color="black", face="bold", size=20, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=20)) +
  theme(axis.text.x = element_text(color="black", size=16, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=16, face="bold")) +
  coord_equal() +
  scale_color_manual(values=c("#F8766D", "#0093C4", "#7CAE00")) +
  theme(panel.grid.minor=element_blank(), panel.grid.major=element_blank(), panel.background=element_blank(), 
        axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position=c(+0.87, 0.87)) +
  theme(legend.text = element_text(colour="black", size = 12, face = "bold")) +
  geom_hline(yintercept=0, linetype="dashed", color = "black") + 
  geom_vline(xintercept=0, linetype="dashed", color = "black") +
  theme(legend.title = element_blank())

ggsave(filename = "Output-diversity-V7/V7-UU-Qiime2-arm-using-ggplot2.tiff",
       width = 7, height = 7, dpi = 800, units = "in", device='tiff', compression = "lzw")

dev.off()

## Within-group dispersion that PERMDISP is testing
boxplot(UU_disp_OTU_V7_q_arm)
TukeyHSD(UU_disp_OTU_V7_q_arm)

# Adonis test 
adonis(Dist_UU_Q_V7 ~ Treatment_Arm+Age+Sex+Smoking_Status, data = sampledf_V7, permutations=1000)

# Homogeneity of dispersion test
beta_UU_Arm_V7 <- betadisper(Dist_UU_Q_V7, sampledf_V7$Treatment_Arm)
permutest(beta_UU_Arm_V7)

---------------------------------------------------------------Beta Diversity Analyses (V7 vs. ICS Status)--------------------------------------------------------------------
#Creating additional files 
groups_OTU_V7_ics <- sampledf_V7[["ICS"]]
UU_disp_OTU_V7_q_ics <-betadisper(Dist_UU_Q_V7, groups_OTU_V7_ics, type=c("centroid"))

#PCoA plot (Option 1)
labs <- paste("Dimension", 1:4, "(", round(100*UU_disp_OTU_V7_q_ics$eig / sum(UU_disp_OTU_V7_q_ics$eig), 2), "%)")
labs
tiff(file = "Output-diversity-V7/V7-UU-Qiime2-ics.tiff", height = 7, width = 7, units = "in", res = 800, compression = "lzw")
plot(UU_disp_OTU_V7_q_ics, cex=1.2, pch=c(16,16), main="V7-UU-Qiime2-ics", cex.lab=1.6,
     xlab="PCoA1 (21.3% Explained)" , ylab="PCoA2 (7.0% Explained)",
     hull=FALSE, ellipse=FALSE, lwd=2, label=F, cex.lab = 1.4, font.lab = 2, font.axis=2.0, cex.axis=1.2,  
     col = c("#F8766D", "#0093C4"))

lines(c(-0.7, 0.8), c(0.0,0.0), type = "l", lty = "dashed", col = "black", lwd=1.2)
lines(c(0.0,0.0), c(-0.6,0.5), type = "l", lty = "dashed", col = "black", lwd=1.2)
ordispider(UU_disp_OTU_V7_q_ics, groups_OTU_V7_ics, lwd=0.5, col = c("#F8766D", "#0093C4"))
points(UU_disp_OTU_V7_q_ics$centroids[,1:2], pch=15, cex=2, col=c("#F8766D", "#0093C4"))
dev.off()

#PCoA plot (Option 2)
scrs <- scores(UU_disp_OTU_V7_q_ics$vectors, display = 'sites')
scrs <- cbind(as.data.frame(scrs), ICS = sampledf_V7$ICS)
cent <- aggregate(cbind(PCoA1, PCoA2) ~ ICS, data = scrs, FUN = mean)

segs <- merge(scrs, setNames(cent, c('ICS','oPCoA1','oPCoA2')),
              by = 'ICS', sort = FALSE)

ggplot(scrs, aes(x = PCoA1, y = PCoA2, color = ICS)) +
  geom_segment(data = segs,
               mapping = aes(xend = oPCoA1, yend = oPCoA2)) + # spiders
  geom_point(data = cent, size = 5, shape=19) + #centroids
  geom_point(size=3) +  # sample scores
  labs (x = "\nPCoA1 (21.3% Explained)" , y="PCoA2 (7.0% Explained)\n") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  guides(shape=FALSE) +
  theme(legend.title = element_text(face = "bold")) +
  theme(plot.title = element_text(color="black", face="bold", size=20, hjust=0.5)) +
  theme(axis.title = element_text(color="black", face="bold", size=20)) +
  theme(axis.text.x = element_text(color="black", size=16, face="bold")) +
  theme(axis.text.y = element_text(color="black", size=16, face="bold")) +
  coord_equal() +
  scale_color_manual(values=c("#F8766D", "#0093C4")) +
  theme(panel.grid.minor=element_blank(), panel.grid.major=element_blank(), panel.background=element_blank(), 
        axis.line = element_line(colour = "black"), panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  theme(legend.position=c(+0.15, 0.12)) +
  theme(legend.text = element_text(colour="black", size = 12, face = "bold")) +
  geom_hline(yintercept=0, linetype="dashed", color = "black") + 
  geom_vline(xintercept=0, linetype="dashed", color = "black") +
  theme(legend.title = element_blank())

ggsave(filename = "Output-diversity-V7/V7-UU-Qiime2-ics-using-ggplot2.tiff",
       width = 7, height = 7, dpi = 800, units = "in", device='tiff', compression = "lzw")

dev.off()

## Within-group dispersion that PERMDISP is testing
boxplot(UU_disp_OTU_V7_q_ics)
TukeyHSD(UU_disp_OTU_V7_q_ics)

# Adonis test 
adonis(Dist_UU_Q_V7 ~ ICS+Age+Sex+Smoking_Status, data = sampledf_V7, permutations=1000)

# Homogeneity of dispersion test
beta_UU_ICS_V7 <- betadisper(Dist_UU_Q_V7, sampledf_V7$ICS)
permutest(beta_UU_ICS_V7)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART VIII -  TAXONOMIC ANALYSES / Environment: R (4.02)

rm(list=ls())

library(phyloseq)
library(ggplot2)
library(cowplot)
library(stringr)
library(ape)
library(tidyr)
library(broom)
library(dplyr)
library(plyr)
library(reshape2)
library(doBy)
library(RVAideMemoire)
library(vegan)
library(phangorn)
library(RColorBrewer)
library(gplots)
library(kableExtra)
library(gridExtra)
library(knitr)
library(plotly)
library(ggpubr)
library(data.table)
library(survival)
library(forcats)

packageVersion('phyloseq')
packageVersion('vegan')

#Removing scientific notation
options(scipen = 999)

setwd("C:/Users/ferna/Desktop/R1-Disarm paper/Replication/Source_files")

-----------------------------------------------------------------Source files-------------------------------------------------------------------------------------------------
# Importing medatata
metadata = read.csv(file="Disarm_metadata-V3-V7.txt", header=T, sep='\t')

metadata = metadata[order(metadata$SampleID),]
rownames(metadata) = NULL

metadata$Treatment_Arm = as.factor(metadata$Treatment_Arm)

metadata$ICS = as.factor(metadata$ICS)

metadata$Visit = as.factor(metadata$Visit)

#Checking metadata
metadata %>%
  group_by(Treatment_Arm, Visit) %>%
  tally()

#One bronchial brushing (320067-V7-BC [collected at V7] from the Formoterol arm was discarded due to low number of reads) 

metadata %>%                       
  group_by(ICS, Visit) %>%
  tally()

#Importing OTU table, map and tree files
biom = import_biom("Disarm-table-with-taxonomy.biom")

map = import_qiime_sample_data("Disarm_metadata-V3-V7.txt")
rownames(map) = map$SampleID

tree = read.tree("Disarm-tree-mafft.nwk")
tree$tip.label = gsub("'", "", tree$tip.label, fixed = TRUE)
tree$tip.label = gsub('"', '', tree$tip.label, fixed = TRUE)

#Creating phyloseq object
OTU = merge_phyloseq(biom,map,tree)
OTU

#Changing taxonomic ranks (Phyloseq object: OTU)
colnames(tax_table(OTU))

colnames(tax_table(OTU)) = c("Kingdom", "Phylum", "Class", 
                              "Order", "Family", "Genus", "Species")

OTU

#Pre-Processing (Phyloseq object: OTU)
OTU = prune_taxa(taxa_sums (OTU) > 0, OTU)

OTU

# Histogram of sample read counts (Phyloseq object: OTU)
sample_sum_df = data.frame(sum = sample_sums(OTU))

ggplot(sample_sum_df, aes(x = sum)) + 
  geom_histogram(color = "black", fill = "indianred", binwidth = 500) +
  ggtitle("Distribution of sample sequencing depth") + 
  xlab("Read counts") +
  theme(axis.title.y = element_blank())

smin = min(sample_sums(OTU))
smean = mean(sample_sums(OTU))
smax = max(sample_sums(OTU))

smin
smean
smax

#Cleaning SILVA132 strings in taxonomy (Phyloseq object: OTU)
tax.clean = data.frame(tax_table(OTU))
tax.clean$Kingdom = str_replace(tax.clean$Kingdom, "D_0__","")
tax.clean$Phylum = str_replace(tax.clean$Phylum, "D_1__","")
tax.clean$Class = str_replace(tax.clean$Class, "D_2__","")
tax.clean$Order = str_replace(tax.clean$Order, "D_3__","")
tax.clean$Family = str_replace(tax.clean$Family, "D_4__","")
tax.clean$Genus = str_replace(tax.clean$Genus, "D_5__","")
tax.clean$Species = str_replace(tax.clean$Species, "D_6__","")
tax_table(OTU) = as.matrix(tax.clean)

#Exporting tax table with formatted NA genus taxonomic assignments
tax.clean = data.frame(tax_table(OTU))

#Changing all columns to characters 
for (i in 1:7){ tax.clean[,i] = as.character(tax.clean[,i])}

#Changing NA to empty strings
tax.clean[is.na(tax.clean)] = ""

#Fill missing taxonomy fields
for (i in 1:nrow(tax.clean)){
  if (tax.clean[i,2] == ""){
    kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
    tax.clean[i, 2:7] <- kingdom
  } else if (tax.clean[i,3] == ""){
    phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
    tax.clean[i, 3:7] <- phylum
  } else if (tax.clean[i,4] == ""){
    class <- paste("Class_", tax.clean[i,3], sep = "")
    tax.clean[i, 4:7] <- class
  } else if (tax.clean[i,5] == ""){
    order <- paste("Order_", tax.clean[i,4], sep = "")
    tax.clean[i, 5:7] <- order
  } else if (tax.clean[i,6] == ""){
    family <- paste("Genus_unknown_Family_", tax.clean[i,5], sep = "")
    tax.clean[i, 6:7] <- family
  } else if (tax.clean[i,7] == ""){
    tax.clean$Species[i] <- paste("Species_unknown_Genus_",tax.clean$Genus[i], sep = "")
  }
}

#Returning tax dataframe to phyloseq object (OTU)
tax_table(OTU) = as.matrix(tax.clean)

#Checking Phyloseq object
head(sample_names(OTU))
sample_variables(OTU)
get_taxa_unique(OTU, "Phylum")
get_taxa_unique(OTU, "Genus")

#Transform to relative abundances (Phyloseq object: OTU)
OTU_RA = transform_sample_counts(OTU, function(x) x / sum(x))

------------------------------------------------------Phylum analysis (Bronchoscopy samples from both visits - V3 and V7)-----------------------------------------------------
#Phylum analysis
#Creating csv file (phyloseq object: OTU)
OTU_taxa_phyla =  OTU %>%
  tax_glom(taxrank = "Phylum") %>%                     # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  arrange(Phylum)

write.table(OTU_taxa_phyla, file = "Output-taxa-both-visits/V3-V7-OTU_taxa_phyla-raw.csv", 
            sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by phylum (phyloseq object: OTU) 
glom = tax_glom(OTU, taxrank = 'Phylum')
glom_RA = transform_sample_counts(glom, function(x){x / sum(x)})

dat = psmelt(glom)
dat_RA = psmelt(glom_RA)

#Calculating total number of reads per sample (phyloseq object: OTU) 
phylum_graph_overall_reads = dat %>%
  group_by(Sample) %>%
  summarise (total_reads_patient  = sum(Abundance))

phylum_graph_overall_reads = phylum_graph_overall_reads %>% arrange(desc(total_reads_patient))
row.names(phylum_graph_overall_reads) = NULL 

#Creating a merged dataframe according to phylum with mean and median relative abundances (phyloseq object: OTU) 
median_phylum_overall = ddply(dat_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance)))
median_phylum_overall$RA_median_phylum = median_phylum_overall$RA_median_phylum *100
median_phylum_overall  = median_phylum_overall %>% arrange(desc(RA_median_phylum))
median_phylum_top5_overall = median_phylum_overall [c(1:5),]

#Creating a factor for ordering phylum in descending order 
List_phylum = as.character(median_phylum_top5_overall$Phylum)

-------------------------------------------------------------------------Phylum-V3 (Randomization Arm)------------------------------------------------------------------------
OTU_V3 = subset_samples(OTU, Visit=="V3")
OTU_V3 = prune_taxa(taxa_sums (OTU_V3) > 0, OTU_V3)
OTU_V3

smin = min(sample_sums(OTU_V3))
smean = mean(sample_sums(OTU_V3))
smax = max(sample_sums(OTU_V3))

smin
smean
smax

#Creating csv file (phyloseq object: OTU_V3) 
OTU_taxa_phyla_V3 =  OTU_V3 %>%
  tax_glom(taxrank = "Phylum") %>%                      # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Phylum)

write.table(OTU_taxa_phyla_V3, file = "Output-taxa-V3/V3-OTU_taxa_phyla-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by phylum (phyloseq object: OTU_V3) 
glom_V3 = tax_glom(OTU_V3, taxrank = 'Phylum')
glom_V3_RA = transform_sample_counts(glom_V3, function(x){x / sum(x)})

dat_V3 = psmelt(glom_V3)
dat_V3_RA = psmelt(glom_V3_RA)

dat_V3  = dat_V3 [,-2]
dat_V3_RA = dat_V3_RA [,-2]

dat_V3 = dat_V3 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

dat_V3_RA = dat_V3_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V3) 
dat_V3[!dat_V3$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V3_RA[!dat_V3_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

ggplot(dat_V3_RA,
       aes(x=Phylum,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with "Others" category (OTU_V3)
write.table(dat_V3, file = "Output-taxa-V3/V3-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V3_RA, file = "Output-taxa-V3/V3-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe by phylum with mean/median relative abundances and IQR (phyloseq object: OTU_V3) 
median_phylum_V3 = ddply(dat_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance),
                                                            Quantile=quantile(x$Abundance)))

median_phylum_V3 = median_phylum_V3 [,-c(4,6,8)]
colnames (median_phylum_V3)[4] = "Q1"
colnames (median_phylum_V3)[5] = "Q3"

median_phylum_V3$RA_median_phylum = median_phylum_V3$RA_median_phylum *100
median_phylum_V3$IQR = median_phylum_V3$IQR *100
median_phylum_V3$Q1 = median_phylum_V3$Q1*100
median_phylum_V3$Q3 = median_phylum_V3$Q3*100
median_phylum_V3 = median_phylum_V3 %>% arrange(desc(RA_median_phylum))

phylum_graph_V3 = dat_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

phylum_graph_V3 = phylum_graph_V3 %>%
  mutate (total_reads_overall = sum(total_reads_phylum))

phylum_graph_V3 = phylum_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

phylum_graph_V3 = merge (phylum_graph_V3, median_phylum_V3, by="Phylum")
phylum_graph_V3 = arrange(phylum_graph_V3, desc(RA_median_phylum))
row.names(phylum_graph_V3) = NULL
phylum_graph_V3_export = phylum_graph_V3 [,-c(3,4)]

is.num = sapply(phylum_graph_V3_export, is.numeric)
phylum_graph_V3_export [is.num] = lapply(phylum_graph_V3_export [is.num], round, 1)

phylum_graph_V3_export$Q1_Q3 = paste(phylum_graph_V3_export$Q1, phylum_graph_V3_export$Q3, sep="; ")
phylum_graph_V3_export = phylum_graph_V3_export %>%
  select (Phylum, total_reads_phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
colnames (phylum_graph_V3_export) = c("Phylum", "Total_Reads", "Mean_Abundance", "Median_Abundance", "Q1; Q3", "IQR")

kable(phylum_graph_V3_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T)

kable(phylum_graph_V3_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V3/V3-All-samples-phylum-merged-table.html", self_contained = T)

#Creating factors for plots
order_phylum = factor(phylum_graph_V3$Phylum, levels = phylum_graph_V3$Phylum)

dat_V3_RA$Phylum = as.factor(dat_V3_RA$Phylum)
dat_V3_RA$Phylum = factor(dat_V3_RA$Phylum, levels = order_phylum)

seq_group_arm = factor(dat_V3_RA$Treatment_Arm)
seq_group_ics = factor(dat_V3_RA$ICS)

#Creating a merged dataframe for plots according to the Randomization Arm
Arm_V3 = merge_samples(OTU_V3, "Treatment_Arm")
Arm_V3 = prune_taxa(taxa_sums (Arm_V3) > 0, Arm_V3)
Arm_V3

glom_V3_arm = tax_glom (Arm_V3, taxrank = 'Phylum')
glom_V3_arm_RA = transform_sample_counts (glom_V3_arm, function(x){x / sum(x)})

dat_V3_arm = psmelt (glom_V3_arm)
dat_V3_arm_RA = psmelt (glom_V3_arm_RA)

dat_V3_arm = dat_V3_arm %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_arm)[1] = "Group"

dat_V3_arm_RA = dat_V3_arm_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_arm_RA)[1] = "Group"

dat_V3_arm[!dat_V3_arm$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V3_arm_RA[!dat_V3_arm_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

#Reordering factors for plots
dat_V3_arm_RA$Group = as.factor (dat_V3_arm_RA$Group)
dat_V3_arm_RA$Phylum = as.factor(dat_V3_arm_RA$Phylum)
dat_V3_arm_RA$Phylum = factor(dat_V3_arm_RA$Phylum, levels = order_phylum)

#Creating customized color palettes for phylum analyses
cbPalette_phylum = c("#00BFC4", "#E7B800", "#FC4E07", "#0073C2FF", "#CBD588", "black")  

#Making merged plots - V3 (Randomization group vs. Phylum)
metadata_V3 = metadata %>%
  filter(Visit == "V3") %>%
  droplevels()

xlabs = paste(levels(metadata_V3$Treatment_Arm),"\n(N=",
               table(metadata_V3$Treatment_Arm),")",sep="")

p = ggplot(dat_V3_arm_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-Arm-phylum-3groups.png",
       width = 8.5, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V3) - Phylum
Adv_V3 = dat_V3 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V3_RA = dat_V3_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V3_median = ddply(Adv_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance),
                                                            Quantile=quantile(x$Abundance)))

Adv_V3_median = Adv_V3_median [,-c(4,6,8)]
colnames (Adv_V3_median)[4] = "Q1"
colnames (Adv_V3_median)[5] = "Q3"

Adv_V3_median$RA_median_phylum = Adv_V3_median$RA_median_phylum *100
Adv_V3_median$IQR = Adv_V3_median$IQR *100
Adv_V3_median$Q1 = Adv_V3_median$Q1*100
Adv_V3_median$Q3 = Adv_V3_median$Q3*100

Adv_V3_median$Phylum = factor(Adv_V3_median$Phylum, levels = order_phylum)

Adv_graph_V3 =  Adv_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Adv_graph_V3 = Adv_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Adv_graph_V3 = Adv_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Adv_graph_V3 = merge (Adv_graph_V3, Adv_V3_median, by="Phylum")
Adv_graph_V3$Phylum = factor(Adv_graph_V3$Phylum , levels = order_phylum)
row.names(Adv_graph_V3) = NULL

Adv_graph_V3$Group = as.factor("Flu + Salm")

Adv_graph_V3 = Adv_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Adv_graph_V3, is.numeric)
Adv_graph_V3 [is.num] = lapply(Adv_graph_V3 [is.num], round, 1)

Adv_graph_V3$Q1_Q3 = paste(Adv_graph_V3$Q1, Adv_graph_V3$Q3, sep="; ")
Adv_graph_V3 = Adv_graph_V3 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Adv_graph_V3 = Adv_graph_V3 %>%
  slice(match(order_phylum, Phylum))

#Bud + Form (V3) - Phylum
Symb_V3 = dat_V3 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V3_RA = dat_V3_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V3_median = ddply(Symb_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                          IQR=IQR(x$Abundance),
                                                          Quantile=quantile(x$Abundance)))

Symb_V3_median = Symb_V3_median [,-c(4,6,8)]
colnames (Symb_V3_median)[4] = "Q1"
colnames (Symb_V3_median)[5] = "Q3"

Symb_V3_median$RA_median_phylum = Symb_V3_median$RA_median_phylum *100
Symb_V3_median$IQR = Symb_V3_median$IQR *100
Symb_V3_median$Q1 = Symb_V3_median$Q1*100
Symb_V3_median$Q3 = Symb_V3_median$Q3*100

Symb_V3_median$Phylum = factor(Symb_V3_median$Phylum, levels = order_phylum)

Symb_graph_V3 =  Symb_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Symb_graph_V3 = Symb_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Symb_graph_V3 = Symb_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Symb_graph_V3 = merge (Symb_graph_V3, Symb_V3_median, by="Phylum")
Symb_graph_V3$Phylum = factor(Symb_graph_V3$Phylum , levels = order_phylum)
row.names(Symb_graph_V3) = NULL

Symb_graph_V3$Group = as.factor("Bud + Form")

Symb_graph_V3 = Symb_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Symb_graph_V3, is.numeric)
Symb_graph_V3 [is.num] = lapply(Symb_graph_V3 [is.num], round, 1)

Symb_graph_V3$Q1_Q3 = paste(Symb_graph_V3$Q1, Symb_graph_V3$Q3, sep="; ")
Symb_graph_V3 = Symb_graph_V3 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Symb_graph_V3 = Symb_graph_V3 %>%
  slice(match(order_phylum, Phylum))

#Form (V3) - Phylum
Oxeze_V3 = dat_V3 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V3_RA = dat_V3_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V3_median = ddply(Oxeze_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance),
                                                            Quantile=quantile(x$Abundance)))

Oxeze_V3_median = Oxeze_V3_median [,-c(4,6,8)]
colnames (Oxeze_V3_median)[4] = "Q1"
colnames (Oxeze_V3_median)[5] = "Q3"

Oxeze_V3_median$RA_median_phylum = Oxeze_V3_median$RA_median_phylum *100
Oxeze_V3_median$IQR = Oxeze_V3_median$IQR *100
Oxeze_V3_median$Q1 = Oxeze_V3_median$Q1*100
Oxeze_V3_median$Q3 = Oxeze_V3_median$Q3*100

Oxeze_V3_median$Phylum = factor(Oxeze_V3_median$Phylum, levels = order_phylum)

Oxeze_graph_V3 =  Oxeze_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Oxeze_graph_V3 = merge (Oxeze_graph_V3, Oxeze_V3_median, by="Phylum")
Oxeze_graph_V3$Phylum = factor(Oxeze_graph_V3$Phylum , levels = order_phylum)
row.names(Oxeze_graph_V3) = NULL

Oxeze_graph_V3$Group = as.factor("Form")

Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Oxeze_graph_V3, is.numeric)
Oxeze_graph_V3 [is.num] = lapply(Oxeze_graph_V3 [is.num], round, 1)

Oxeze_graph_V3$Q1_Q3 = paste(Oxeze_graph_V3$Q1, Oxeze_graph_V3$Q3, sep="; ")
Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V3 (Randomization Arm)
Table_V3_Arm = cbind (Symb_graph_V3 [,c(2,3,4,5,6)], Adv_graph_V3 [,c(3,4,5,6)], Oxeze_graph_V3 [,c(3,4,5,6)])
colnames (Table_V3_Arm) = c("Phylum", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median",  
                            "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V3_Arm = Table_V3_Arm [-6, ] #Removing "Others" category

kable(Table_V3_Arm, align = "lcccccccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_Arm, align = "lcccccccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 4,"Flu + Salm" = 4, "Form" = 4)) %>%
  save_kable(file = "Output-taxa-V3/Phylum-V3-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Phylum 
RANK = 'Phylum'

dat_V3_RA_1 = dat_V3_RA %>%
  filter(Phylum!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Phylum', 'Abundance')

V3_arm_kw_phylum = dat_V3_RA_1 %>% 
  group_by(Phylum) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_arm_kw_phylum

V3_arm_kw_phylum = V3_arm_kw_phylum [c(1,5,4,2,3,6)]

V3_arm_kw_phylum = V3_arm_kw_phylum %>%
  slice(match(order_phylum, Phylum))

V3_arm_kw_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_arm_kw_phylum, file = "Output-taxa-V3/V3_arm_phylum.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

------------------------------------------------------------------------------Phylum-V3 (ICS Status)-------------------------------------------------------------------------
#Creating a merged dataframe for plots according to ICS status
ICS_status_V3 = merge_samples(OTU_V3, "ICS")
ICS_status_V3 = prune_taxa(taxa_sums (ICS_status_V3) > 0, ICS_status_V3)
ICS_status_V3

glom_V3_ics = tax_glom(ICS_status_V3, taxrank = 'Phylum')
glom_V3_ics_RA = transform_sample_counts(glom_V3_ics, function(x){x / sum(x)})

dat_V3_ics = psmelt(glom_V3_ics)
dat_V3_ics_RA = psmelt(glom_V3_ics_RA)

dat_V3_ics = dat_V3_ics %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_ics)[1] = "Group"

dat_V3_ics_RA = dat_V3_ics_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_ics_RA)[1] = "Group"

dat_V3_ics[!dat_V3_ics$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V3_ics_RA[!dat_V3_ics_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

##Reordering factors for plots
dat_V3_ics_RA$Group = as.factor (dat_V3_ics_RA$Group)
dat_V3_ics_RA$Phylum = factor(dat_V3_ics_RA$Phylum, levels = order_phylum)

#Making merged plots - V3 (ICS status vs. Phylum)
xlabs = paste(levels(metadata_V3$ICS),"\n(N=",
               table(metadata_V3$ICS),")",sep="")

p = ggplot(dat_V3_ics_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-ics-phylum-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V3) - Phylum
ICS_V3 = dat_V3 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V3_RA = dat_V3_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V3_median = ddply(ICS_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                         IQR=IQR(x$Abundance),
                                                         Quantile=quantile(x$Abundance)))

ICS_V3_median = ICS_V3_median [,-c(4,6,8)]
colnames (ICS_V3_median)[4] = "Q1"
colnames (ICS_V3_median)[5] = "Q3"

ICS_V3_median$RA_median_phylum = ICS_V3_median$RA_median_phylum *100
ICS_V3_median$IQR = ICS_V3_median$IQR *100
ICS_V3_median$Q1 = ICS_V3_median$Q1*100
ICS_V3_median$Q3 = ICS_V3_median$Q3*100
ICS_V3_median$Phylum = factor(ICS_V3_median$Phylum, levels = order_phylum)

ICS_graph_V3 =  ICS_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

ICS_graph_V3 = ICS_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

ICS_graph_V3 = ICS_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

ICS_graph_V3 = merge (ICS_graph_V3, ICS_V3_median, by="Phylum")
ICS_graph_V3$Phylum = factor(ICS_graph_V3$Phylum, levels = order_phylum)
row.names(ICS_graph_V3) = NULL

ICS_graph_V3$Group = as.factor("ICS")

ICS_graph_V3 = ICS_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(ICS_graph_V3, is.numeric)
ICS_graph_V3 [is.num] = lapply(ICS_graph_V3 [is.num], round, 1)

ICS_graph_V3$Q1_Q3 = paste(ICS_graph_V3$Q1, ICS_graph_V3$Q3, sep="; ")
ICS_graph_V3 = ICS_graph_V3 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
ICS_graph_V3 = ICS_graph_V3 %>%
  slice(match(order_phylum, Phylum))

#Non-ICS (V3) - Phylum
Non_ICS_V3 = dat_V3 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V3_RA = dat_V3_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V3_median = ddply(Non_ICS_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                                IQR=IQR(x$Abundance),
                                                                Quantile=quantile(x$Abundance)))

Non_ICS_V3_median = Non_ICS_V3_median [,-c(4,6,8)]
colnames (Non_ICS_V3_median)[4] = "Q1"
colnames (Non_ICS_V3_median)[5] = "Q3"

Non_ICS_V3_median$RA_median_phylum = Non_ICS_V3_median$RA_median_phylum *100
Non_ICS_V3_median$IQR = Non_ICS_V3_median$IQR *100
Non_ICS_V3_median$Q1 = Non_ICS_V3_median$Q1*100
Non_ICS_V3_median$Q3 = Non_ICS_V3_median$Q3*100
Non_ICS_V3_median$Phylum = factor(Non_ICS_V3_median$Phylum, levels = order_phylum)

Non_ICS_graph_V3 =  Non_ICS_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Non_ICS_graph_V3 = merge (Non_ICS_graph_V3, Non_ICS_V3_median, by="Phylum")
Non_ICS_graph_V3$Phylum = factor(Non_ICS_graph_V3$Phylum, levels = order_phylum)
row.names(Non_ICS_graph_V3) = NULL

Non_ICS_graph_V3$Group = as.factor("Non-ICS")

Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Non_ICS_graph_V3, is.numeric)
Non_ICS_graph_V3 [is.num] = lapply(Non_ICS_graph_V3 [is.num], round, 1)

Non_ICS_graph_V3$Q1_Q3 = paste(Non_ICS_graph_V3$Q1, Non_ICS_graph_V3$Q3, sep="; ")
Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V3 (ICS status)
Table_V3_ICS = cbind (ICS_graph_V3 [,c(2,3,4,5,6)], Non_ICS_graph_V3 [,c(3,4,5,6)])
colnames (Table_V3_ICS) = c("Phylum", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V3_ICS  = Table_V3_ICS [-6, ] #Removing "Others" category

kable(Table_V3_ICS, align = "lcccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_ICS, align = "lcccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 4, "Non-ICS" = 4)) %>%
  save_kable(file = "Output-taxa-V3/Phylum-V3-table-ICS.html", self_contained = T)

#Comparing ICS status versus Phylum 
RANK = 'Phylum'

dat_V3_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_ics_wilcoxon_phylum

V3_ics_wilcoxon_phylum = V3_ics_wilcoxon_phylum [c(1,4,5,2,3,6)]

V3_ics_wilcoxon_phylum = V3_ics_wilcoxon_phylum %>%
  slice(match(order_phylum, Phylum))

V3_ics_wilcoxon_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_ics_wilcoxon_phylum, file = "Output-taxa-V3/V3_ics_phylum.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)

------------------------------------------------------Genus analysis (Bronchoscopy samples from both visits - V3 and V7)-----------------------------------------------------
#Genus analysis
#Creating csv file (phyloseq object: OTU)
OTU_taxa_genus =  OTU %>%
  tax_glom(taxrank = "Genus") %>%                      # agglomerate at genus level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  arrange(Genus)

write.table(OTU_taxa_genus, file = "Output-taxa-both-visits/V3-V7-OTU_taxa_genus-raw.csv", 
            sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by genus (phyloseq object: OTU) 
glom_g = tax_glom (OTU, taxrank = 'Genus')
glom_g_RA = transform_sample_counts (glom_g, function(x){x / sum(x)})

dat_g = psmelt(glom_g)
dat_g_RA = psmelt(glom_g_RA)

#Calculating total number of reads per sample (phyloseq object: OTU) 
genus_graph_overall_reads = dat_g %>%
  group_by(Sample) %>%
  summarise (total_reads_patient  = sum(Abundance))

genus_graph_overall_reads = genus_graph_overall_reads %>% arrange(desc(total_reads_patient))
row.names(genus_graph_overall_reads) = NULL 

#Creating a merged dataframe by genus according to genus with mean and median relative abundances (phyloseq object: OTU) 
median_genus_overall = ddply(dat_g_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance)))
median_genus_overall$RA_median_genus = median_genus_overall$RA_median_genus *100
median_genus_overall  = median_genus_overall %>% arrange(desc(RA_median_genus))
median_genus_top15_overall = median_genus_overall [c(1:15),]

#Creating a factor for ordering genus in descending order 
List_genus = as.character(median_genus_top15_overall$Genus)

-------------------------------------------------------------------------Genus-V3 (Randomization Arm)------------------------------------------------------------------------
#Creating csv file (phyloseq object: OTU_V3) 
OTU_taxa_genus_V3 =  OTU_V3 %>%
  tax_glom(taxrank = "Genus") %>%                       # agglomerate at genus level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Genus)

write.table(OTU_taxa_genus_V3, file = "Output-taxa-V3/V3-OTU_taxa_genus-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by genus (phyloseq object: OTU_V3) 
glom_g_V3 = tax_glom (OTU_V3, taxrank = 'Genus')
glom_g_V3_RA = transform_sample_counts(glom_g_V3, function(x){x / sum(x)})

dat_g_V3 = psmelt(glom_g_V3)
dat_g_V3_RA = psmelt(glom_g_V3_RA)

dat_g_V3  = dat_g_V3 [,-2]
dat_g_V3_RA = dat_g_V3_RA [,-2]

dat_g_V3 = dat_g_V3 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

dat_g_V3_RA = dat_g_V3_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V3) 
dat_g_V3[!dat_g_V3$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V3_RA[!dat_g_V3_RA$Genus %in% List_genus,]$Genus = 'Others'

ggplot(dat_g_V3_RA,
       aes(x=Genus,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with absolute counts and relative abundances with "Others" category (OTU_V3)
write.table(dat_V3, file = "Output-taxa-V3/V3-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V3_RA, file = "Output-taxa-V3/V3-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe according to genus with mean/median relative abundances and IQR (phyloseq object: OTU_V3) 
median_genus_V3 = ddply(dat_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance),
                                                           Quantile=quantile(x$Abundance)))
median_genus_V3 = median_genus_V3 [,-c(4,6,8)]
colnames (median_genus_V3)[4] = "Q1"
colnames (median_genus_V3)[5] = "Q3"

median_genus_V3$RA_median_genus = median_genus_V3$RA_median_genus *100
median_genus_V3$IQR = median_genus_V3$IQR *100
median_genus_V3$Q1 = median_genus_V3$Q1*100
median_genus_V3$Q3 = median_genus_V3$Q3*100
median_genus_V3  = median_genus_V3 %>% arrange(desc(RA_median_genus))

genus_graph_V3 = dat_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

genus_graph_V3 = genus_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

genus_graph_V3 = genus_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

genus_graph_V3 = merge (genus_graph_V3, median_genus_V3, by="Genus")
genus_graph_V3 = arrange(genus_graph_V3, desc(RA_mean_genus))
genus_graph_V3 = genus_graph_V3 %>%
  slice(2,3:16,1)
row.names(genus_graph_V3) = NULL
genus_graph_V3_export = genus_graph_V3 [,-c(3,4)]

is.num = sapply(genus_graph_V3_export, is.numeric)
genus_graph_V3_export [is.num] = lapply(genus_graph_V3_export [is.num], round, 1)

genus_graph_V3_export$Q1_Q3 = paste(genus_graph_V3_export$Q1, genus_graph_V3_export$Q3, sep="; ")
genus_graph_V3_export = genus_graph_V3_export %>%
  select (Genus, total_reads_genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
colnames (genus_graph_V3_export) = c("Genus", "Total_Reads", "Mean_Abundance", "Median_Abundance", "Q1; Q3", "IQR")

kable(genus_graph_V3_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T)

kable(genus_graph_V3_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V3/V3-All-samples-genus-merged-table.html", self_contained = T)

#Creating factors for plots
order_genus = factor(genus_graph_V3$Genus, levels = genus_graph_V3$Genus)
dat_g_V3_RA$Genus = as.factor(dat_g_V3_RA$Genus)
dat_g_V3_RA$Genus = factor(dat_g_V3_RA$Genus, levels = order_genus)

#Creating a merged dataframe for plots according to the Randomization Arm
glom_g_V3_arm = tax_glom (Arm_V3, taxrank = 'Genus')
glom_g_V3_arm_RA = transform_sample_counts(glom_g_V3_arm, function(x){x / sum(x)})

dat_g_V3_arm = psmelt (glom_g_V3_arm)
dat_g_V3_arm_RA = psmelt(glom_g_V3_arm_RA)

dat_g_V3_arm = dat_g_V3_arm %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_arm)[1] = "Group"

dat_g_V3_arm_RA = dat_g_V3_arm_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_arm_RA)[1] = "Group"

dat_g_V3_arm[!dat_g_V3_arm$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V3_arm_RA[!dat_g_V3_arm_RA$Genus %in% List_genus,]$Genus = 'Others'

#Reordering factors for plots
dat_g_V3_arm_RA$Group = as.factor (dat_g_V3_arm_RA$Group)
dat_g_V3_arm_RA$Genus = as.factor(dat_g_V3_arm_RA$Genus)
dat_g_V3_arm_RA$Genus = factor(dat_g_V3_arm_RA$Genus, levels = order_genus)

#Creating customized color palettes for genus analyses
cbPalette_genus <- c("#00BFC4", "#E7B800", "#FC4E07", "#0073C2FF", "#CBD588", "#999999",
                 "#C77CFF", "#5F7FC7", "#DA5724", "#508578", "darkred",
                 "#AD6F3B", "cornflowerblue","deeppink", "khaki", "black")

#Making merged plots - V3 (Randomization group vs. Genus)
xlabs = paste(levels(metadata_V3$Treatment_Arm),"\n(N=",
              table(metadata_V3$Treatment_Arm),")",sep="")

p = ggplot(dat_g_V3_arm_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-Arm-genus-3groups.png",
       width = 8.5, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V3) - Genus
Adv_g_V3 = dat_g_V3 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V3_RA = dat_g_V3_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V3_median = ddply(Adv_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance),
                                                           Quantile=quantile(x$Abundance)))

Adv_g_V3_median = Adv_g_V3_median [,-c(4,6,8)]
colnames (Adv_g_V3_median)[4] = "Q1"
colnames (Adv_g_V3_median)[5] = "Q3"

Adv_g_V3_median$RA_median_genus = Adv_g_V3_median$RA_median_genus *100
Adv_g_V3_median$IQR = Adv_g_V3_median$IQR *100
Adv_g_V3_median$Q1 = Adv_g_V3_median$Q1*100
Adv_g_V3_median$Q3 = Adv_g_V3_median$Q3*100

Adv_g_V3_median$Genus = factor(Adv_g_V3_median$Genus, levels = order_genus)

Adv_g_graph_V3 =  Adv_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Adv_g_graph_V3 = Adv_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Adv_g_graph_V3 = Adv_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Adv_g_graph_V3 = merge (Adv_g_graph_V3, Adv_g_V3_median, by="Genus")
Adv_g_graph_V3$Genus = factor(Adv_g_graph_V3$Genus , levels = order_genus)
row.names(Adv_g_graph_V3) = NULL

Adv_g_graph_V3$Group = as.factor("Flu + Salm")

Adv_g_graph_V3 = Adv_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Adv_g_graph_V3, is.numeric)
Adv_g_graph_V3 [is.num] = lapply(Adv_g_graph_V3 [is.num], round, 1)

Adv_g_graph_V3$Q1_Q3 = paste(Adv_g_graph_V3$Q1, Adv_g_graph_V3$Q3, sep="; ")
Adv_g_graph_V3 = Adv_g_graph_V3 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Adv_g_graph_V3 = Adv_g_graph_V3 %>%
  slice(match(order_genus, Genus))

#Bud + Form (V3) - Genus
Symb_g_V3 = dat_g_V3 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V3_RA = dat_g_V3_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V3_median = ddply(Symb_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                             IQR=IQR(x$Abundance),
                                                             Quantile=quantile(x$Abundance)))

Symb_g_V3_median = Symb_g_V3_median [,-c(4,6,8)]
colnames (Symb_g_V3_median)[4] = "Q1"
colnames (Symb_g_V3_median)[5] = "Q3"

Symb_g_V3_median$RA_median_genus = Symb_g_V3_median$RA_median_genus *100
Symb_g_V3_median$IQR = Symb_g_V3_median$IQR *100
Symb_g_V3_median$Q1 = Symb_g_V3_median$Q1*100
Symb_g_V3_median$Q3 = Symb_g_V3_median$Q3*100

Symb_g_V3_median$Genus = factor(Symb_g_V3_median$Genus, levels = order_genus)

Symb_g_graph_V3 =  Symb_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Symb_g_graph_V3 = Symb_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Symb_g_graph_V3 = Symb_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Symb_g_graph_V3 = merge (Symb_g_graph_V3, Symb_g_V3_median, by="Genus")
Symb_g_graph_V3$Genus = factor(Symb_g_graph_V3$Genus , levels = order_genus)
row.names(Symb_g_graph_V3) = NULL

Symb_g_graph_V3$Group = as.factor("Bud + Form")

Symb_g_graph_V3 = Symb_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Symb_g_graph_V3, is.numeric)
Symb_g_graph_V3 [is.num] = lapply(Symb_g_graph_V3 [is.num], round, 1)

Symb_g_graph_V3$Q1_Q3 = paste(Symb_g_graph_V3$Q1, Symb_g_graph_V3$Q3, sep="; ")
Symb_g_graph_V3 = Symb_g_graph_V3 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Symb_g_graph_V3 = Symb_g_graph_V3 %>%
  slice(match(order_genus, Genus))

#Form (V3) - Genus
Oxeze_g_V3 = dat_g_V3 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V3_RA = dat_g_V3_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V3_median = ddply(Oxeze_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                               IQR=IQR(x$Abundance),
                                                               Quantile=quantile(x$Abundance)))

Oxeze_g_V3_median = Oxeze_g_V3_median [,-c(4,6,8)]
colnames (Oxeze_g_V3_median)[4] = "Q1"
colnames (Oxeze_g_V3_median)[5] = "Q3"

Oxeze_g_V3_median$RA_median_genus = Oxeze_g_V3_median$RA_median_genus *100
Oxeze_g_V3_median$IQR = Oxeze_g_V3_median$IQR *100
Oxeze_g_V3_median$Q1 = Oxeze_g_V3_median$Q1*100
Oxeze_g_V3_median$Q3 = Oxeze_g_V3_median$Q3*100

Oxeze_g_V3_median$Genus = factor(Oxeze_g_V3_median$Genus, levels = order_genus)

Oxeze_g_graph_V3 =  Oxeze_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Oxeze_g_graph_V3 = Oxeze_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Oxeze_g_graph_V3 = Oxeze_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Oxeze_g_graph_V3 = merge (Oxeze_g_graph_V3, Oxeze_g_V3_median, by="Genus")
Oxeze_g_graph_V3$Genus = factor(Oxeze_g_graph_V3$Genus , levels = order_genus)
row.names(Oxeze_g_graph_V3) = NULL

Oxeze_g_graph_V3$Group = as.factor("Form")

Oxeze_g_graph_V3 = Oxeze_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Oxeze_g_graph_V3, is.numeric)
Oxeze_g_graph_V3 [is.num] = lapply(Oxeze_g_graph_V3 [is.num], round, 1)

Oxeze_g_graph_V3$Q1_Q3 = paste(Oxeze_g_graph_V3$Q1, Oxeze_g_graph_V3$Q3, sep="; ")
Oxeze_g_graph_V3 = Oxeze_g_graph_V3 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Oxeze_g_graph_V3 = Oxeze_g_graph_V3 %>%
  slice(match(order_genus, Genus))

#Table Genus - V3 (Randomization Arm)
Table_V3_g_Arm = cbind (Symb_g_graph_V3 [,c(2,3,4,5,6)], Adv_g_graph_V3 [,c(3,4,5,6)], Oxeze_g_graph_V3 [,c(3,4,5,6)])
colnames (Table_V3_g_Arm) = c("Genus", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median",  
                            "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V3_g_Arm  = Table_V3_g_Arm [-16, ] #Removing "Others" category

kable(Table_V3_g_Arm, align = "lcccccccccccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_g_Arm, align = "lcccccccccccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 4,"Flu + Salm" = 4, "Form" = 4)) %>%
  save_kable(file = "Output-taxa-V3/Genus-V3-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Genus 
RANK = 'Genus'

dat_g_V3_RA_1 = dat_g_V3_RA %>%
  filter(Genus!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Genus', 'Abundance')

V3_arm_kw_genus = dat_g_V3_RA_1 %>% 
  group_by(Genus) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_arm_kw_genus

V3_arm_kw_genus = V3_arm_kw_genus [c(1,5,4,2,3,6)]

V3_arm_kw_genus = V3_arm_kw_genus %>%
  slice(match(order_genus, Genus))

V3_arm_kw_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_arm_kw_genus, file = "Output-taxa-V3/V3_arm_genus.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

------------------------------------------------------------------------------Genus-V3 (ICS Status)--------------------------------------------------------------------------
#Creating a merged dataframe for plots according to ICS status
glom_g_V3_ics = tax_glom (ICS_status_V3, taxrank = 'Genus')
glom_g_V3_ics_RA = transform_sample_counts (glom_g_V3_ics, function(x){x / sum(x)})

dat_g_V3_ics = psmelt(glom_g_V3_ics)
dat_g_V3_ics_RA = psmelt(glom_g_V3_ics_RA)

dat_g_V3_ics = dat_g_V3_ics %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_ics)[1] = "Group"

dat_g_V3_ics_RA = dat_g_V3_ics_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_ics_RA)[1] = "Group"

dat_g_V3_ics[!dat_g_V3_ics$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V3_ics_RA[!dat_g_V3_ics_RA$Genus %in% List_genus,]$Genus = 'Others'

##Reordering factors for plots
dat_g_V3_ics_RA$Group = as.factor (dat_g_V3_ics_RA$Group)
dat_g_V3_ics_RA$Genus = factor(dat_g_V3_ics_RA$Genus, levels = order_genus)

#Making merged plots - V3 (ICS status vs. Genus)
xlabs = paste(levels(metadata_V3$ICS),"\n(N=",
              table(metadata_V3$ICS),")",sep="")

p = ggplot(dat_g_V3_ics_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-ics-genus-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V3) - Genus
ICS_g_V3 = dat_g_V3 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V3_RA = dat_g_V3_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V3_median = ddply(ICS_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                            IQR=IQR(x$Abundance),
                                                            Quantile=quantile(x$Abundance)))

ICS_g_V3_median = ICS_g_V3_median [,-c(4,6,8)]
colnames (ICS_g_V3_median)[4] = "Q1"
colnames (ICS_g_V3_median)[5] = "Q3"

ICS_g_V3_median$RA_median_genus = ICS_g_V3_median$RA_median_genus *100
ICS_g_V3_median$IQR = ICS_g_V3_median$IQR *100
ICS_g_V3_median$Q1 = ICS_g_V3_median$Q1*100
ICS_g_V3_median$Q3 = ICS_g_V3_median$Q3*100
ICS_g_V3_median$Genus = factor(ICS_g_V3_median$Genus, levels = order_genus)

ICS_g_graph_V3 =  ICS_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

ICS_g_graph_V3 = merge (ICS_g_graph_V3, ICS_g_V3_median, by="Genus")
ICS_g_graph_V3$Genus = factor(ICS_g_graph_V3$Genus, levels = order_genus)
row.names(ICS_g_graph_V3) = NULL

ICS_g_graph_V3$Group = as.factor("ICS")

ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(ICS_g_graph_V3, is.numeric)
ICS_g_graph_V3 [is.num] = lapply(ICS_g_graph_V3 [is.num], round, 1)

ICS_g_graph_V3$Q1_Q3 = paste(ICS_g_graph_V3$Q1, ICS_g_graph_V3$Q3, sep="; ")
ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  slice(match(order_genus, Genus))

#Non-ICS (V3) - Genus
Non_ICS_g_V3 = dat_g_V3 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V3_RA = dat_g_V3_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V3_median = ddply(Non_ICS_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                                   IQR=IQR(x$Abundance),
                                                                   Quantile=quantile(x$Abundance)))

Non_ICS_g_V3_median = Non_ICS_g_V3_median [,-c(4,6,8)]
colnames (Non_ICS_g_V3_median)[4] = "Q1"
colnames (Non_ICS_g_V3_median)[5] = "Q3"

Non_ICS_g_V3_median$RA_median_genus = Non_ICS_g_V3_median$RA_median_genus *100
Non_ICS_g_V3_median$IQR = Non_ICS_g_V3_median$IQR *100
Non_ICS_g_V3_median$Q1 = Non_ICS_g_V3_median$Q1*100
Non_ICS_g_V3_median$Q3 = Non_ICS_g_V3_median$Q3*100
Non_ICS_g_V3_median$Genus = factor(Non_ICS_g_V3_median$Genus, levels = order_genus)

Non_ICS_g_graph_V3 =  Non_ICS_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Non_ICS_g_graph_V3 = merge (Non_ICS_g_graph_V3, Non_ICS_g_V3_median, by="Genus")
Non_ICS_g_graph_V3$Genus = factor(Non_ICS_g_graph_V3$Genus, levels = order_genus)
row.names(Non_ICS_g_graph_V3) = NULL

Non_ICS_g_graph_V3$Group = as.factor("Non-ICS")

Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Non_ICS_g_graph_V3, is.numeric)
Non_ICS_g_graph_V3 [is.num] = lapply(Non_ICS_g_graph_V3 [is.num], round, 1)

Non_ICS_g_graph_V3$Q1_Q3 = paste(Non_ICS_g_graph_V3$Q1, Non_ICS_g_graph_V3$Q3, sep="; ")
Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  slice(match(order_genus, Genus))

#Table Genus - V3 (ICS status)
Table_V3_g_ICS = cbind (ICS_g_graph_V3 [,c(2,3,4,5,6)], Non_ICS_g_graph_V3 [,c(3,4,5,6)])
colnames (Table_V3_g_ICS) = c("Genus", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V3_g_ICS = Table_V3_g_ICS  [-16, ] #Removing "Others" category

kable(Table_V3_g_ICS, align = "lcccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_g_ICS, align = "lcccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 4, "Non-ICS" = 4)) %>%
  save_kable(file = "Output-taxa-V3/Genus-V3-table-ICS.html", self_contained = T)

#Comparing ICS status versus Genus 
RANK = 'Genus'

dat_g_V3_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_ics_wilcoxon_genus

V3_ics_wilcoxon_genus = V3_ics_wilcoxon_genus [c(1,4,5,2,3,6)]

V3_ics_wilcoxon_genus = V3_ics_wilcoxon_genus %>%
  slice(match(order_genus, Genus))

V3_ics_wilcoxon_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_ics_wilcoxon_genus, file = "Output-taxa-V3/V3_ics_genus.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)

-------------------------------------------------------------------------Phylum-V7 (Randomization Arm)------------------------------------------------------------------------
OTU_V7 = subset_samples(OTU, Visit=="V7")
OTU_V7 = prune_taxa(taxa_sums (OTU_V7) > 0, OTU_V7)
OTU_V7

smin = min(sample_sums(OTU_V7))
smean = mean(sample_sums(OTU_V7))
smax = max(sample_sums(OTU_V7))

smin
smean
smax

#Creating csv file (phyloseq object: OTU_V7) 
OTU_taxa_phyla_V7 =  OTU_V7 %>%
  tax_glom(taxrank = "Phylum") %>%                      # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Phylum)

write.table(OTU_taxa_phyla_V7, file = "Output-taxa-V7/V7-OTU_taxa_phyla-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by phylum (phyloseq object: OTU_V7) 
glom_V7 = tax_glom(OTU_V7, taxrank = 'Phylum')
glom_V7_RA = transform_sample_counts(glom_V7, function(x){x / sum(x)})

dat_V7 = psmelt(glom_V7)
dat_V7_RA = psmelt(glom_V7_RA)

dat_V7  = dat_V7 [,-2]
dat_V7_RA = dat_V7_RA [,-2]

dat_V7 = dat_V7 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

dat_V7_RA = dat_V7_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V7) 
dat_V7[!dat_V7$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V7_RA[!dat_V7_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

ggplot(dat_V7_RA,
       aes(x=Phylum,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with "Others" category (OTU_V7)
write.table(dat_V7, file = "Output-taxa-V7/V7-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V7_RA, file = "Output-taxa-V7/V7-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe by phylum with mean/median relative abundances and IQR (phyloseq object: OTU_V7) 
median_phylum_V7 = ddply(dat_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                           IQR=IQR(x$Abundance),
                                                           Quantile=quantile(x$Abundance)))

median_phylum_V7 = median_phylum_V7 [,-c(4,6,8)]
colnames (median_phylum_V7)[4] = "Q1"
colnames (median_phylum_V7)[5] = "Q3"

median_phylum_V7$RA_median_phylum = median_phylum_V7$RA_median_phylum *100
median_phylum_V7$IQR = median_phylum_V7$IQR *100
median_phylum_V7$Q1 = median_phylum_V7$Q1*100
median_phylum_V7$Q3 = median_phylum_V7$Q3*100
median_phylum_V7 = median_phylum_V7 %>% arrange(desc(RA_median_phylum))

phylum_graph_V7 = dat_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

phylum_graph_V7 = phylum_graph_V7 %>%
  mutate (total_reads_overall = sum(total_reads_phylum))

phylum_graph_V7 = phylum_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

phylum_graph_V7 = merge (phylum_graph_V7, median_phylum_V7, by="Phylum")
phylum_graph_V7 = arrange(phylum_graph_V7, desc(RA_median_phylum))
row.names(phylum_graph_V7) = NULL
phylum_graph_V7_export = phylum_graph_V7 [,-c(3,4)]

is.num = sapply(phylum_graph_V7_export, is.numeric)
phylum_graph_V7_export [is.num] = lapply(phylum_graph_V7_export [is.num], round, 1)

phylum_graph_V7_export$Q1_Q3 = paste(phylum_graph_V7_export$Q1, phylum_graph_V7_export$Q3, sep="; ")
phylum_graph_V7_export = phylum_graph_V7_export %>%
  select (Phylum, total_reads_phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
colnames (phylum_graph_V7_export) = c("Phylum", "Total_Reads", "Mean_Abundance", "Median_Abundance", "Q1; Q3", "IQR")

kable(phylum_graph_V7_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T)

kable(phylum_graph_V7_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V7/V7-All-samples-phylum-merged-table.html", self_contained = T)

#Creating factors for plots
order_phylum = factor(phylum_graph_V7$Phylum, levels = phylum_graph_V7$Phylum)

dat_V7_RA$Phylum = as.factor(dat_V7_RA$Phylum)
dat_V7_RA$Phylum = factor(dat_V7_RA$Phylum, levels = order_phylum)

seq_group_arm = factor(dat_V7_RA$Treatment_Arm)
seq_group_ics = factor(dat_V7_RA$ICS)

#Creating a merged dataframe for plots according to the Randomization Arm
Arm_V7 = merge_samples(OTU_V7, "Treatment_Arm")
Arm_V7 = prune_taxa(taxa_sums (Arm_V7) > 0, Arm_V7)
Arm_V7

glom_V7_arm = tax_glom (Arm_V7, taxrank = 'Phylum')
glom_V7_arm_RA = transform_sample_counts (glom_V7_arm, function(x){x / sum(x)})

dat_V7_arm = psmelt (glom_V7_arm)
dat_V7_arm_RA = psmelt (glom_V7_arm_RA)

dat_V7_arm = dat_V7_arm %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_arm)[1] = "Group"

dat_V7_arm_RA = dat_V7_arm_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_arm_RA)[1] = "Group"

dat_V7_arm[!dat_V7_arm$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V7_arm_RA[!dat_V7_arm_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

#Reordering factors for plots
dat_V7_arm_RA$Group = as.factor (dat_V7_arm_RA$Group)
dat_V7_arm_RA$Phylum = as.factor(dat_V7_arm_RA$Phylum)
dat_V7_arm_RA$Phylum = factor(dat_V7_arm_RA$Phylum, levels = order_phylum)

#Creating customized color palettes for phylum analyses
cbPalette_phylum = c("#00BFC4", "#E7B800", "#FC4E07", "#0073C2FF", "#CBD588", "black")  

#Making merged plots - V7 (Randomization group vs. Phylum)
metadata_V7 = metadata %>%
  filter(Visit == "V7") %>%
  droplevels()

xlabs = paste(levels(metadata_V7$Treatment_Arm),"\n(N=",
              table(metadata_V7$Treatment_Arm),")",sep="")

p = ggplot(dat_V7_arm_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-Arm-phylum-3groups.png",
       width = 8.5, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V7) - Phylum
Adv_V7 = dat_V7 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V7_RA = dat_V7_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V7_median = ddply(Adv_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                        IQR=IQR(x$Abundance),
                                                        Quantile=quantile(x$Abundance)))

Adv_V7_median = Adv_V7_median [,-c(4,6,8)]
colnames (Adv_V7_median)[4] = "Q1"
colnames (Adv_V7_median)[5] = "Q3"

Adv_V7_median$RA_median_phylum = Adv_V7_median$RA_median_phylum *100
Adv_V7_median$IQR = Adv_V7_median$IQR *100
Adv_V7_median$Q1 = Adv_V7_median$Q1*100
Adv_V7_median$Q3 = Adv_V7_median$Q3*100

Adv_V7_median$Phylum = factor(Adv_V7_median$Phylum, levels = order_phylum)

Adv_graph_V7 =  Adv_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Adv_graph_V7 = Adv_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Adv_graph_V7 = Adv_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Adv_graph_V7 = merge (Adv_graph_V7, Adv_V7_median, by="Phylum")
Adv_graph_V7$Phylum = factor(Adv_graph_V7$Phylum , levels = order_phylum)
row.names(Adv_graph_V7) = NULL

Adv_graph_V7$Group = as.factor("Flu + Salm")

Adv_graph_V7 = Adv_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Adv_graph_V7, is.numeric)
Adv_graph_V7 [is.num] = lapply(Adv_graph_V7 [is.num], round, 1)

Adv_graph_V7$Q1_Q3 = paste(Adv_graph_V7$Q1, Adv_graph_V7$Q3, sep="; ")
Adv_graph_V7 = Adv_graph_V7 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Adv_graph_V7 = Adv_graph_V7 %>%
  slice(match(order_phylum, Phylum))

#Bud + Form (V7) - Phylum
Symb_V7 = dat_V7 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V7_RA = dat_V7_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V7_median = ddply(Symb_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                          IQR=IQR(x$Abundance),
                                                          Quantile=quantile(x$Abundance)))

Symb_V7_median = Symb_V7_median [,-c(4,6,8)]
colnames (Symb_V7_median)[4] = "Q1"
colnames (Symb_V7_median)[5] = "Q3"

Symb_V7_median$RA_median_phylum = Symb_V7_median$RA_median_phylum *100
Symb_V7_median$IQR = Symb_V7_median$IQR *100
Symb_V7_median$Q1 = Symb_V7_median$Q1*100
Symb_V7_median$Q3 = Symb_V7_median$Q3*100

Symb_V7_median$Phylum = factor(Symb_V7_median$Phylum, levels = order_phylum)

Symb_graph_V7 =  Symb_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Symb_graph_V7 = Symb_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Symb_graph_V7 = Symb_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Symb_graph_V7 = merge (Symb_graph_V7, Symb_V7_median, by="Phylum")
Symb_graph_V7$Phylum = factor(Symb_graph_V7$Phylum , levels = order_phylum)
row.names(Symb_graph_V7) = NULL

Symb_graph_V7$Group = as.factor("Bud + Form")

Symb_graph_V7 = Symb_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Symb_graph_V7, is.numeric)
Symb_graph_V7 [is.num] = lapply(Symb_graph_V7 [is.num], round, 1)

Symb_graph_V7$Q1_Q3 = paste(Symb_graph_V7$Q1, Symb_graph_V7$Q3, sep="; ")
Symb_graph_V7 = Symb_graph_V7 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Symb_graph_V7 = Symb_graph_V7 %>%
  slice(match(order_phylum, Phylum))

#Form (V7) - Phylum
Oxeze_V7 = dat_V7 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V7_RA = dat_V7_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V7_median = ddply(Oxeze_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance),
                                                            Quantile=quantile(x$Abundance)))

Oxeze_V7_median = Oxeze_V7_median [,-c(4,6,8)]
colnames (Oxeze_V7_median)[4] = "Q1"
colnames (Oxeze_V7_median)[5] = "Q3"

Oxeze_V7_median$RA_median_phylum = Oxeze_V7_median$RA_median_phylum *100
Oxeze_V7_median$IQR = Oxeze_V7_median$IQR *100
Oxeze_V7_median$Q1 = Oxeze_V7_median$Q1*100
Oxeze_V7_median$Q3 = Oxeze_V7_median$Q3*100

Oxeze_V7_median$Phylum = factor(Oxeze_V7_median$Phylum, levels = order_phylum)

Oxeze_graph_V7 =  Oxeze_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Oxeze_graph_V7 = merge (Oxeze_graph_V7, Oxeze_V7_median, by="Phylum")
Oxeze_graph_V7$Phylum = factor(Oxeze_graph_V7$Phylum , levels = order_phylum)
row.names(Oxeze_graph_V7) = NULL

Oxeze_graph_V7$Group = as.factor("Form")

Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Oxeze_graph_V7, is.numeric)
Oxeze_graph_V7 [is.num] = lapply(Oxeze_graph_V7 [is.num], round, 1)

Oxeze_graph_V7$Q1_Q3 = paste(Oxeze_graph_V7$Q1, Oxeze_graph_V7$Q3, sep="; ")
Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V7 (Randomization Arm)
Table_V7_Arm = cbind (Symb_graph_V7 [,c(2,3,4,5,6)], Adv_graph_V7 [,c(3,4,5,6)], Oxeze_graph_V7 [,c(3,4,5,6)])
colnames (Table_V7_Arm) = c("Phylum", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median",  
                            "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V7_Arm = Table_V7_Arm [-6, ] #Removing "Others" category

kable(Table_V7_Arm, align = "lcccccccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_Arm, align = "lcccccccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 4,"Flu + Salm" = 4, "Form" = 4)) %>%
  save_kable(file = "Output-taxa-V7/Phylum-V7-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Phylum 
RANK = 'Phylum'

dat_V7_RA_1 = dat_V7_RA %>%
  filter(Phylum!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Phylum', 'Abundance')

V7_arm_kw_phylum = dat_V7_RA_1 %>% 
  group_by(Phylum) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_arm_kw_phylum

V7_arm_kw_phylum = V7_arm_kw_phylum [c(1,5,4,2,3,6)]

V7_arm_kw_phylum = V7_arm_kw_phylum %>%
  slice(match(order_phylum, Phylum))

V7_arm_kw_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_arm_kw_phylum, file = "Output-taxa-V7/V7_arm_phylum.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

----------------------------------------------------------------------------Phylum-V7 (ICS Status)-----------------------------------------------------------------------------
#Creating a merged dataframe for plots according to ICS status
ICS_status_V7 = merge_samples(OTU_V7, "ICS")
ICS_status_V7 = prune_taxa(taxa_sums (ICS_status_V7) > 0, ICS_status_V7)
ICS_status_V7

glom_V7_ics = tax_glom(ICS_status_V7, taxrank = 'Phylum')
glom_V7_ics_RA = transform_sample_counts(glom_V7_ics, function(x){x / sum(x)})

dat_V7_ics = psmelt(glom_V7_ics)
dat_V7_ics_RA = psmelt(glom_V7_ics_RA)

dat_V7_ics = dat_V7_ics %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_ics)[1] = "Group"

dat_V7_ics_RA = dat_V7_ics_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_ics_RA)[1] = "Group"

dat_V7_ics[!dat_V7_ics$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V7_ics_RA[!dat_V7_ics_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

##Reordering factors for plots
dat_V7_ics_RA$Group = as.factor (dat_V7_ics_RA$Group)
dat_V7_ics_RA$Phylum = factor(dat_V7_ics_RA$Phylum, levels = order_phylum)

#Making merged plots - V7 (ICS status vs. Phylum)
xlabs = paste(levels(metadata_V7$ICS),"\n(N=",
              table(metadata_V7$ICS),")",sep="")

p = ggplot(dat_V7_ics_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-ics-phylum-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V7) - Phylum
ICS_V7 = dat_V7 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V7_RA = dat_V7_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V7_median = ddply(ICS_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                        IQR=IQR(x$Abundance),
                                                        Quantile=quantile(x$Abundance)))

ICS_V7_median = ICS_V7_median [,-c(4,6,8)]
colnames (ICS_V7_median)[4] = "Q1"
colnames (ICS_V7_median)[5] = "Q3"

ICS_V7_median$RA_median_phylum = ICS_V7_median$RA_median_phylum *100
ICS_V7_median$IQR = ICS_V7_median$IQR *100
ICS_V7_median$Q1 = ICS_V7_median$Q1*100
ICS_V7_median$Q3 = ICS_V7_median$Q3*100
ICS_V7_median$Phylum = factor(ICS_V7_median$Phylum, levels = order_phylum)

ICS_graph_V7 =  ICS_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

ICS_graph_V7 = ICS_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

ICS_graph_V7 = ICS_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

ICS_graph_V7 = merge (ICS_graph_V7, ICS_V7_median, by="Phylum")
ICS_graph_V7$Phylum = factor(ICS_graph_V7$Phylum, levels = order_phylum)
row.names(ICS_graph_V7) = NULL

ICS_graph_V7$Group = as.factor("ICS")

ICS_graph_V7 = ICS_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(ICS_graph_V7, is.numeric)
ICS_graph_V7 [is.num] = lapply(ICS_graph_V7 [is.num], round, 1)

ICS_graph_V7$Q1_Q3 = paste(ICS_graph_V7$Q1, ICS_graph_V7$Q3, sep="; ")
ICS_graph_V7 = ICS_graph_V7 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
ICS_graph_V7 = ICS_graph_V7 %>%
  slice(match(order_phylum, Phylum))

#Non-ICS (V7) - Phylum
Non_ICS_V7 = dat_V7 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V7_RA = dat_V7_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V7_median = ddply(Non_ICS_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                                IQR=IQR(x$Abundance),
                                                                Quantile=quantile(x$Abundance)))

Non_ICS_V7_median = Non_ICS_V7_median [,-c(4,6,8)]
colnames (Non_ICS_V7_median)[4] = "Q1"
colnames (Non_ICS_V7_median)[5] = "Q3"

Non_ICS_V7_median$RA_median_phylum = Non_ICS_V7_median$RA_median_phylum *100
Non_ICS_V7_median$IQR = Non_ICS_V7_median$IQR *100
Non_ICS_V7_median$Q1 = Non_ICS_V7_median$Q1*100
Non_ICS_V7_median$Q3 = Non_ICS_V7_median$Q3*100
Non_ICS_V7_median$Phylum = factor(Non_ICS_V7_median$Phylum, levels = order_phylum)

Non_ICS_graph_V7 =  Non_ICS_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Non_ICS_graph_V7 = merge (Non_ICS_graph_V7, Non_ICS_V7_median, by="Phylum")
Non_ICS_graph_V7$Phylum = factor(Non_ICS_graph_V7$Phylum, levels = order_phylum)
row.names(Non_ICS_graph_V7) = NULL

Non_ICS_graph_V7$Group = as.factor("Non-ICS")

Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1, Q3, IQR)

is.num = sapply(Non_ICS_graph_V7, is.numeric)
Non_ICS_graph_V7 [is.num] = lapply(Non_ICS_graph_V7 [is.num], round, 1)

Non_ICS_graph_V7$Q1_Q3 = paste(Non_ICS_graph_V7$Q1, Non_ICS_graph_V7$Q3, sep="; ")
Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  select (Group, Phylum, RA_mean_phylum, RA_median_phylum, Q1_Q3, IQR)
Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V7 (ICS status)
Table_V7_ICS = cbind (ICS_graph_V7 [,c(2,3,4,5,6)], Non_ICS_graph_V7 [,c(3,4,5,6)])
colnames (Table_V7_ICS) = c("Phylum", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V7_ICS  = Table_V7_ICS [-6, ] #Removing "Others" category

kable(Table_V7_ICS, align = "lcccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_ICS, align = "lcccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 4, "Non-ICS" = 4)) %>%
  save_kable(file = "Output-taxa-V7/Phylum-V7-table-ICS.html", self_contained = T)

#Comparing ICS status versus Phylum 
RANK = 'Phylum'

dat_V7_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_ics_wilcoxon_phylum

V7_ics_wilcoxon_phylum = V7_ics_wilcoxon_phylum [c(1,4,5,2,3,6)]

V7_ics_wilcoxon_phylum = V7_ics_wilcoxon_phylum %>%
  slice(match(order_phylum, Phylum))

V7_ics_wilcoxon_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_ics_wilcoxon_phylum, file = "Output-taxa-V7/V7_ics_phylum.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)

-------------------------------------------------------------------------Genus-V7 (Randomization Arm)--------------------------------------------------------------------------
#Creating csv file (phyloseq object: OTU_V7) 
OTU_taxa_genus_V7 =  OTU_V7 %>%
  tax_glom(taxrank = "Genus") %>%                       # agglomerate at genus level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Genus)

write.table(OTU_taxa_genus_V7, file = "Output-taxa-V7/V7-OTU_taxa_genus-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by genus (phyloseq object: OTU_V7) 
glom_g_V7 = tax_glom (OTU_V7, taxrank = 'Genus')
glom_g_V7_RA = transform_sample_counts(glom_g_V7, function(x){x / sum(x)})

dat_g_V7 = psmelt(glom_g_V7)
dat_g_V7_RA = psmelt(glom_g_V7_RA)

dat_g_V7  = dat_g_V7 [,-2]
dat_g_V7_RA = dat_g_V7_RA [,-2]

dat_g_V7 = dat_g_V7 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

dat_g_V7_RA = dat_g_V7_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V7) 
dat_g_V7[!dat_g_V7$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V7_RA[!dat_g_V7_RA$Genus %in% List_genus,]$Genus = 'Others'

ggplot(dat_g_V7_RA,
       aes(x=Genus,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with absolute counts and relative abundances with "Others" category (OTU_V7)
write.table(dat_V7, file = "Output-taxa-V7/V7-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V7_RA, file = "Output-taxa-V7/V7-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe according to genus with mean/median relative abundances and IQR (phyloseq object: OTU_V7) 
median_genus_V7 = ddply(dat_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance),
                                                           Quantile=quantile(x$Abundance)))
median_genus_V7 = median_genus_V7 [,-c(4,6,8)]
colnames (median_genus_V7)[4] = "Q1"
colnames (median_genus_V7)[5] = "Q3"

median_genus_V7$RA_median_genus = median_genus_V7$RA_median_genus *100
median_genus_V7$IQR = median_genus_V7$IQR *100
median_genus_V7$Q1 = median_genus_V7$Q1*100
median_genus_V7$Q3 = median_genus_V7$Q3*100
median_genus_V7  = median_genus_V7 %>% arrange(desc(RA_median_genus))

genus_graph_V7 = dat_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

genus_graph_V7 = genus_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

genus_graph_V7 = genus_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

genus_graph_V7 = merge (genus_graph_V7, median_genus_V7, by="Genus")
genus_graph_V7 = arrange(genus_graph_V7, desc(RA_mean_genus))
genus_graph_V7 = genus_graph_V7 %>%
  slice(2,3:16,1)
row.names(genus_graph_V7) = NULL
genus_graph_V7_export = genus_graph_V7 [,-c(3,4)]

is.num = sapply(genus_graph_V7_export, is.numeric)
genus_graph_V7_export [is.num] = lapply(genus_graph_V7_export [is.num], round, 1)

genus_graph_V7_export$Q1_Q3 = paste(genus_graph_V7_export$Q1, genus_graph_V7_export$Q3, sep="; ")
genus_graph_V7_export = genus_graph_V7_export %>%
  select (Genus, total_reads_genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
colnames (genus_graph_V7_export) = c("Genus", "Total_Reads", "Mean_Abundance", "Median_Abundance", "Q1; Q3", "IQR")

kable(genus_graph_V7_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T)

kable(genus_graph_V7_export, align = "lcccccc") %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V7/V7-All-samples-genus-merged-table.html", self_contained = T)

#Creating factors for plots
order_genus = factor(genus_graph_V7$Genus, levels = genus_graph_V7$Genus)
dat_g_V7_RA$Genus = as.factor(dat_g_V7_RA$Genus)
dat_g_V7_RA$Genus = factor(dat_g_V7_RA$Genus, levels = order_genus)

#Creating a merged dataframe for plots according to the Randomization Arm
glom_g_V7_arm = tax_glom (Arm_V7, taxrank = 'Genus')
glom_g_V7_arm_RA = transform_sample_counts(glom_g_V7_arm, function(x){x / sum(x)})

dat_g_V7_arm = psmelt (glom_g_V7_arm)
dat_g_V7_arm_RA = psmelt(glom_g_V7_arm_RA)

dat_g_V7_arm = dat_g_V7_arm %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_arm)[1] = "Group"

dat_g_V7_arm_RA = dat_g_V7_arm_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_arm_RA)[1] = "Group"

dat_g_V7_arm[!dat_g_V7_arm$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V7_arm_RA[!dat_g_V7_arm_RA$Genus %in% List_genus,]$Genus = 'Others'

#Reordering factors for plots
dat_g_V7_arm_RA$Group = as.factor (dat_g_V7_arm_RA$Group)
dat_g_V7_arm_RA$Genus = as.factor(dat_g_V7_arm_RA$Genus)
dat_g_V7_arm_RA$Genus = factor(dat_g_V7_arm_RA$Genus, levels = order_genus)

#Creating customized color palettes for genus analyses
cbPalette_genus <- c("#00BFC4", "#E7B800", "#FC4E07", "#0073C2FF", "#CBD588", "#999999",
                     "#C77CFF", "#5F7FC7", "#DA5724", "#508578", "darkred",
                     "#AD6F3B", "cornflowerblue","deeppink", "khaki", "black")

#Making merged plots - V7 (Randomization group vs. Genus)
xlabs = paste(levels(metadata_V7$Treatment_Arm),"\n(N=",
              table(metadata_V7$Treatment_Arm),")",sep="")

p = ggplot(dat_g_V7_arm_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-Arm-genus-3groups.png",
       width = 8.5, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V7) - Genus
Adv_g_V7 = dat_g_V7 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V7_RA = dat_g_V7_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V7_median = ddply(Adv_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance),
                                                           Quantile=quantile(x$Abundance)))

Adv_g_V7_median = Adv_g_V7_median [,-c(4,6,8)]
colnames (Adv_g_V7_median)[4] = "Q1"
colnames (Adv_g_V7_median)[5] = "Q3"

Adv_g_V7_median$RA_median_genus = Adv_g_V7_median$RA_median_genus *100
Adv_g_V7_median$IQR = Adv_g_V7_median$IQR *100
Adv_g_V7_median$Q1 = Adv_g_V7_median$Q1*100
Adv_g_V7_median$Q3 = Adv_g_V7_median$Q3*100

Adv_g_V7_median$Genus = factor(Adv_g_V7_median$Genus, levels = order_genus)

Adv_g_graph_V7 =  Adv_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Adv_g_graph_V7 = Adv_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Adv_g_graph_V7 = Adv_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Adv_g_graph_V7 = merge (Adv_g_graph_V7, Adv_g_V7_median, by="Genus")
Adv_g_graph_V7$Genus = factor(Adv_g_graph_V7$Genus , levels = order_genus)
row.names(Adv_g_graph_V7) = NULL

Adv_g_graph_V7$Group = as.factor("Flu + Salm")

Adv_g_graph_V7 = Adv_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Adv_g_graph_V7, is.numeric)
Adv_g_graph_V7 [is.num] = lapply(Adv_g_graph_V7 [is.num], round, 1)

Adv_g_graph_V7$Q1_Q3 = paste(Adv_g_graph_V7$Q1, Adv_g_graph_V7$Q3, sep="; ")
Adv_g_graph_V7 = Adv_g_graph_V7 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Adv_g_graph_V7 = Adv_g_graph_V7 %>%
  slice(match(order_genus, Genus))

#Bud + Form (V7) - Genus
Symb_g_V7 = dat_g_V7 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V7_RA = dat_g_V7_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V7_median = ddply(Symb_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                             IQR=IQR(x$Abundance),
                                                             Quantile=quantile(x$Abundance)))

Symb_g_V7_median = Symb_g_V7_median [,-c(4,6,8)]
colnames (Symb_g_V7_median)[4] = "Q1"
colnames (Symb_g_V7_median)[5] = "Q3"

Symb_g_V7_median$RA_median_genus = Symb_g_V7_median$RA_median_genus *100
Symb_g_V7_median$IQR = Symb_g_V7_median$IQR *100
Symb_g_V7_median$Q1 = Symb_g_V7_median$Q1*100
Symb_g_V7_median$Q3 = Symb_g_V7_median$Q3*100

Symb_g_V7_median$Genus = factor(Symb_g_V7_median$Genus, levels = order_genus)

Symb_g_graph_V7 =  Symb_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Symb_g_graph_V7 = Symb_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Symb_g_graph_V7 = Symb_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Symb_g_graph_V7 = merge (Symb_g_graph_V7, Symb_g_V7_median, by="Genus")
Symb_g_graph_V7$Genus = factor(Symb_g_graph_V7$Genus , levels = order_genus)
row.names(Symb_g_graph_V7) = NULL

Symb_g_graph_V7$Group = as.factor("Bud + Form")

Symb_g_graph_V7 = Symb_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Symb_g_graph_V7, is.numeric)
Symb_g_graph_V7 [is.num] = lapply(Symb_g_graph_V7 [is.num], round, 1)

Symb_g_graph_V7$Q1_Q3 = paste(Symb_g_graph_V7$Q1, Symb_g_graph_V7$Q3, sep="; ")
Symb_g_graph_V7 = Symb_g_graph_V7 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Symb_g_graph_V7 = Symb_g_graph_V7 %>%
  slice(match(order_genus, Genus))

#Form (V7) - Genus
Oxeze_g_V7 = dat_g_V7 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V7_RA = dat_g_V7_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V7_median = ddply(Oxeze_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                               IQR=IQR(x$Abundance),
                                                               Quantile=quantile(x$Abundance)))

Oxeze_g_V7_median = Oxeze_g_V7_median [,-c(4,6,8)]
colnames (Oxeze_g_V7_median)[4] = "Q1"
colnames (Oxeze_g_V7_median)[5] = "Q3"

Oxeze_g_V7_median$RA_median_genus = Oxeze_g_V7_median$RA_median_genus *100
Oxeze_g_V7_median$IQR = Oxeze_g_V7_median$IQR *100
Oxeze_g_V7_median$Q1 = Oxeze_g_V7_median$Q1*100
Oxeze_g_V7_median$Q3 = Oxeze_g_V7_median$Q3*100

Oxeze_g_V7_median$Genus = factor(Oxeze_g_V7_median$Genus, levels = order_genus)

Oxeze_g_graph_V7 =  Oxeze_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Oxeze_g_graph_V7 = Oxeze_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Oxeze_g_graph_V7 = Oxeze_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Oxeze_g_graph_V7 = merge (Oxeze_g_graph_V7, Oxeze_g_V7_median, by="Genus")
Oxeze_g_graph_V7$Genus = factor(Oxeze_g_graph_V7$Genus , levels = order_genus)
row.names(Oxeze_g_graph_V7) = NULL

Oxeze_g_graph_V7$Group = as.factor("Form")

Oxeze_g_graph_V7 = Oxeze_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Oxeze_g_graph_V7, is.numeric)
Oxeze_g_graph_V7 [is.num] = lapply(Oxeze_g_graph_V7 [is.num], round, 1)

Oxeze_g_graph_V7$Q1_Q3 = paste(Oxeze_g_graph_V7$Q1, Oxeze_g_graph_V7$Q3, sep="; ")
Oxeze_g_graph_V7 = Oxeze_g_graph_V7 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Oxeze_g_graph_V7 = Oxeze_g_graph_V7 %>%
  slice(match(order_genus, Genus))

#Table Genus - V7 (Randomization Arm)
Table_V7_g_Arm = cbind (Symb_g_graph_V7 [,c(2,3,4,5,6)], Adv_g_graph_V7 [,c(3,4,5,6)], Oxeze_g_graph_V7 [,c(3,4,5,6)])
colnames (Table_V7_g_Arm) = c("Genus", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median",  
                              "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V7_g_Arm  = Table_V7_g_Arm [-16, ] #Removing "Others" category

kable(Table_V7_g_Arm, align = "lcccccccccccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_g_Arm, align = "lcccccccccccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 4,"Flu + Salm" = 4, "Form" = 4)) %>%
  save_kable(file = "Output-taxa-V7/Genus-V7-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Genus 
RANK = 'Genus'

dat_g_V7_RA_1 = dat_g_V7_RA %>%
  filter(Genus!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Genus', 'Abundance')

V7_arm_kw_genus = dat_g_V7_RA_1 %>% 
  group_by(Genus) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_arm_kw_genus

V7_arm_kw_genus = V7_arm_kw_genus [c(1,5,4,2,3,6)]

V7_arm_kw_genus = V7_arm_kw_genus %>%
  slice(match(order_genus, Genus))

V7_arm_kw_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_arm_kw_genus, file = "Output-taxa-V7/V7_arm_genus.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

----------------------------------------------------------------------------Genus-V7 (ICS Status)------------------------------------------------------------------------------
#Creating a merged dataframe for plots according to ICS status
glom_g_V7_ics = tax_glom (ICS_status_V7, taxrank = 'Genus')
glom_g_V7_ics_RA = transform_sample_counts (glom_g_V7_ics, function(x){x / sum(x)})

dat_g_V7_ics = psmelt(glom_g_V7_ics)
dat_g_V7_ics_RA = psmelt(glom_g_V7_ics_RA)

dat_g_V7_ics = dat_g_V7_ics %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_ics)[1] = "Group"

dat_g_V7_ics_RA = dat_g_V7_ics_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_ics_RA)[1] = "Group"

dat_g_V7_ics[!dat_g_V7_ics$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V7_ics_RA[!dat_g_V7_ics_RA$Genus %in% List_genus,]$Genus = 'Others'

##Reordering factors for plots
dat_g_V7_ics_RA$Group = as.factor (dat_g_V7_ics_RA$Group)
dat_g_V7_ics_RA$Genus = factor(dat_g_V7_ics_RA$Genus, levels = order_genus)

#Making merged plots - V7 (ICS status vs. Genus)
xlabs = paste(levels(metadata_V7$ICS),"\n(N=",
              table(metadata_V7$ICS),")",sep="")

p = ggplot(dat_g_V7_ics_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-ics-genus-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V7) - Genus
ICS_g_V7 = dat_g_V7 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V7_RA = dat_g_V7_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V7_median = ddply(ICS_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance),
                                                           Quantile=quantile(x$Abundance)))

ICS_g_V7_median = ICS_g_V7_median [,-c(4,6,8)]
colnames (ICS_g_V7_median)[4] = "Q1"
colnames (ICS_g_V7_median)[5] = "Q3"

ICS_g_V7_median$RA_median_genus = ICS_g_V7_median$RA_median_genus *100
ICS_g_V7_median$IQR = ICS_g_V7_median$IQR *100
ICS_g_V7_median$Q1 = ICS_g_V7_median$Q1*100
ICS_g_V7_median$Q3 = ICS_g_V7_median$Q3*100
ICS_g_V7_median$Genus = factor(ICS_g_V7_median$Genus, levels = order_genus)

ICS_g_graph_V7 =  ICS_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

ICS_g_graph_V7 = merge (ICS_g_graph_V7, ICS_g_V7_median, by="Genus")
ICS_g_graph_V7$Genus = factor(ICS_g_graph_V7$Genus, levels = order_genus)
row.names(ICS_g_graph_V7) = NULL

ICS_g_graph_V7$Group = as.factor("ICS")

ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(ICS_g_graph_V7, is.numeric)
ICS_g_graph_V7 [is.num] = lapply(ICS_g_graph_V7 [is.num], round, 1)

ICS_g_graph_V7$Q1_Q3 = paste(ICS_g_graph_V7$Q1, ICS_g_graph_V7$Q3, sep="; ")
ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  slice(match(order_genus, Genus))

#Non-ICS (V7) - Genus
Non_ICS_g_V7 = dat_g_V7 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V7_RA = dat_g_V7_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V7_median = ddply(Non_ICS_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                                   IQR=IQR(x$Abundance),
                                                                   Quantile=quantile(x$Abundance)))

Non_ICS_g_V7_median = Non_ICS_g_V7_median [,-c(4,6,8)]
colnames (Non_ICS_g_V7_median)[4] = "Q1"
colnames (Non_ICS_g_V7_median)[5] = "Q3"

Non_ICS_g_V7_median$RA_median_genus = Non_ICS_g_V7_median$RA_median_genus *100
Non_ICS_g_V7_median$IQR = Non_ICS_g_V7_median$IQR *100
Non_ICS_g_V7_median$Q1 = Non_ICS_g_V7_median$Q1*100
Non_ICS_g_V7_median$Q3 = Non_ICS_g_V7_median$Q3*100
Non_ICS_g_V7_median$Genus = factor(Non_ICS_g_V7_median$Genus, levels = order_genus)

Non_ICS_g_graph_V7 =  Non_ICS_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Non_ICS_g_graph_V7 = merge (Non_ICS_g_graph_V7, Non_ICS_g_V7_median, by="Genus")
Non_ICS_g_graph_V7$Genus = factor(Non_ICS_g_graph_V7$Genus, levels = order_genus)
row.names(Non_ICS_g_graph_V7) = NULL

Non_ICS_g_graph_V7$Group = as.factor("Non-ICS")

Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, Q1, Q3, IQR)

is.num = sapply(Non_ICS_g_graph_V7, is.numeric)
Non_ICS_g_graph_V7 [is.num] = lapply(Non_ICS_g_graph_V7 [is.num], round, 1)

Non_ICS_g_graph_V7$Q1_Q3 = paste(Non_ICS_g_graph_V7$Q1, Non_ICS_g_graph_V7$Q3, sep="; ")
Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  select (Group, Genus, RA_mean_genus, RA_median_genus, Q1_Q3, IQR)
Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  slice(match(order_genus, Genus))

#Table Genus - V7 (ICS status)
Table_V7_g_ICS = cbind (ICS_g_graph_V7 [,c(2,3,4,5,6)], Non_ICS_g_graph_V7 [,c(3,4,5,6)])
colnames (Table_V7_g_ICS) = c("Genus", "Mean", "Median", "Q1; Q3", "IQR", "Mean", "Median", "Q1; Q3", "IQR")

Table_V7_g_ICS = Table_V7_g_ICS  [-16, ] #Removing "Others" category

kable(Table_V7_g_ICS, align = "lcccccccc") %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_g_ICS, align = "lcccccccc") %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 4, "Non-ICS" = 4)) %>%
  save_kable(file = "Output-taxa-V7/Genus-V7-table-ICS.html", self_contained = T)

#Comparing ICS status versus Genus 
RANK = 'Genus'

dat_g_V7_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_ics_wilcoxon_genus

V7_ics_wilcoxon_genus = V7_ics_wilcoxon_genus [c(1,4,5,2,3,6)]

V7_ics_wilcoxon_genus = V7_ics_wilcoxon_genus %>%
  slice(match(order_genus, Genus))

V7_ics_wilcoxon_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_ics_wilcoxon_genus, file = "Output-taxa-V7/V7_ics_genus.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)
