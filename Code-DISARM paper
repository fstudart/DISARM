Author: Dr. Fernando Sergio S. Leitao Filho
Center for Heart Lung Innovation – University of British Columbia
E-mail: Fernando.Studart@hli.ubc.ca

SEQUENCING DATA COMES FROM TWO BATCHES: 
BATCH 1: All samples collected at both time points were included in this batch, except for those related to Disarm participant 85 (who was randomized to the Formoterol arm). 
For this participant, his samples collected during the first bronchoscopy visit were also included in batch 1. 

Batch 2: Contains all samples collected at the second bronchocopy visit of the Disarm participant 85. 

Note: File "Attributes.tsv" available in folder DISARM/Files_used_analysis indicates which samples were originated from each batch.

QIIME2 VERSION USED IN THIS ANALSYS: 2020.2

PART I - BATCH 1

#IMPORTING DATA
#Place all fastq.gz files (both forward and reverse files from Batch 1) into the same folder; in this example: Fastq-R1.
#Note: All sequencing data are already demultiplexed.

qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path Fastq-R1 \
  --input-format CasavaOneEightSingleLanePerSampleDirFmt \
  --output-path Disarm-only-demux-paired-end1.qza
  
 qiime demux summarize \
  --i-data Disarm-only-demux-paired-end1.qza \
  --o-visualization Disarm-only-demux-paired-end1.qzv

#DENOISING TH SEQUENCING DATA
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs Disarm-only-demux-paired-end1.qza \
  --o-table Disarm-only-samples-dada2-run1.qza \
  --p-n-threads 0 \
  --o-representative-sequences Disarm-only-rep-seqs-run1.qza \
  --p-trim-left-f 12 \
  --p-trim-left-r 12 \
  --p-trunc-len-f 242 \
  --p-trunc-len-r 133 \
  --o-denoising-stats Disarm-only-samples-denoising-stats-run1.qza
 
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run1.qza \
  --o-visualization Disarm-only-samples-dada2-run1.qzv

qiime metadata tabulate \
  --m-input-file Disarm-only-samples-denoising-stats-run1.qza \
  --o-visualization Disarm-only-samples-denoising-stats-run1.qzv

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run1.qza \
  --o-visualization Disarm-only-rep-seqs-run1.qzv

#SEQUENCING QUALITY CONTROL (USING THE SILVA DATABASE V132 WITH 99% COVERAGE)
#File "Silva132-99-ref-seqs.qza" available at https://drive.google.com/file/d/1tXllQlQ5gSU21JYt6t8HHfup2Cz-1YRs/view?usp=sharing
qiime quality-control exclude-seqs \
  --i-query-sequences Disarm-only-rep-seqs-run1.qza \
  --i-reference-sequences Silva132-99-ref-seqs.qza \
  --p-method blast \
  --p-perc-identity 0.80 \
  --p-perc-query-aligned 0.80 \
  --o-sequence-hits hits-run1.qza \
  --o-sequence-misses misses-run1.qza

qiime feature-table tabulate-seqs \
  --i-data hits-run1.qza \
  --o-visualization hits-run1.qzv
  
qiime feature-table tabulate-seqs \
  --i-data misses-run1.qza \
  --o-visualization misses-run1.qzv

qiime feature-table filter-features \
  --i-table Disarm-only-samples-dada2-run1.qza \
  --m-metadata-file misses-run1.qza \
  --o-filtered-table Disarm-only-samples-dada2-run1-filtered.qza \
  --p-exclude-ids

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run1-filtered.qza \
  --o-visualization Disarm-only-samples-dada2-run1-filtered.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run1.qza \
--i-table Disarm-only-samples-dada2-run1-filtered.qza \
--o-filtered-data Disarm-only-rep-seqs-run1-filtered.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run1-filtered.qza \
  --o-visualization Disarm-only-rep-seqs-run1-filtered.qzv

#TAXONOMIC CLASSIFICATION (USING THE SILVA DATABASE V132 WITH 99% COVERAGE)
#File "Silva132-classifier-my-primers-majority-v-0.22.1.qza" available at https://drive.google.com/file/d/1w9ip_WVazOE55p1oGs-V9PdFg0WAi262/view?usp=sharing
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-classifier-my-primers-majority-v-0.22.1.qza \
  --i-reads Disarm-only-rep-seqs-run1-filtered.qza \
  --p-reads-per-batch 2000 \
  --p-n-jobs -2 \
  --o-classification Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
  --verbose

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
  --o-visualization Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qzv

qiime metadata tabulate \
--m-input-file Disarm-only-rep-seqs-run1-filtered.qza \
--m-input-file Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
--o-visualization Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy-tabulated.qzv

#File "Disarm_Library_Prep_full_simplified-R1.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-run1-filtered.qza \
  --i-taxonomy Disarm-only-rep-seqs-run1-filtered-SILVA132-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified-R1.txt \
  --o-visualization Disarm-only-taxa-bar-plots-run1-filtered-Silva132.qzv

#REMOVING ASVS IDENTIFIED AS POTENTIAL CONTAMINANTS ACCORDING TO THE DECONTAM R PACKAGE
#File "Decontam-frequency-Batch1.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table filter-features \
--i-table Disarm-only-samples-dada2-run1-filtered.qza \
--m-metadata-file Decontam-frequency-Batch1.txt \
--p-exclude-ids \
--o-filtered-table Disarm-only-samples-dada2-run1-filtered-after-decontam.qza

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run1-filtered-after-decontam.qza \
  --o-visualization Disarm-only-samples-dada2-run1-filtered-after-decontam.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run1-filtered.qza \
--i-table Disarm-only-samples-dada2-run1-filtered-after-decontam.qza \
--o-filtered-data Disarm-only-rep-seqs-run1-filtered-after-decontam.qza

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run1-filtered-after-decontam.qza \
  --o-visualization Disarm-only-rep-seqs-run1-filtered-after-decontam.qzv

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
PART II - BATCH 2

#IMPORTING DATA 
#Place all fastq.gz files (both forward and reverse files from Batch 2) into the same folder; in this example: Fastq-R2.
#Note: All sequencing data are already demultiplexed.

qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path Fastq-R2 \
  --input-format CasavaOneEightSingleLanePerSampleDirFmt \
  --output-path Disarm-only-demux-paired-end2.qza
  
 qiime demux summarize \
  --i-data Disarm-only-demux-paired-end2.qza \
  --o-visualization Disarm-only-demux-paired-end2.qzv

#DENOISING DATA (using the same trimming parameters as Batch 1)
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs Disarm-only-demux-paired-end2.qza \
  --o-table Disarm-only-samples-dada2-run2.qza \
  --p-n-threads 0 \
  --o-representative-sequences Disarm-only-rep-seqs-run2.qza \
  --p-trim-left-f 12 \
  --p-trim-left-r 12 \
  --p-trunc-len-f 242 \
  --p-trunc-len-r 133 \
  --o-denoising-stats Disarm-only-samples-denoising-stats-run2.qza
 
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run2.qza \
  --o-visualization Disarm-only-samples-dada2-run2.qzv

qiime metadata tabulate \
  --m-input-file Disarm-only-samples-denoising-stats-run2.qza \
  --o-visualization Disarm-only-samples-denoising-stats-run2.qzv

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run2.qza \
  --o-visualization Disarm-only-rep-seqs-run2.qzv

#SEQUENCING QUALITY CONTROL (USING THE SILVA DATABASE V132 WITH 99% COVERAGE)
#File "Silva132-99-ref-seqs.qza" available at https://drive.google.com/file/d/1tXllQlQ5gSU21JYt6t8HHfup2Cz-1YRs/view?usp=sharing
qiime quality-control exclude-seqs \
  --i-query-sequences Disarm-only-rep-seqs-run2.qza \
  --i-reference-sequences Silva132-99-ref-seqs.qza \
  --p-method blast \
  --p-perc-identity 0.80 \
  --p-perc-query-aligned 0.80 \
  --o-sequence-hits hits-run2.qza \
  --o-sequence-misses misses-run2.qza

qiime feature-table tabulate-seqs \
  --i-data hits-run2.qza \
  --o-visualization hits-run2.qzv
  
qiime feature-table tabulate-seqs \
  --i-data misses-run2.qza \
  --o-visualization misses-run2.qzv

qiime feature-table filter-features \
  --i-table Disarm-only-samples-dada2-run2.qza \
  --m-metadata-file misses-run2.qza \
  --o-filtered-table Disarm-only-samples-dada2-run2-filtered.qza \
  --p-exclude-ids

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run2-filtered.qza \
  --o-visualization Disarm-only-samples-dada2-run2-filtered.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run2.qza \
--i-table Disarm-only-samples-dada2-run2-filtered.qza \
--o-filtered-data Disarm-only-rep-seqs-run2-filtered.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-run2-filtered.qza \
  --o-visualization Disarm-only-rep-seqs-run2-filtered.qzv

#TAXONOMIC CLASSIFICATION
#File "Silva132-classifier-my-primers-majority-v-0.22.1.qza" available at https://drive.google.com/file/d/1w9ip_WVazOE55p1oGs-V9PdFg0WAi262/view?usp=sharing
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-classifier-my-primers-majority-v-0.22.1.qza \
  --i-reads Disarm-only-rep-seqs-run2-filtered.qza \
  --p-reads-per-batch 2000 \
  --p-n-jobs -2 \
  --o-classification Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
  --verbose

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
  --o-visualization Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qzv

qiime metadata tabulate \
--m-input-file Disarm-only-rep-seqs-run2-filtered.qza \
--m-input-file Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
--o-visualization Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy-tabulated.qzv

#File "Disarm_Library_Prep_full_simplified-R2.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-run2-filtered.qza \
  --i-taxonomy Disarm-only-rep-seqs-run2-filtered-SILVA132-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified-R2.txt \
  --o-visualization Disarm-only-taxa-bar-plots-run2-filtered-Silva132.qzv

#REMOVING ASVS IDENTIFIED AS POTENTIAL CONTAMINANTS ACCORDING TO THE DECONTAM R PACKAGE
#File "Decontam-frequency-Batch2.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table filter-features \
--i-table Disarm-only-samples-dada2-run2-filtered.qza \
--m-metadata-file Decontam-frequency-Batch2.txt \
--p-exclude-ids \
--o-filtered-table Disarm-only-samples-dada2-run2-filtered-after-decontam.qza

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-run2-filtered-after-decontam.qza \
  --o-visualization Disarm-only-samples-dada2-run2-filtered-after-decontam.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-run2-filtered.qza \
--i-table Disarm-only-samples-dada2-run2-filtered-after-decontam.qza \
--o-filtered-data Disarm-only-rep-seqs-run2-filtered-after-decontam.qza

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-run2-filtered-after-decontam.qza \
  --o-visualization Disarm-only-rep-seqs-run2-filtered-after-decontam.qzv

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
PART III - MERGING BATCHES 1 AND 2

qiime feature-table merge \
  --i-tables Run1/Disarm-only-samples-dada2-run1-filtered-after-decontam.qza \
  --i-tables Run2/Disarm-only-samples-dada2-run2-filtered-after-decontam.qza \
  --o-merged-table Disarm-only-samples-dada2-both-runs-after-decontam.qza

qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam.qza \
  --m-sample-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-samples-dada2-both-runs-after-decontam.qzv

qiime feature-table merge-seqs \
  --i-data Run1/Disarm-only-rep-seqs-run1-filtered-after-decontam.qza \
  --i-data Run2/Disarm-only-rep-seqs-run2-filtered-after-decontam.qza \
  --o-merged-data Disarm-only-rep-seqs-both-runs-after-decontam.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-both-runs-after-decontam.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam.qzv

#Removing singletons and low abundant taxa features
qiime feature-table filter-features \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam.qza \
  --p-min-samples 2 \
  --p-min-frequency 10 \
  --o-filtered-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
  --m-sample-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization RDisarm-only-samples-dada2-both-runs-after-decontam-contingency.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-both-runs-after-decontam.qza \
--i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
--o-filtered-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza

qiime feature-table tabulate-seqs \
  --i-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qzv

qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-classifier-my-primers-majority-v-0.22.1.qza \
  --i-reads Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
  --p-reads-per-batch 2000 \
  --o-classification Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --verbose

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qzv

qiime metadata tabulate \
--m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
--m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
--o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy-tabulated.qzv

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
  --i-taxonomy Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-taxa-bar-plots-both-runs-after-decontam-contigency-Silva132.qzv

#Removing other known contaminants (Mitochondria, Chloroplast, and Archaea) and only keeping ASVs with at least taxonomic annotations at the phylum level
qiime taxa filter-table \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency.qza \
  --i-taxonomy Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --p-include D_1__\
  --p-exclude mitochondria,chloroplast,archaea \
  --o-filtered-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime feature-table summarize \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
  --m-sample-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qzv

qiime feature-table filter-seqs \
--i-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency.qza \
--i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
--o-filtered-data Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qza

qiime metadata tabulate \
  --m-input-file Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qza \
  --o-visualization Disarm-only-rep-seqs-both-runs-after-decontam-contingency-phyla.qzv

#File "Disarm_Library_Prep_full_simplified_combined.txt" available in folder DISARM/Files_used_analysis/
qiime taxa barplot \
  --i-table Disarm-only-samples-dada2-both-runs-after-decontam-contingency-phyla.qza \
  --i-taxonomy Disarm-only-rep-seqs-both-runs-after-decontam-contingency-taxonomy.qza \
  --m-metadata-file Disarm_Library_Prep_full_simplified_combined.txt \
  --o-visualization Disarm-only-taxa-bar-plots-both-runs-after-decontam-contingency-phyla.qzv

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
PART III - TAXONOMIC ANALYSES

rm(list=ls())
library(phyloseq)
library(ggplot2)
library(cowplot)
library(stringr)
library(ape)
library(tidyr)
library(broom)
library(dplyr)
library(plyr)
library(reshape2)
library(doBy)
library(RVAideMemoire)
library(vegan)
library(phangorn)
library(RColorBrewer)
library(gplots)
library(kableExtra)
library(gridExtra)
library(knitr)
library(plotly)
library(ggpubr)
library(data.table)
library(survival)
library(forcats)

packageVersion('phyloseq')
packageVersion('vegan')

#Removing scientific notation
options(scipen = 999)

setwd("C:/Users/ferna/Desktop/R1-Disarm paper/Replication/Source_files")

#####################################################################################Source files#############################################################################
# Importing medatata
metadata = read.csv(file="Disarm_metadata-V3-V7.txt", header=T, sep='\t')

metadata = metadata[order(metadata$SampleID),]
rownames(metadata) = NULL

metadata$Treatment_Arm = as.factor(metadata$Treatment_Arm)

metadata$ICS = as.factor(metadata$ICS)

metadata$Visit = as.factor(metadata$Visit)

#Checking metadata
metadata %>%
  group_by(Treatment_Arm, Visit) %>%
  tally()

#One bronchial brushing (320067-V7-BC [collected at V7] from the Formoterol arm was discarded due to low number of reads) 

metadata %>%                       
  group_by(ICS, Visit) %>%
  tally()

#Importing OTU table, map and tree files
biom = import_biom("Disarm-table-with-taxonomy.biom")

map = import_qiime_sample_data("Disarm_metadata-V3-V7.txt")
rownames(map) = map$SampleID

tree = read.tree("Disarm-tree-mafft.nwk")
tree$tip.label = gsub("'", "", tree$tip.label, fixed = TRUE)
tree$tip.label = gsub('"', '', tree$tip.label, fixed = TRUE)

#Creating phyloseq object
OTU = merge_phyloseq(biom,map,tree)
OTU

#Changing taxonomic ranks (Phyloseq object: OTU)
colnames(tax_table(OTU))

colnames(tax_table(OTU)) = c("Kingdom", "Phylum", "Class", 
                              "Order", "Family", "Genus", "Species")

OTU

#Pre-Processing (Phyloseq object: OTU)
OTU = prune_taxa(taxa_sums (OTU) > 0, OTU)

OTU

# Histogram of sample read counts (Phyloseq object: OTU)
sample_sum_df = data.frame(sum = sample_sums(OTU))

ggplot(sample_sum_df, aes(x = sum)) + 
  geom_histogram(color = "black", fill = "indianred", binwidth = 500) +
  ggtitle("Distribution of sample sequencing depth") + 
  xlab("Read counts") +
  theme(axis.title.y = element_blank())

smin = min(sample_sums(OTU))
smean = mean(sample_sums(OTU))
smax = max(sample_sums(OTU))

smin
smean
smax

#Cleaning SILVA132 strings in taxonomy (Phyloseq object: OTU)
tax.clean = data.frame(tax_table(OTU))
tax.clean$Kingdom = str_replace(tax.clean$Kingdom, "D_0__","")
tax.clean$Phylum = str_replace(tax.clean$Phylum, "D_1__","")
tax.clean$Class = str_replace(tax.clean$Class, "D_2__","")
tax.clean$Order = str_replace(tax.clean$Order, "D_3__","")
tax.clean$Family = str_replace(tax.clean$Family, "D_4__","")
tax.clean$Genus = str_replace(tax.clean$Genus, "D_5__","")
tax.clean$Species = str_replace(tax.clean$Species, "D_6__","")
tax_table(OTU) = as.matrix(tax.clean)

#Exporting tax table with formatted NA genus taxonomic assignments
tax.clean = data.frame(tax_table(OTU))

#Changing all columns to characters 
for (i in 1:7){ tax.clean[,i] = as.character(tax.clean[,i])}

#Changing NA to empty strings
tax.clean[is.na(tax.clean)] = ""

#Fill missing taxonomy fields
for (i in 1:nrow(tax.clean)){
  if (tax.clean[i,2] == ""){
    kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
    tax.clean[i, 2:7] <- kingdom
  } else if (tax.clean[i,3] == ""){
    phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
    tax.clean[i, 3:7] <- phylum
  } else if (tax.clean[i,4] == ""){
    class <- paste("Class_", tax.clean[i,3], sep = "")
    tax.clean[i, 4:7] <- class
  } else if (tax.clean[i,5] == ""){
    order <- paste("Order_", tax.clean[i,4], sep = "")
    tax.clean[i, 5:7] <- order
  } else if (tax.clean[i,6] == ""){
    family <- paste("Genus_unknown_Family_", tax.clean[i,5], sep = "")
    tax.clean[i, 6:7] <- family
  } else if (tax.clean[i,7] == ""){
    tax.clean$Species[i] <- paste("Species_unknown_Genus_",tax.clean$Genus[i], sep = "")
  }
}

#Returning tax dataframe to phyloseq object (OTU)
tax_table(OTU) = as.matrix(tax.clean)

#Checking Phyloseq object
head(sample_names(OTU))
sample_variables(OTU)
get_taxa_unique(OTU, "Phylum")
get_taxa_unique(OTU, "Genus")

#Transform to relative abundances (Phyloseq object: OTU)
OTU_RA = transform_sample_counts(OTU, function(x) x / sum(x))

############################################################################################################################################################################
##########################################Phylum analysis (Bronchoscopy samples from both visits - V3 and V7)###############################################################
#Phylum analysis
#Creating csv file (phyloseq object: OTU)
OTU_taxa_phyla =  OTU %>%
  tax_glom(taxrank = "Phylum") %>%                     # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  arrange(Phylum)

write.table(OTU_taxa_phyla, file = "Output-taxa-both-visits/V3-V7-OTU_taxa_phyla-raw.csv", 
            sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by phylum (phyloseq object: OTU) 
glom = tax_glom(OTU, taxrank = 'Phylum')
glom_RA = transform_sample_counts(glom, function(x){x / sum(x)})

dat = psmelt(glom)
dat_RA = psmelt(glom_RA)

#Calculating total number of reads per sample (phyloseq object: OTU) 
phylum_graph_overall_reads = dat %>%
  group_by(Sample) %>%
  summarise (total_reads_patient  = sum(Abundance))

phylum_graph_overall_reads = phylum_graph_overall_reads %>% arrange(desc(total_reads_patient))
row.names(phylum_graph_overall_reads) = NULL 

#Creating a merged dataframe according to phylum with mean and median relative abundances (phyloseq object: OTU) 
median_phylum_overall = ddply(dat_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance)))
median_phylum_overall$RA_median_phylum = median_phylum_overall$RA_median_phylum *100
median_phylum_overall  = median_phylum_overall %>% arrange(desc(RA_median_phylum))
median_phylum_top5_overall = median_phylum_overall [c(1:5),]

#Creating a factor for ordering phylum in descending order 
List_phylum = as.character(median_phylum_top5_overall$Phylum)

#############################################################Phylum-V3 (Randomization Arm)#################################################################################
OTU_V3 = subset_samples(OTU, Visit=="V3")
OTU_V3 = prune_taxa(taxa_sums (OTU_V3) > 0, OTU_V3)
OTU_V3

smin = min(sample_sums(OTU_V3))
smean = mean(sample_sums(OTU_V3))
smax = max(sample_sums(OTU_V3))

smin
smean
smax

#Creating csv file (phyloseq object: OTU_V3) 
OTU_taxa_phyla_V3 =  OTU_V3 %>%
  tax_glom(taxrank = "Phylum") %>%                      # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Phylum)

write.table(OTU_taxa_phyla_V3, file = "Output-taxa-V3/V3-OTU_taxa_phyla-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by phylum (phyloseq object: OTU_V3) 
glom_V3 = tax_glom(OTU_V3, taxrank = 'Phylum')
glom_V3_RA = transform_sample_counts(glom_V3, function(x){x / sum(x)})

dat_V3 = psmelt(glom_V3)
dat_V3_RA = psmelt(glom_V3_RA)

dat_V3  = dat_V3 [,-2]
dat_V3_RA = dat_V3_RA [,-2]

dat_V3 = dat_V3 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

dat_V3_RA = dat_V3_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V3) 
dat_V3[!dat_V3$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V3_RA[!dat_V3_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

ggplot(dat_V3_RA,
       aes(x=Phylum,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with "Others" category (OTU_V3)
write.table(dat_V3, file = "Output-taxa-V3/V3-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V3_RA, file = "Output-taxa-V3/V3-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe by phylum with mean/median relative abundances and IQR (phyloseq object: OTU_V3) 
median_phylum_V3 = ddply(dat_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance)))

median_phylum_V3$RA_median_phylum = median_phylum_V3$RA_median_phylum *100
median_phylum_V3$IQR = median_phylum_V3$IQR *100
median_phylum_V3  = median_phylum_V3 %>% arrange(desc(RA_median_phylum))

phylum_graph_V3 = dat_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

phylum_graph_V3 = phylum_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

phylum_graph_V3 = phylum_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

phylum_graph_V3 = merge (phylum_graph_V3, median_phylum_V3, by="Phylum")
phylum_graph_V3 = arrange(phylum_graph_V3, desc(RA_median_phylum))
row.names(phylum_graph_V3) = NULL

phylum_graph_V3_export = phylum_graph_V3 [,-c(3,4)]
colnames (phylum_graph_V3_export) = c("Phylum", "Total Reads", "RA-Mean", "RA-Median", "IQR")

is.num = sapply(phylum_graph_V3_export, is.numeric)
phylum_graph_V3_export [is.num] = lapply(phylum_graph_V3_export [is.num], round, 2)

kable(phylum_graph_V3_export) %>%
  kable_styling(fixed_thead = T)

kable(phylum_graph_V3_export) %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V3/V3-All-samples-phylum-merged-table.html", self_contained = T)

#Creating factors for plots
order_phylum = factor(phylum_graph_V3$Phylum, levels = phylum_graph_V3$Phylum)

dat_V3_RA$Phylum = as.factor(dat_V3_RA$Phylum)
dat_V3_RA$Phylum = factor(dat_V3_RA$Phylum, levels = order_phylum)

seq_group_arm = factor(dat_V3_RA$Treatment_Arm)
seq_group_ics = factor(dat_V3_RA$ICS)

#Creating a merged dataframe for plots according to the Randomization Arm
Arm_V3 = merge_samples(OTU_V3, "Treatment_Arm")
Arm_V3 = prune_taxa(taxa_sums (Arm_V3) > 0, Arm_V3)
Arm_V3

glom_V3_arm = tax_glom (Arm_V3, taxrank = 'Phylum')
glom_V3_arm_RA = transform_sample_counts (glom_V3_arm, function(x){x / sum(x)})

dat_V3_arm = psmelt (glom_V3_arm)
dat_V3_arm_RA = psmelt (glom_V3_arm_RA)

dat_V3_arm = dat_V3_arm %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_arm)[1] = "Group"

dat_V3_arm_RA = dat_V3_arm_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_arm_RA)[1] = "Group"

dat_V3_arm[!dat_V3_arm$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V3_arm_RA[!dat_V3_arm_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

#Reordering factors for plots
dat_V3_arm_RA$Group = as.factor (dat_V3_arm_RA$Group)
dat_V3_arm_RA$Phylum = as.factor(dat_V3_arm_RA$Phylum)
dat_V3_arm_RA$Phylum = factor(dat_V3_arm_RA$Phylum, levels = order_phylum)

#Creating customized color palettes for phylum analyses
cbPalette_phylum = c("#00BFC4", "#E7B800", "#FC4E07", "#0073C2FF", "#CBD588", "black")  

#Making merged plots - V3 (Randomization group vs. Phylum)
metadata_V3 = metadata %>%
  filter(Visit == "V3") %>%
  droplevels()

xlabs = paste(levels(metadata_V3$Treatment_Arm),"\n(N=",
               table(metadata_V3$Treatment_Arm),")",sep="")

p = ggplot(dat_V3_arm_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-Arm-phylum-3groups.png",
       width = 8.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V3) - Phylum
Adv_V3 = dat_V3 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V3_RA = dat_V3_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V3_median = ddply(Adv_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance)))

Adv_V3_median$RA_median_phylum = Adv_V3_median$RA_median_phylum *100
Adv_V3_median$IQR = Adv_V3_median$IQR *100
Adv_V3_median$Phylum = factor(Adv_V3_median$Phylum, levels = order_phylum)
Adv_V3_median = Adv_V3_median[-6,]

Adv_graph_V3 =  Adv_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Adv_graph_V3 = Adv_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Adv_graph_V3 = Adv_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Adv_graph_V3 = merge (Adv_graph_V3, Adv_V3_median, by="Phylum")
Adv_graph_V3$Phylum = factor(Adv_graph_V3$Phylum , levels = order_phylum)
row.names(Adv_graph_V3) = NULL

Adv_graph_V3$Group = as.factor("Flu + Salm")

Adv_graph_V3 = Adv_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Adv_graph_V3 = Adv_graph_V3 %>%
  slice(match(order_phylum, Phylum))

#Bud + Form (V3) - Phylum
Symb_V3 = dat_V3 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V3_RA = dat_V3_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V3_median = ddply(Symb_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                           IQR=IQR(x$Abundance)))

Symb_V3_median$RA_median_phylum = Symb_V3_median$RA_median_phylum *100
Symb_V3_median$IQR = Symb_V3_median$IQR *100
Symb_V3_median$Phylum = factor(Symb_V3_median$Phylum, levels = order_phylum)
Symb_V3_median  =Symb_V3_median [-6,]

Symb_graph_V3 =  Symb_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Symb_graph_V3 = Symb_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Symb_graph_V3 = Symb_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Symb_graph_V3 = merge (Symb_graph_V3, Symb_V3_median, by="Phylum")
Symb_graph_V3$Phylum = factor(Symb_graph_V3$Phylum, levels = order_phylum)
row.names(Symb_graph_V3) = NULL

Symb_graph_V3$Group = as.factor("Flu + Salm")

Symb_graph_V3 = Symb_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Symb_graph_V3  = Symb_graph_V3  %>%
  slice(match(order_phylum, Phylum))

#Form (V3) - Phylum
Oxeze_V3 = dat_V3 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V3_RA = dat_V3_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V3_median = ddply(Oxeze_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                             IQR=IQR(x$Abundance)))

Oxeze_V3_median$RA_median_phylum = Oxeze_V3_median$RA_median_phylum *100
Oxeze_V3_median$IQR = Oxeze_V3_median$IQR *100
Oxeze_V3_median$Phylum = factor(Oxeze_V3_median$Phylum, levels = order_phylum)
Oxeze_V3_median = Oxeze_V3_median [-6,]

Oxeze_graph_V3 =  Oxeze_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Oxeze_graph_V3 = merge (Oxeze_graph_V3, Oxeze_V3_median, by="Phylum")
Oxeze_graph_V3$Phylum = factor(Oxeze_graph_V3$Phylum, levels = order_phylum)
row.names(Oxeze_graph_V3) = NULL

Oxeze_graph_V3$Group = as.factor("Form")

Oxeze_graph_V3 = Oxeze_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Oxeze_graph_V3  = Oxeze_graph_V3  %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V3 (Randomization Arm)
Table_V3_Arm = cbind (Symb_graph_V3 [,c(2,3,4,5)], Adv_graph_V3 [,c(3,4,5)], Oxeze_graph_V3 [,c(3,4,5)])
colnames (Table_V3_Arm) = c("Phylum", "Mean", "Median", "IQR", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V3_Arm, is.numeric)
Table_V3_Arm [is.num] = lapply(Table_V3_Arm [is.num], round, 2)

kable(Table_V3_Arm) %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_Arm) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 3,"Flu + Salm" = 3, "Form" = 3)) %>%
  save_kable(file = "Output-taxa-V3/Phylum-V3-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Phylum 
RANK = 'Phylum'

dat_V3_RA_1 = dat_V3_RA %>%
  filter(Phylum!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Phylum', 'Abundance')

V3_arm_kw_phylum = dat_V3_RA_1 %>% 
  group_by(Phylum) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_arm_kw_phylum

V3_arm_kw_phylum = V3_arm_kw_phylum [c(1,5,4,2,3,6)]

V3_arm_kw_phylum = V3_arm_kw_phylum %>%
  slice(match(order_phylum, Phylum))

V3_arm_kw_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_arm_kw_phylum, file = "Output-taxa-V3/V3_arm_phylum.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

########################################################################Phylum-V3 (ICS status)###############################################################################
#Creating a merged dataframe for plots according to ICS status
ICS_status_V3 = merge_samples(OTU_V3, "ICS")
ICS_status_V3 = prune_taxa(taxa_sums (ICS_status_V3) > 0, ICS_status_V3)
ICS_status_V3

glom_V3_ics = tax_glom(ICS_status_V3, taxrank = 'Phylum')
glom_V3_ics_RA = transform_sample_counts(glom_V3_ics, function(x){x / sum(x)})

dat_V3_ics = psmelt(glom_V3_ics)
dat_V3_ics_RA = psmelt(glom_V3_ics_RA)

dat_V3_ics = dat_V3_ics %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_ics)[1] = "Group"

dat_V3_ics_RA = dat_V3_ics_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V3_ics_RA)[1] = "Group"

dat_V3_ics[!dat_V3_ics$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V3_ics_RA[!dat_V3_ics_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

##Reordering factors for plots
dat_V3_ics_RA$Group = as.factor (dat_V3_ics_RA$Group)
dat_V3_ics_RA$Phylum = factor(dat_V3_ics_RA$Phylum, levels = order_phylum)

#Making merged plots - V3 (ICS status vs. Phylum)
xlabs = paste(levels(metadata_V3$ICS),"\n(N=",
               table(metadata_V3$ICS),")",sep="")

p = ggplot(dat_V3_ics_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-ics-phylum-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V3) - Phylum
ICS_V3 = dat_V3 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V3_RA = dat_V3_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V3_median = ddply(ICS_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                         IQR=IQR(x$Abundance)))

ICS_V3_median$RA_median_phylum = ICS_V3_median$RA_median_phylum *100
ICS_V3_median$IQR = ICS_V3_median$IQR *100
ICS_V3_median$Phylum = factor(ICS_V3_median$Phylum, levels = order_phylum)
ICS_V3_median = ICS_V3_median [-6,]

ICS_graph_V3 =  ICS_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

ICS_graph_V3 = ICS_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

ICS_graph_V3 = ICS_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

ICS_graph_V3 = merge (ICS_graph_V3, ICS_V3_median, by="Phylum")
ICS_graph_V3$Phylum = factor(ICS_graph_V3$Phylum, levels = order_phylum)
row.names(ICS_graph_V3) = NULL

ICS_graph_V3$Group = as.factor("ICS")

ICS_graph_V3 = ICS_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

ICS_graph_V3  = ICS_graph_V3  %>%
  slice(match(order_phylum, Phylum))

#Non-ICS (V3) - Phylum
Non_ICS_V3 = dat_V3 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V3_RA = dat_V3_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V3_median = ddply(Non_ICS_V3_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                                 IQR=IQR(x$Abundance)))

Non_ICS_V3_median$RA_median_phylum = Non_ICS_V3_median$RA_median_phylum *100
Non_ICS_V3_median$IQR = Non_ICS_V3_median$IQR *100
Non_ICS_V3_median$Phylum = factor(Non_ICS_V3_median$Phylum, levels = order_phylum)
Non_ICS_V3_median = Non_ICS_V3_median [-6,]

Non_ICS_graph_V3 =  Non_ICS_V3 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Non_ICS_graph_V3 = merge (Non_ICS_graph_V3, Non_ICS_V3_median, by="Phylum")
Non_ICS_graph_V3$Phylum = factor(Non_ICS_graph_V3$Phylum, levels = order_phylum)
row.names(Non_ICS_graph_V3) = NULL

Non_ICS_graph_V3$Group = as.factor("Non-ICS")

Non_ICS_graph_V3 = Non_ICS_graph_V3 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Non_ICS_graph_V3  = Non_ICS_graph_V3  %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V3 (ICS status)
Table_V3_ICS = cbind (ICS_graph_V3 [,c(2,3,4,5)], Non_ICS_graph_V3 [,c(3,4,5)])
colnames (Table_V3_ICS) = c("Phylum", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V3_ICS, is.numeric)
Table_V3_ICS [is.num] = lapply(Table_V3_ICS [is.num], round, 2)

kable(Table_V3_ICS) %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_ICS) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 3, "Non-ICS" = 3)) %>%
  save_kable(file = "Output-taxa-V3/Phylum-V3-table-ICS.html", self_contained = T)

#Comparing ICS status versus Phylum 
RANK = 'Phylum'

dat_V3_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_ics_wilcoxon_phylum

V3_ics_wilcoxon_phylum = V3_ics_wilcoxon_phylum [c(1,4,5,2,3,6)]

V3_ics_wilcoxon_phylum = V3_ics_wilcoxon_phylum %>%
  slice(match(order_phylum, Phylum))

V3_ics_wilcoxon_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_ics_wilcoxon_phylum, file = "Output-taxa-V3/V3_ics_phylum.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)

#############################################################################################################################################################################
#########################################Genus analysis (Bronchoscopy samples from both visits - V3 and V7)##################################################################
#Genus analysis
#Creating csv file (phyloseq object: OTU)
OTU_taxa_genus =  OTU %>%
  tax_glom(taxrank = "Genus") %>%                      # agglomerate at genus level
  transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
  psmelt() %>%                                         # Melt to long format
  arrange(Genus)

write.table(OTU_taxa_genus, file = "Output-taxa-both-visits/V3-V7-OTU_taxa_genus-raw.csv", 
            sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by genus (phyloseq object: OTU) 
glom_g = tax_glom (OTU, taxrank = 'Genus')
glom_g_RA = transform_sample_counts (glom_g, function(x){x / sum(x)})

dat_g = psmelt(glom_g)
dat_g_RA = psmelt(glom_g_RA)

#Calculating total number of reads per sample (phyloseq object: OTU) 
genus_graph_overall_reads = dat_g %>%
  group_by(Sample) %>%
  summarise (total_reads_patient  = sum(Abundance))

genus_graph_overall_reads = genus_graph_overall_reads %>% arrange(desc(total_reads_patient))
row.names(genus_graph_overall_reads) = NULL 

#Creating a merged dataframe by genus according to genus with mean and median relative abundances (phyloseq object: OTU) 
median_genus_overall = ddply(dat_g_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance)))
median_genus_overall$RA_median_genus = median_genus_overall$RA_median_genus *100
median_genus_overall  = median_genus_overall %>% arrange(desc(RA_median_genus))
median_genus_top15_overall = median_genus_overall [c(1:15),]

#Creating a factor for ordering genus in descending order 
List_genus = as.character(median_genus_top15_overall$Genus)

#############################################################Genus-V3 (Randomization Arm)#################################################################################
#Creating csv file (phyloseq object: OTU_V3) 
OTU_taxa_genus_V3 =  OTU_V3 %>%
  tax_glom(taxrank = "Genus") %>%                       # agglomerate at genus level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Genus)

write.table(OTU_taxa_genus_V3, file = "Output-taxa-V3/V3-OTU_taxa_genus-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by genus (phyloseq object: OTU_V3) 
glom_g_V3 = tax_glom (OTU_V3, taxrank = 'Genus')
glom_g_V3_RA = transform_sample_counts(glom_g_V3, function(x){x / sum(x)})

dat_g_V3 = psmelt(glom_g_V3)
dat_g_V3_RA = psmelt(glom_g_V3_RA)

dat_g_V3  = dat_g_V3 [,-2]
dat_g_V3_RA = dat_g_V3_RA [,-2]

dat_g_V3 = dat_g_V3 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

dat_g_V3_RA = dat_g_V3_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V3) 
dat_g_V3[!dat_g_V3$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V3_RA[!dat_g_V3_RA$Genus %in% List_genus,]$Genus = 'Others'

ggplot(dat_g_V3_RA,
       aes(x=Genus,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with absolute counts and relative abundances with "Others" category (OTU_V3)
write.table(dat_V3, file = "Output-taxa-V3/V3-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V3_RA, file = "Output-taxa-V3/V3-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe according to genus with mean/median relative abundances and IQR (phyloseq object: OTU_V3) 
median_genus_V3 = ddply(dat_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance)))

median_genus_V3$RA_median_genus = median_genus_V3$RA_median_genus *100
median_genus_V3$IQR = median_genus_V3$IQR *100
median_genus_V3  = median_genus_V3 %>% arrange(desc(RA_median_genus))

genus_graph_V3 = dat_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

genus_graph_V3 = genus_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

genus_graph_V3 = genus_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

genus_graph_V3 = merge (genus_graph_V3, median_genus_V3, by="Genus")
genus_graph_V3 = arrange(genus_graph_V3, desc(RA_mean_genus))
genus_graph_V3 = genus_graph_V3 %>%
  slice(2,3:16,1)
row.names(genus_graph_V3) = NULL

genus_graph_V3_export = genus_graph_V3 [,-c(3,4)]
colnames (genus_graph_V3_export) = c("Genus", "Total Reads", "RA-Mean", "RA-Median", "IQR")

is.num = sapply(genus_graph_V3_export, is.numeric)
genus_graph_V3_export [is.num] = lapply(genus_graph_V3_export [is.num], round, 2)

kable(genus_graph_V3_export) %>%
  kable_styling(fixed_thead = T)

kable(genus_graph_V3_export) %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V3/V3-All-samples-genus-merged-table.html", self_contained = T)

#Creating factors for plots
order_genus = factor(genus_graph_V3$Genus, levels = genus_graph_V3$Genus)
dat_g_V3_RA$Genus = as.factor(dat_g_V3_RA$Genus)
dat_g_V3_RA$Genus = factor(dat_g_V3_RA$Genus, levels = order_genus)

#Creating a merged dataframe for plots according to the Randomization Arm
glom_g_V3_arm = tax_glom (Arm_V3, taxrank = 'Genus')
glom_g_V3_arm_RA = transform_sample_counts(glom_g_V3_arm, function(x){x / sum(x)})

dat_g_V3_arm = psmelt (glom_g_V3_arm)
dat_g_V3_arm_RA = psmelt(glom_g_V3_arm_RA)

dat_g_V3_arm = dat_g_V3_arm %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_arm)[1] = "Group"

dat_g_V3_arm_RA = dat_g_V3_arm_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_arm_RA)[1] = "Group"

dat_g_V3_arm[!dat_g_V3_arm$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V3_arm_RA[!dat_g_V3_arm_RA$Genus %in% List_genus,]$Genus = 'Others'

#Reordering factors for plots
dat_g_V3_arm_RA$Group = as.factor (dat_g_V3_arm_RA$Group)
dat_g_V3_arm_RA$Genus = as.factor(dat_g_V3_arm_RA$Genus)
dat_g_V3_arm_RA$Genus = factor(dat_g_V3_arm_RA$Genus, levels = order_genus)

#Creating customized color palettes for genus analyses
cbPalette_genus <- c("#00BFC4", "#E7B800", "#FC4E07", "#0073C2FF", "#CBD588", "#999999",
                 "#C77CFF", "#5F7FC7", "#DA5724", "#508578", "darkred",
                 "#AD6F3B", "cornflowerblue","deeppink", "khaki", "black")

#Making merged plots - V3 (Randomization group vs. Genus)
xlabs = paste(levels(metadata_V3$Treatment_Arm),"\n(N=",
              table(metadata_V3$Treatment_Arm),")",sep="")

p = ggplot(dat_g_V3_arm_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-Arm-genus-3groups.png",
       width = 8.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V3) - Genus
Adv_g_V3 = dat_g_V3 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V3_RA = dat_g_V3_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V3_median = ddply(Adv_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                        IQR=IQR(x$Abundance)))

Adv_g_V3_median$RA_median_genus = Adv_g_V3_median$RA_median_genus *100
Adv_g_V3_median$IQR = Adv_g_V3_median$IQR *100
Adv_g_V3_median$Genus = factor(Adv_g_V3_median$Genus, levels = order_genus)
Adv_g_V3_median = Adv_g_V3_median[-6,]

Adv_graph_g_V3 =  Adv_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Adv_graph_g_V3 = Adv_graph_g_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Adv_graph_g_V3 = Adv_graph_g_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Adv_graph_g_V3 = merge (Adv_graph_g_V3, Adv_g_V3_median, by="Genus")
Adv_graph_g_V3$Genus = factor(Adv_graph_g_V3$Genus , levels = order_genus)
row.names(Adv_graph_g_V3) = NULL

Adv_graph_g_V3$Group = as.factor("Flu + Salm")

Adv_graph_g_V3 = Adv_graph_g_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Adv_graph_g_V3 = Adv_graph_g_V3 %>%
  slice(match(order_genus, Genus))

#Bud + Form (V3) - Genus
Symb_g_V3 = dat_g_V3 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V3_RA = dat_g_V3_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V3_median = ddply(Symb_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                             IQR=IQR(x$Abundance)))

Symb_g_V3_median$RA_median_genus = Symb_g_V3_median$RA_median_genus *100
Symb_g_V3_median$IQR = Symb_g_V3_median$IQR *100
Symb_g_V3_median$Genus = factor(Symb_g_V3_median$Genus, levels = order_genus)
Symb_g_V3_median = Symb_g_V3_median[-6,]

Symb_graph_g_V3 =  Symb_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Symb_graph_g_V3 = Symb_graph_g_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Symb_graph_g_V3 = Symb_graph_g_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Symb_graph_g_V3 = merge (Symb_graph_g_V3, Symb_g_V3_median, by="Genus")
Symb_graph_g_V3$Genus = factor(Symb_graph_g_V3$Genus , levels = order_genus)
row.names(Symb_graph_g_V3) = NULL

Symb_graph_g_V3$Group = as.factor("Bud + Form")

Symb_graph_g_V3 = Symb_graph_g_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Symb_graph_g_V3 = Symb_graph_g_V3 %>%
  slice(match(order_genus, Genus))

#Form (V3) - Genus
Oxeze_g_V3 = dat_g_V3 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V3_RA = dat_g_V3_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V3_median = ddply(Oxeze_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                               IQR=IQR(x$Abundance)))

Oxeze_g_V3_median$RA_median_genus = Oxeze_g_V3_median$RA_median_genus *100
Oxeze_g_V3_median$IQR = Oxeze_g_V3_median$IQR *100
Oxeze_g_V3_median$Genus = factor(Oxeze_g_V3_median$Genus, levels = order_genus)
Oxeze_g_V3_median = Oxeze_g_V3_median[-6,]

Oxeze_graph_g_V3 =  Oxeze_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Oxeze_graph_g_V3 = Oxeze_graph_g_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Oxeze_graph_g_V3 = Oxeze_graph_g_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Oxeze_graph_g_V3 = merge (Oxeze_graph_g_V3, Oxeze_g_V3_median, by="Genus")
Oxeze_graph_g_V3$Genus = factor(Oxeze_graph_g_V3$Genus , levels = order_genus)
row.names(Oxeze_graph_g_V3) = NULL

Oxeze_graph_g_V3$Group = as.factor("Form")

Oxeze_graph_g_V3 = Oxeze_graph_g_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Oxeze_graph_g_V3 = Oxeze_graph_g_V3 %>%
  slice(match(order_genus, Genus))

#Table Genus - V3 (Randomization Arm)
Table_V3_g_Arm = cbind (Symb_graph_g_V3 [,c(2,3,4,5)], Adv_graph_g_V3 [,c(3,4,5)], Oxeze_graph_g_V3 [,c(3,4,5)])
colnames (Table_V3_g_Arm) = c("Genus", "Mean", "Median", "IQR", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V3_g_Arm, is.numeric)
Table_V3_g_Arm [is.num] = lapply(Table_V3_g_Arm [is.num], round, 2)

kable(Table_V3_g_Arm) %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_g_Arm) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 3,"Flu + Salm" = 3, "Form" = 3)) %>%
  save_kable(file = "Output-taxa-V3/Genus-V3-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Genus 
RANK = 'Genus'

dat_g_V3_RA_1 = dat_g_V3_RA %>%
  filter(Genus!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Genus', 'Abundance')

V3_arm_kw_genus = dat_g_V3_RA_1 %>% 
  group_by(Genus) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_arm_kw_genus

V3_arm_kw_genus = V3_arm_kw_genus [c(1,5,4,2,3,6)]

V3_arm_kw_genus = V3_arm_kw_genus %>%
  slice(match(order_genus, Genus))

V3_arm_kw_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_arm_kw_genus, file = "Output-taxa-V3/V3_arm_genus.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

########################################################################Genus-V3 (ICS status)###############################################################################
#Creating a merged dataframe for plots according to ICS status
glom_g_V3_ics = tax_glom (ICS_status_V3, taxrank = 'Genus')
glom_g_V3_ics_RA = transform_sample_counts (glom_g_V3_ics, function(x){x / sum(x)})

dat_g_V3_ics = psmelt(glom_g_V3_ics)
dat_g_V3_ics_RA = psmelt(glom_g_V3_ics_RA)

dat_g_V3_ics = dat_g_V3_ics %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_ics)[1] = "Group"

dat_g_V3_ics_RA = dat_g_V3_ics_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V3_ics_RA)[1] = "Group"

dat_g_V3_ics[!dat_g_V3_ics$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V3_ics_RA[!dat_g_V3_ics_RA$Genus %in% List_genus,]$Genus = 'Others'

##Reordering factors for plots
dat_g_V3_ics_RA$Group = as.factor (dat_g_V3_ics_RA$Group)
dat_g_V3_ics_RA$Genus = factor(dat_g_V3_ics_RA$Genus, levels = order_genus)

#Making merged plots - V3 (ICS status vs. Genus)
xlabs = paste(levels(metadata_V3$ICS),"\n(N=",
              table(metadata_V3$ICS),")",sep="")

p = ggplot(dat_g_V3_ics_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V3/V3-ics-genus-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V3) - Genus
ICS_g_V3 = dat_g_V3 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V3_RA = dat_g_V3_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V3_median = ddply(ICS_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                        IQR=IQR(x$Abundance)))

ICS_g_V3_median$RA_median_genus = ICS_g_V3_median$RA_median_genus *100
ICS_g_V3_median$IQR = ICS_g_V3_median$IQR *100
ICS_g_V3_median$Genus = factor(ICS_g_V3_median$Genus, levels = order_genus)
ICS_g_V3_median = ICS_g_V3_median [-6,]

ICS_g_graph_V3 =  ICS_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

ICS_g_graph_V3 = merge (ICS_g_graph_V3, ICS_g_V3_median, by="Genus")
ICS_g_graph_V3$Genus = factor(ICS_g_graph_V3$Genus, levels = order_genus)
row.names(ICS_g_graph_V3) = NULL

ICS_g_graph_V3$Group = as.factor("ICS")

ICS_g_graph_V3 = ICS_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

ICS_g_graph_V3  = ICS_g_graph_V3  %>%
  slice(match(order_genus, Genus))

#Non-ICS (V3) - Genus
Non_ICS_g_V3 = dat_g_V3 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V3_RA = dat_g_V3_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V3_median = ddply(Non_ICS_g_V3_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                                   IQR=IQR(x$Abundance)))

Non_ICS_g_V3_median$RA_median_genus = Non_ICS_g_V3_median$RA_median_genus *100
Non_ICS_g_V3_median$IQR = Non_ICS_g_V3_median$IQR *100
Non_ICS_g_V3_median$Genus = factor(Non_ICS_g_V3_median$Genus, levels = order_genus)
Non_ICS_g_V3_median = Non_ICS_g_V3_median [-6,]

Non_ICS_g_graph_V3 =  Non_ICS_g_V3 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Non_ICS_g_graph_V3 = merge (Non_ICS_g_graph_V3, Non_ICS_g_V3_median, by="Genus")
Non_ICS_g_graph_V3$Genus = factor(Non_ICS_g_graph_V3$Genus, levels = order_genus)
row.names(Non_ICS_g_graph_V3) = NULL

Non_ICS_g_graph_V3$Group = as.factor("Non-ICS")

Non_ICS_g_graph_V3 = Non_ICS_g_graph_V3 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Non_ICS_g_graph_V3  = Non_ICS_g_graph_V3  %>%
  slice(match(order_genus, Genus))

#Table Genus - V3 (ICS status)
Table_V3_g_ICS = cbind (ICS_g_graph_V3 [,c(2,3,4,5)], Non_ICS_g_graph_V3 [,c(3,4,5)])
colnames (Table_V3_g_ICS) = c("Phylum", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V3_g_ICS, is.numeric)
Table_V3_g_ICS [is.num] = lapply(Table_V3_g_ICS [is.num], round, 2)

kable(Table_V3_g_ICS) %>%
  kable_styling(fixed_thead = T)

kable(Table_V3_g_ICS) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 3, "Non-ICS" = 3)) %>%
  save_kable(file = "Output-taxa-V3/Genus-V3-table-ICS.html", self_contained = T)

#Comparing ICS status versus Genus 
RANK = 'Genus'

dat_g_V3_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V3_ics_wilcoxon_genus

V3_ics_wilcoxon_genus = V3_ics_wilcoxon_genus [c(1,4,5,2,3,6)]

V3_ics_wilcoxon_genus = V3_ics_wilcoxon_genus %>%
  slice(match(order_genus, Genus))

V3_ics_wilcoxon_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V3_ics_wilcoxon_genus, file = "Output-taxa-V3/V3_ics_genus.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)

#############################################################Phylum-V7 (Randomization Arm)#################################################################################
OTU_V7 = subset_samples(OTU, Visit=="V7")
OTU_V7 = prune_taxa(taxa_sums (OTU_V7) > 0, OTU_V7)
OTU_V7

smin = min(sample_sums(OTU_V7))
smean = mean(sample_sums(OTU_V7))
smax = max(sample_sums(OTU_V7))

smin
smean
smax

#Creating csv file (phyloseq object: OTU_V7) 
OTU_taxa_phyla_V7 =  OTU_V7 %>%
  tax_glom(taxrank = "Phylum") %>%                      # agglomerate at phylum level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Phylum)

write.table(OTU_taxa_phyla_V7, file = "Output-taxa-V7/V7-OTU_taxa_phyla-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by phylum (phyloseq object: OTU_V7) 
glom_V7 = tax_glom(OTU_V7, taxrank = 'Phylum')
glom_V7_RA = transform_sample_counts(glom_V7, function(x){x / sum(x)})

dat_V7 = psmelt(glom_V7)
dat_V7_RA = psmelt(glom_V7_RA)

dat_V7  = dat_V7 [,-2]
dat_V7_RA = dat_V7_RA [,-2]

dat_V7 = dat_V7 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

dat_V7_RA = dat_V7_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Phylum, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V7) 
dat_V7[!dat_V7$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V7_RA[!dat_V7_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

ggplot(dat_V7_RA,
       aes(x=Phylum,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with "Others" category (OTU_V7)
write.table(dat_V7, file = "Output-taxa-V7/V7-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V7_RA, file = "Output-taxa-V7/V7-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe by phylum with mean/median relative abundances and IQR (phyloseq object: OTU_V7) 
median_phylum_V7 = ddply(dat_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                           IQR=IQR(x$Abundance)))

median_phylum_V7$RA_median_phylum = median_phylum_V7$RA_median_phylum *100
median_phylum_V7$IQR = median_phylum_V7$IQR *100
median_phylum_V7  = median_phylum_V7 %>% arrange(desc(RA_median_phylum))

phylum_graph_V7 = dat_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

phylum_graph_V7 = phylum_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

phylum_graph_V7 = phylum_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

phylum_graph_V7 = merge (phylum_graph_V7, median_phylum_V7, by="Phylum")
phylum_graph_V7 = arrange(phylum_graph_V7, desc(RA_median_phylum))
phylum_graph_V7 = phylum_graph_V7 %>%
  slice(1,2,4,3,5,6)
row.names(phylum_graph_V7) = NULL

phylum_graph_V7_export = phylum_graph_V7 [,-c(3,4)]
colnames (phylum_graph_V7_export) = c("Phylum", "Total Reads", "RA-Mean", "RA-Median", "IQR")

is.num = sapply(phylum_graph_V7_export, is.numeric)
phylum_graph_V7_export [is.num] = lapply(phylum_graph_V7_export [is.num], round, 2)

kable(phylum_graph_V7_export) %>%
  kable_styling(fixed_thead = T)

kable(phylum_graph_V7_export) %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V7/V7-All-samples-phylum-merged-table.html", self_contained = T)

#Creating factors for plots
dat_V7_RA$Phylum = as.factor(dat_V7_RA$Phylum)
dat_V7_RA$Phylum = factor(dat_V7_RA$Phylum, levels = order_phylum)

seq_group_arm = factor(dat_V7_RA$Treatment_Arm)
seq_group_ics = factor(dat_V7_RA$ICS)

#Creating a merged dataframe for plots according to the Randomization Arm
Arm_V7 = merge_samples(OTU_V7, "Treatment_Arm")
Arm_V7 = prune_taxa(taxa_sums (Arm_V7) > 0, Arm_V7)
Arm_V7

glom_V7_arm = tax_glom (Arm_V7, taxrank = 'Phylum')
glom_V7_arm_RA = transform_sample_counts (glom_V7_arm, function(x){x / sum(x)})

dat_V7_arm = psmelt (glom_V7_arm)
dat_V7_arm_RA = psmelt (glom_V7_arm_RA)

dat_V7_arm = dat_V7_arm %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_arm)[1] = "Group"

dat_V7_arm_RA = dat_V7_arm_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_arm_RA)[1] = "Group"

dat_V7_arm[!dat_V7_arm$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V7_arm_RA[!dat_V7_arm_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

#Reordering factors for plots
dat_V7_arm_RA$Group = as.factor (dat_V7_arm_RA$Group)
dat_V7_arm_RA$Phylum = as.factor(dat_V7_arm_RA$Phylum)
dat_V7_arm_RA$Phylum = factor(dat_V7_arm_RA$Phylum, levels = order_phylum)

#Making merged plots - V7 (Randomization group vs. Phylum)
metadata_V7 = metadata %>%
  filter(Visit == "V7") %>%
  droplevels()

xlabs = paste(levels(metadata_V7$Treatment_Arm),"\n(N=",
              table(metadata_V7$Treatment_Arm),")",sep="")

p = ggplot(dat_V7_arm_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-Arm-phylum-3groups.png",
       width = 8.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V7) - Phylum
Adv_V7 = dat_V7 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V7_RA = dat_V7_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_V7_median = ddply(Adv_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                        IQR=IQR(x$Abundance)))

Adv_V7_median$RA_median_phylum = Adv_V7_median$RA_median_phylum *100
Adv_V7_median$IQR = Adv_V7_median$IQR *100
Adv_V7_median$Phylum = factor(Adv_V7_median$Phylum, levels = order_phylum)
Adv_V7_median = Adv_V7_median[-6,]

Adv_graph_V7 =  Adv_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Adv_graph_V7 = Adv_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Adv_graph_V7 = Adv_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Adv_graph_V7 = merge (Adv_graph_V7, Adv_V7_median, by="Phylum")
Adv_graph_V7$Phylum = factor(Adv_graph_V7$Phylum , levels = order_phylum)
row.names(Adv_graph_V7) = NULL

Adv_graph_V7$Group = as.factor("Flu + Salm")

Adv_graph_V7 = Adv_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Adv_graph_V7 = Adv_graph_V7 %>%
  slice(match(order_phylum, Phylum))

#Bud + Form (V7) - Phylum
Symb_V7 = dat_V7 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V7_RA = dat_V7_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_V7_median = ddply(Symb_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                          IQR=IQR(x$Abundance)))

Symb_V7_median$RA_median_phylum = Symb_V7_median$RA_median_phylum *100
Symb_V7_median$IQR = Symb_V7_median$IQR *100
Symb_V7_median$Phylum = factor(Symb_V7_median$Phylum, levels = order_phylum)
Symb_V7_median  =Symb_V7_median [-6,]

Symb_graph_V7 =  Symb_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Symb_graph_V7 = Symb_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Symb_graph_V7 = Symb_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Symb_graph_V7 = merge (Symb_graph_V7, Symb_V7_median, by="Phylum")
Symb_graph_V7$Phylum = factor(Symb_graph_V7$Phylum, levels = order_phylum)
row.names(Symb_graph_V7) = NULL

Symb_graph_V7$Group = as.factor("Flu + Salm")

Symb_graph_V7 = Symb_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Symb_graph_V7  = Symb_graph_V7  %>%
  slice(match(order_phylum, Phylum))

#Form (V7) - Phylum
Oxeze_V7 = dat_V7 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V7_RA = dat_V7_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_V7_median = ddply(Oxeze_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                            IQR=IQR(x$Abundance)))

Oxeze_V7_median$RA_median_phylum = Oxeze_V7_median$RA_median_phylum *100
Oxeze_V7_median$IQR = Oxeze_V7_median$IQR *100
Oxeze_V7_median$Phylum = factor(Oxeze_V7_median$Phylum, levels = order_phylum)
Oxeze_V7_median = Oxeze_V7_median [-6,]

Oxeze_graph_V7 =  Oxeze_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Oxeze_graph_V7 = merge (Oxeze_graph_V7, Oxeze_V7_median, by="Phylum")
Oxeze_graph_V7$Phylum = factor(Oxeze_graph_V7$Phylum, levels = order_phylum)
row.names(Oxeze_graph_V7) = NULL

Oxeze_graph_V7$Group = as.factor("Form")

Oxeze_graph_V7 = Oxeze_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Oxeze_graph_V7  = Oxeze_graph_V7  %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V7 (Randomization Arm)
Table_V7_Arm = cbind (Symb_graph_V7 [,c(2,3,4,5)], Adv_graph_V7 [,c(3,4,5)], Oxeze_graph_V7 [,c(3,4,5)])
colnames (Table_V7_Arm) = c("Phylum", "Mean", "Median", "IQR", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V7_Arm, is.numeric)
Table_V7_Arm [is.num] = lapply(Table_V7_Arm [is.num], round, 2)

kable(Table_V7_Arm) %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_Arm) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 3,"Flu + Salm" = 3, "Form" = 3)) %>%
  save_kable(file = "Output-taxa-V7/Phylum-V7-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Phylum 
RANK = 'Phylum'

dat_V7_RA_1 = dat_V7_RA %>%
  filter(Phylum!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Phylum', 'Abundance')

V7_arm_kw_phylum = dat_V7_RA_1 %>% 
  group_by(Phylum) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_arm_kw_phylum

V7_arm_kw_phylum = V7_arm_kw_phylum [c(1,5,4,2,3,6)]

V7_arm_kw_phylum = V7_arm_kw_phylum %>%
  slice(match(order_phylum, Phylum))

V7_arm_kw_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_arm_kw_phylum, file = "Output-taxa-V7/V7_arm_phylum.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

########################################################################Phylum-V7 (ICS status)###############################################################################
#Creating a merged dataframe for plots according to ICS status
ICS_status_V7 = merge_samples(OTU_V7, "ICS")
ICS_status_V7 = prune_taxa(taxa_sums (ICS_status_V7) > 0, ICS_status_V7)
ICS_status_V7

glom_V7_ics = tax_glom(ICS_status_V7, taxrank = 'Phylum')
glom_V7_ics_RA = transform_sample_counts(glom_V7_ics, function(x){x / sum(x)})

dat_V7_ics = psmelt(glom_V7_ics)
dat_V7_ics_RA = psmelt(glom_V7_ics_RA)

dat_V7_ics = dat_V7_ics %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_ics)[1] = "Group"

dat_V7_ics_RA = dat_V7_ics_RA %>%
  select (Sample, OTU, Abundance, Phylum)

colnames (dat_V7_ics_RA)[1] = "Group"

dat_V7_ics[!dat_V7_ics$Phylum %in% List_phylum,]$Phylum = 'Others'
dat_V7_ics_RA[!dat_V7_ics_RA$Phylum %in% List_phylum,]$Phylum = 'Others'

##Reordering factors for plots
dat_V7_ics_RA$Group = as.factor (dat_V7_ics_RA$Group)
dat_V7_ics_RA$Phylum = factor(dat_V7_ics_RA$Phylum, levels = order_phylum)

#Making merged plots - V7 (ICS status vs. Phylum)
xlabs = paste(levels(metadata_V7$ICS),"\n(N=",
              table(metadata_V7$ICS),")",sep="")

p = ggplot(dat_V7_ics_RA, aes(fill=Phylum, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Phylum Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_phylum) +
  ylab("Relative Abundance\n")+
  labs(fill = "Phylum") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-ics-phylum-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V7) - Phylum
ICS_V7 = dat_V7 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V7_RA = dat_V7_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_V7_median = ddply(ICS_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                        IQR=IQR(x$Abundance)))

ICS_V7_median$RA_median_phylum = ICS_V7_median$RA_median_phylum *100
ICS_V7_median$IQR = ICS_V7_median$IQR *100
ICS_V7_median$Phylum = factor(ICS_V7_median$Phylum, levels = order_phylum)
ICS_V7_median = ICS_V7_median [-6,]

ICS_graph_V7 =  ICS_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

ICS_graph_V7 = ICS_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

ICS_graph_V7 = ICS_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

ICS_graph_V7 = merge (ICS_graph_V7, ICS_V7_median, by="Phylum")
ICS_graph_V7$Phylum = factor(ICS_graph_V7$Phylum, levels = order_phylum)
row.names(ICS_graph_V7) = NULL

ICS_graph_V7$Group = as.factor("ICS")

ICS_graph_V7 = ICS_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

ICS_graph_V7  = ICS_graph_V7  %>%
  slice(match(order_phylum, Phylum))

#Non-ICS (V7) - Phylum
Non_ICS_V7 = dat_V7 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V7_RA = dat_V7_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_V7_median = ddply(Non_ICS_V7_RA, ~Phylum, function(x) c(RA_median_phylum=median(x$Abundance),
                                                                IQR=IQR(x$Abundance)))

Non_ICS_V7_median$RA_median_phylum = Non_ICS_V7_median$RA_median_phylum *100
Non_ICS_V7_median$IQR = Non_ICS_V7_median$IQR *100
Non_ICS_V7_median$Phylum = factor(Non_ICS_V7_median$Phylum, levels = order_phylum)
Non_ICS_V7_median = Non_ICS_V7_median [-6,]

Non_ICS_graph_V7 =  Non_ICS_V7 %>%
  group_by(Phylum) %>%
  summarise (total_reads_phylum  = sum(Abundance),
             median_reads_phylum = median(Abundance))

Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_phylum))

Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  mutate (RA_mean_phylum = (total_reads_phylum/total_reads_overall)*100)

Non_ICS_graph_V7 = merge (Non_ICS_graph_V7, Non_ICS_V7_median, by="Phylum")
Non_ICS_graph_V7$Phylum = factor(Non_ICS_graph_V7$Phylum, levels = order_phylum)
row.names(Non_ICS_graph_V7) = NULL

Non_ICS_graph_V7$Group = as.factor("Non-ICS")

Non_ICS_graph_V7 = Non_ICS_graph_V7 %>%
  select(Group, Phylum, RA_mean_phylum, RA_median_phylum, IQR)

Non_ICS_graph_V7  = Non_ICS_graph_V7  %>%
  slice(match(order_phylum, Phylum))

#Table Phylum - V7 (ICS status)
Table_V7_ICS = cbind (ICS_graph_V7 [,c(2,3,4,5)], Non_ICS_graph_V7 [,c(3,4,5)])
colnames (Table_V7_ICS) = c("Phylum", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V7_ICS, is.numeric)
Table_V7_ICS [is.num] = lapply(Table_V7_ICS [is.num], round, 2)

kable(Table_V7_ICS) %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_ICS) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 3, "Non-ICS" = 3)) %>%
  save_kable(file = "Output-taxa-V7/Phylum-V7-table-ICS.html", self_contained = T)

#Comparing ICS status versus Phylum 
RANK = 'Phylum'

dat_V7_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_ics_wilcoxon_phylum

V7_ics_wilcoxon_phylum = V7_ics_wilcoxon_phylum [c(1,4,5,2,3,6)]

V7_ics_wilcoxon_phylum = V7_ics_wilcoxon_phylum %>%
  slice(match(order_phylum, Phylum))

V7_ics_wilcoxon_phylum %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_ics_wilcoxon_phylum, file = "Output-taxa-V7/V7_ics_phylum.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)

##################################################################Genus-V7 (Randomization Arm)#############################################################################
#Creating csv file (phyloseq object: OTU_V7) 
OTU_taxa_genus_V7 =  OTU_V7 %>%
  tax_glom(taxrank = "Genus") %>%                       # agglomerate at genus level
  transform_sample_counts(function(x) {x/sum(x)} ) %>%  # Transform to rel. abundance
  psmelt() %>%                                          # Melt to long format
  arrange(Genus)

write.table(OTU_taxa_genus_V7, file = "Output-taxa-V7/V7-OTU_taxa_genus-raw.csv", sep = ",", row.names = FALSE, qmethod = "double")

#Creating a merged dataframe by genus (phyloseq object: OTU_V7) 
glom_g_V7 = tax_glom (OTU_V7, taxrank = 'Genus')
glom_g_V7_RA = transform_sample_counts(glom_g_V7, function(x){x / sum(x)})

dat_g_V7 = psmelt(glom_g_V7)
dat_g_V7_RA = psmelt(glom_g_V7_RA)

dat_g_V7  = dat_g_V7 [,-2]
dat_g_V7_RA = dat_g_V7_RA [,-2]

dat_g_V7 = dat_g_V7 %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

dat_g_V7_RA = dat_g_V7_RA %>%
  select(SampleID, Unique_ID, OTU, Abundance, Genus, Treatment_Arm, ICS, everything())

#Changing low abundant taxa to "Others" (phyloseq object: OTU_V7) 
dat_g_V7[!dat_g_V7$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V7_RA[!dat_g_V7_RA$Genus %in% List_genus,]$Genus = 'Others'

ggplot(dat_g_V7_RA,
       aes(x=Genus,
           y=Abundance)) + geom_boxplot() + coord_flip()

#Exporting OTU tables with absolute counts and relative abundances with "Others" category (OTU_V7)
write.table(dat_V7, file = "Output-taxa-V7/V7-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")
write.table(dat_V7_RA, file = "Output-taxa-V7/V7-RA-OTU_taxa_phyla_others.csv", sep = ",", row.names = F, qmethod = "double")

#Creating a merged dataframe according to genus with mean/median relative abundances and IQR (phyloseq object: OTU_V7) 
median_genus_V7 = ddply(dat_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance)))

median_genus_V7$RA_median_genus = median_genus_V7$RA_median_genus *100
median_genus_V7$IQR = median_genus_V7$IQR *100
median_genus_V7  = median_genus_V7 %>% arrange(desc(RA_median_genus))

genus_graph_V7 = dat_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

genus_graph_V7 = genus_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

genus_graph_V7 = genus_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

genus_graph_V7 = merge (genus_graph_V7, median_genus_V7, by="Genus")
genus_graph_V7 = arrange(genus_graph_V7, desc(RA_median_genus))
genus_graph_V7 = genus_graph_V7 %>%
  slice(3,1,2,6,5,4,7,11,8,9,14,13,15,12,10,16)
row.names(genus_graph_V7) = NULL

genus_graph_V7_export = genus_graph_V7 [,-c(3,4)]
colnames (genus_graph_V7_export) = c("Genus", "Total Reads", "RA-Mean", "RA-Median", "IQR")

is.num = sapply(genus_graph_V7_export, is.numeric)
genus_graph_V7_export [is.num] = lapply(genus_graph_V7_export [is.num], round, 2)

kable(genus_graph_V7_export) %>%
  kable_styling(fixed_thead = T)

kable(genus_graph_V7_export) %>%
  kable_styling(fixed_thead = T) %>%
  save_kable(file = "Output-taxa-V7/V7-All-samples-genus-merged-table.html", self_contained = T)

#Creating factors for plots
dat_g_V7_RA$Genus = as.factor(dat_g_V7_RA$Genus)
dat_g_V7_RA$Genus = factor(dat_g_V7_RA$Genus, levels = order_genus)

#Creating a merged dataframe for plots according to the Randomization Arm
glom_g_V7_arm = tax_glom (Arm_V7, taxrank = 'Genus')
glom_g_V7_arm_RA = transform_sample_counts(glom_g_V7_arm, function(x){x / sum(x)})

dat_g_V7_arm = psmelt (glom_g_V7_arm)
dat_g_V7_arm_RA = psmelt(glom_g_V7_arm_RA)

dat_g_V7_arm = dat_g_V7_arm %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_arm)[1] = "Group"

dat_g_V7_arm_RA = dat_g_V7_arm_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_arm_RA)[1] = "Group"

dat_g_V7_arm[!dat_g_V7_arm$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V7_arm_RA[!dat_g_V7_arm_RA$Genus %in% List_genus,]$Genus = 'Others'

#Reordering factors for plots
dat_g_V7_arm_RA$Group = as.factor (dat_g_V7_arm_RA$Group)
dat_g_V7_arm_RA$Genus = as.factor(dat_g_V7_arm_RA$Genus)
dat_g_V7_arm_RA$Genus = factor(dat_g_V7_arm_RA$Genus, levels = order_genus)

#Making merged plots - V7 (Randomization group vs. Genus)
xlabs = paste(levels(metadata_V7$Treatment_Arm),"\n(N=",
              table(metadata_V7$Treatment_Arm),")",sep="")

p = ggplot(dat_g_V7_arm_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-Arm-genus-3groups.png",
       width = 8.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to the Randomization Arm
#Flu + Salm (V7) - Genus
Adv_g_V7 = dat_g_V7 %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V7_RA = dat_g_V7_RA %>%
  filter(Treatment_Arm == "Flu + Salm") %>%
  droplevels()

Adv_g_V7_median = ddply(Adv_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance)))

Adv_g_V7_median$RA_median_genus = Adv_g_V7_median$RA_median_genus *100
Adv_g_V7_median$IQR = Adv_g_V7_median$IQR *100
Adv_g_V7_median$Genus = factor(Adv_g_V7_median$Genus, levels = order_genus)
Adv_g_V7_median = Adv_g_V7_median[-6,]

Adv_graph_g_V7 =  Adv_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Adv_graph_g_V7 = Adv_graph_g_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Adv_graph_g_V7 = Adv_graph_g_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Adv_graph_g_V7 = merge (Adv_graph_g_V7, Adv_g_V7_median, by="Genus")
Adv_graph_g_V7$Genus = factor(Adv_graph_g_V7$Genus , levels = order_genus)
row.names(Adv_graph_g_V7) = NULL

Adv_graph_g_V7$Group = as.factor("Flu + Salm")

Adv_graph_g_V7 = Adv_graph_g_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Adv_graph_g_V7 = Adv_graph_g_V7 %>%
  slice(match(order_genus, Genus))

#Bud + Form (V7) - Genus
Symb_g_V7 = dat_g_V7 %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V7_RA = dat_g_V7_RA %>%
  filter(Treatment_Arm == "Bud + Form") %>%
  droplevels()

Symb_g_V7_median = ddply(Symb_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                             IQR=IQR(x$Abundance)))

Symb_g_V7_median$RA_median_genus = Symb_g_V7_median$RA_median_genus *100
Symb_g_V7_median$IQR = Symb_g_V7_median$IQR *100
Symb_g_V7_median$Genus = factor(Symb_g_V7_median$Genus, levels = order_genus)
Symb_g_V7_median = Symb_g_V7_median[-6,]

Symb_graph_g_V7 =  Symb_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Symb_graph_g_V7 = Symb_graph_g_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Symb_graph_g_V7 = Symb_graph_g_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Symb_graph_g_V7 = merge (Symb_graph_g_V7, Symb_g_V7_median, by="Genus")
Symb_graph_g_V7$Genus = factor(Symb_graph_g_V7$Genus , levels = order_genus)
row.names(Symb_graph_g_V7) = NULL

Symb_graph_g_V7$Group = as.factor("Bud + Form")

Symb_graph_g_V7 = Symb_graph_g_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Symb_graph_g_V7 = Symb_graph_g_V7 %>%
  slice(match(order_genus, Genus))

#Form (V7) - Genus
Oxeze_g_V7 = dat_g_V7 %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V7_RA = dat_g_V7_RA %>%
  filter(Treatment_Arm == "Form") %>%
  droplevels()

Oxeze_g_V7_median = ddply(Oxeze_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                               IQR=IQR(x$Abundance)))

Oxeze_g_V7_median$RA_median_genus = Oxeze_g_V7_median$RA_median_genus *100
Oxeze_g_V7_median$IQR = Oxeze_g_V7_median$IQR *100
Oxeze_g_V7_median$Genus = factor(Oxeze_g_V7_median$Genus, levels = order_genus)
Oxeze_g_V7_median = Oxeze_g_V7_median[-6,]

Oxeze_graph_g_V7 =  Oxeze_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Oxeze_graph_g_V7 = Oxeze_graph_g_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Oxeze_graph_g_V7 = Oxeze_graph_g_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Oxeze_graph_g_V7 = merge (Oxeze_graph_g_V7, Oxeze_g_V7_median, by="Genus")
Oxeze_graph_g_V7$Genus = factor(Oxeze_graph_g_V7$Genus , levels = order_genus)
row.names(Oxeze_graph_g_V7) = NULL

Oxeze_graph_g_V7$Group = as.factor("Form")

Oxeze_graph_g_V7 = Oxeze_graph_g_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Oxeze_graph_g_V7 = Oxeze_graph_g_V7 %>%
  slice(match(order_genus, Genus))

#Table Genus - V7 (Randomization Arm)
Table_V7_g_Arm = cbind (Symb_graph_g_V7 [,c(2,3,4,5)], Adv_graph_g_V7 [,c(3,4,5)], Oxeze_graph_g_V7 [,c(3,4,5)])
colnames (Table_V7_g_Arm) = c("Genus", "Mean", "Median", "IQR", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V7_g_Arm, is.numeric)
Table_V7_g_Arm [is.num] = lapply(Table_V7_g_Arm [is.num], round, 2)

kable(Table_V7_g_Arm) %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_g_Arm) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "Bud + Form" = 3,"Flu + Salm" = 3, "Form" = 3)) %>%
  save_kable(file = "Output-taxa-V7/Genus-V7-table-Arm.html", self_contained = T)

#Comparing Randomization Arm versus Genus 
RANK = 'Genus'

dat_g_V7_RA_1 = dat_g_V7_RA %>%
  filter(Genus!= "Others") %>%
  select ('SampleID', 'Treatment_Arm', 'ICS', 'Genus', 'Abundance')

V7_arm_kw_genus = dat_g_V7_RA_1 %>% 
  group_by(Genus) %>% 
  do(tidy(kruskal.test(x= .$Abundance, g = .$Treatment_Arm, exact))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_arm_kw_genus

V7_arm_kw_genus = V7_arm_kw_genus [c(1,5,4,2,3,6)]

V7_arm_kw_genus = V7_arm_kw_genus %>%
  slice(match(order_genus, Genus))

V7_arm_kw_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_arm_kw_genus, file = "Output-taxa-V7/V7_arm_genus.results.csv", sep = ",", qmethod = "double", row.names=FALSE)

########################################################################Genus-V7 (ICS status)###############################################################################
#Creating a merged dataframe for plots according to ICS status
glom_g_V7_ics = tax_glom (ICS_status_V7, taxrank = 'Genus')
glom_g_V7_ics_RA = transform_sample_counts (glom_g_V7_ics, function(x){x / sum(x)})

dat_g_V7_ics = psmelt(glom_g_V7_ics)
dat_g_V7_ics_RA = psmelt(glom_g_V7_ics_RA)

dat_g_V7_ics = dat_g_V7_ics %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_ics)[1] = "Group"

dat_g_V7_ics_RA = dat_g_V7_ics_RA %>%
  select (Sample, OTU, Abundance, Genus)

colnames (dat_g_V7_ics_RA)[1] = "Group"

dat_g_V7_ics[!dat_g_V7_ics$Genus %in% List_genus,]$Genus = 'Others'
dat_g_V7_ics_RA[!dat_g_V7_ics_RA$Genus %in% List_genus,]$Genus = 'Others'

##Reordering factors for plots
dat_g_V7_ics_RA$Group = as.factor (dat_g_V7_ics_RA$Group)
dat_g_V7_ics_RA$Genus = factor(dat_g_V7_ics_RA$Genus, levels = order_genus)

#Making merged plots - V7 (ICS status vs. Genus)
xlabs = paste(levels(metadata_V7$ICS),"\n(N=",
              table(metadata_V7$ICS),")",sep="")

p = ggplot(dat_g_V7_ics_RA, aes(fill=Genus, y=Abundance, x=Group, width=.85)) +
  geom_bar(stat="identity", position = position_fill(reverse = F)) + theme_bw() +
  theme(legend.text = element_text(colour="black", size = 8, face = "bold"))+
  theme(plot.title = element_text(lineheight=0.8, face="bold", size=14))+
  labs(title="Genus Level") +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(legend.title = element_blank()) +
  scale_fill_manual(values=cbPalette_genus) +
  ylab("Relative Abundance\n")+
  labs(fill = "Genus") +
  theme(legend.title = element_text(colour="black", size=12, face="bold")) +
  scale_y_continuous(expand = c(0,0)) +
  scale_x_discrete(labels=xlabs) +
  theme(axis.title.x = element_blank())+
  theme(legend.title = element_blank())+
  theme(axis.title.y = element_text(face="bold", size=16, vjust=1.5),
        axis.text.x  = element_text(face="bold", colour="black", size=14),
        axis.text.y  = element_text(face="bold", colour="black", size=14),
        legend.text=element_text(size=12)) 

p + theme(panel.background = element_blank(), 
          panel.grid = element_blank(),
          axis.ticks = element_blank(),
          panel.border = element_blank(),
          axis.line = element_line(), 
          plot.margin = unit(c(1,2,1,2), "cm"))

ggsave(filename = "Output-taxa-V7/V7-ics-genus-2groups.png",
       width = 7.0, height = 6.5, dpi = 300, units = "in", device='png')

#Creating subsets tables according to ICS status
#ICS (V7) - Genus
ICS_g_V7 = dat_g_V7 %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V7_RA = dat_g_V7_RA %>%
  filter(ICS == "ICS") %>%
  droplevels()

ICS_g_V7_median = ddply(ICS_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                           IQR=IQR(x$Abundance)))

ICS_g_V7_median$RA_median_genus = ICS_g_V7_median$RA_median_genus *100
ICS_g_V7_median$IQR = ICS_g_V7_median$IQR *100
ICS_g_V7_median$Genus = factor(ICS_g_V7_median$Genus, levels = order_genus)
ICS_g_V7_median = ICS_g_V7_median [-6,]

ICS_g_graph_V7 =  ICS_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

ICS_g_graph_V7 = merge (ICS_g_graph_V7, ICS_g_V7_median, by="Genus")
ICS_g_graph_V7$Genus = factor(ICS_g_graph_V7$Genus, levels = order_genus)
row.names(ICS_g_graph_V7) = NULL

ICS_g_graph_V7$Group = as.factor("ICS")

ICS_g_graph_V7 = ICS_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

ICS_g_graph_V7  = ICS_g_graph_V7  %>%
  slice(match(order_genus, Genus))

#Non-ICS (V7) - Genus
Non_ICS_g_V7 = dat_g_V7 %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V7_RA = dat_g_V7_RA %>%
  filter(ICS == "Non-ICS") %>%
  droplevels()

Non_ICS_g_V7_median = ddply(Non_ICS_g_V7_RA, ~Genus, function(x) c(RA_median_genus=median(x$Abundance),
                                                                   IQR=IQR(x$Abundance)))

Non_ICS_g_V7_median$RA_median_genus = Non_ICS_g_V7_median$RA_median_genus *100
Non_ICS_g_V7_median$IQR = Non_ICS_g_V7_median$IQR *100
Non_ICS_g_V7_median$Genus = factor(Non_ICS_g_V7_median$Genus, levels = order_genus)
Non_ICS_g_V7_median = Non_ICS_g_V7_median [-6,]

Non_ICS_g_graph_V7 =  Non_ICS_g_V7 %>%
  group_by(Genus) %>%
  summarise (total_reads_genus  = sum(Abundance),
             median_reads_genus = median(Abundance))

Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  mutate (total_reads_overall  = sum(total_reads_genus))

Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  mutate (RA_mean_genus = (total_reads_genus/total_reads_overall)*100)

Non_ICS_g_graph_V7 = merge (Non_ICS_g_graph_V7, Non_ICS_g_V7_median, by="Genus")
Non_ICS_g_graph_V7$Genus = factor(Non_ICS_g_graph_V7$Genus, levels = order_genus)
row.names(Non_ICS_g_graph_V7) = NULL

Non_ICS_g_graph_V7$Group = as.factor("Non-ICS")

Non_ICS_g_graph_V7 = Non_ICS_g_graph_V7 %>%
  select(Group, Genus, RA_mean_genus, RA_median_genus, IQR)

Non_ICS_g_graph_V7  = Non_ICS_g_graph_V7  %>%
  slice(match(order_genus, Genus))

#Table Genus - V7 (ICS status)
Table_V7_g_ICS = cbind (ICS_g_graph_V7 [,c(2,3,4,5)], Non_ICS_g_graph_V7 [,c(3,4,5)])
colnames (Table_V7_g_ICS) = c("Phylum", "Mean", "Median", "IQR", "Mean", "Median", "IQR")

is.num = sapply(Table_V7_g_ICS, is.numeric)
Table_V7_g_ICS [is.num] = lapply(Table_V7_g_ICS [is.num], round, 2)

kable(Table_V7_g_ICS) %>%
  kable_styling(fixed_thead = T)

kable(Table_V7_g_ICS) %>%
  kable_styling("striped") %>%
  add_header_above(c(" " = 1, "ICS" = 3, "Non-ICS" = 3)) %>%
  save_kable(file = "Output-taxa-V7/Genus-V7-table-ICS.html", self_contained = T)

#Comparing ICS status versus Genus 
RANK = 'Genus'

dat_g_V7_RA_1 %>%
  group_by_(RANK) %>%
  do(tidy(wilcox.test (Abundance ~ ICS, data=., exact=F))) %>%
  ungroup() %>%
  mutate(p.adjust=p.adjust(p.value, method = "fdr")) -> V7_ics_wilcoxon_genus

V7_ics_wilcoxon_genus = V7_ics_wilcoxon_genus [c(1,4,5,2,3,6)]

V7_ics_wilcoxon_genus = V7_ics_wilcoxon_genus %>%
  slice(match(order_genus, Genus))

V7_ics_wilcoxon_genus %>%
  #subset(p.value > 0.05) %>%
  knitr::kable(format = "markdown")

write.table(V7_ics_wilcoxon_genus, file = "Output-taxa-V7/V7_ics_genus.results.csv", sep = ",", 
            qmethod = "double", row.names=FALSE)



















qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path Sputum-112-Samples \
  --input-format CasavaOneEightSingleLanePerSampleDirFmt \
  --output-path Sputum.qza

#Obtaining summary of sequencing data from sputum samples after being imported into QIIME2®
qiime demux summarize \
  --i-data Sputum.qza \
  --o-visualization Sputum.qzv

#Performing sequence quality control and feature table construction using DADA2 denoising algorithm
#Note: the trimming options used below may be changed
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs Sputum.qza \
  --o-table Sputum-dada2.qza\
  --p-n-threads 0 \
  --o-representative-sequences Sputum-rep-seqs.qza \
  --p-trim-left-f 13 \
  --p-trim-left-r 13 \
  --p-trunc-len-f 241 \
  --p-trunc-len-r 175 \
  --o-denoising-stats Sputum-denoising-stats.qza

qiime feature-table summarize \
  --i-table Sputum-dada2.qza \
  --o-visualization Sputum-dada2.qzv

qiime feature-table tabulate-seqs \
  --i-data Sputum-rep-seqs.qza \
  --o-visualization Sputum-rep-seqs.qzv

qiime metadata tabulate \
  --m-input-file Sputum-denoising-stats.qza \
  --o-visualization Sputum-denoising-stats.qzv

#Extraction Negative Controls
#Place all fastq.gz files (both forward and reverse files from the seven extraction negative controls) into the same folder; 
 in this example: EN-7-Samples
#Note: All sequencing data already demultiplexed!
qiime tools import \
  --type 'SampleData[PairedEndSequencesWithQuality]' \
  --input-path EN-7-Samples \
  --input-format CasavaOneEightSingleLanePerSampleDirFmt \
  --output-path EN.qza

#Obtaining summary of sequencing data from extraction negative controls after being imported into QIIME2®
qiime demux summarize \
  --i-data EN.qza \
  --o-visualization EN.qzv

#Performing sequence quality control and feature table construction using DADA2 denoising algorithm
qiime dada2 denoise-paired \
  --i-demultiplexed-seqs EN.qza \
  --o-table EN-dada2.qza\
  --p-n-threads 0 \
  --o-representative-sequences EN-rep-seqs.qza \
  --p-trim-left-f 13 \
  --p-trim-left-r 13 \
  --p-trunc-len-f 241 \
  --p-trunc-len-r 175 \
  --o-denoising-stats EN-denoising-stats.qza

qiime feature-table summarize \
  --i-table EN-dada2.qza \
  --o-visualization EN-dada2.qzv

qiime feature-table tabulate-seqs \
  --i-data EN-rep-seqs.qza \
  --o-visualization EN-rep-seqs.qzv

qiime metadata tabulate \
  --m-input-file EN-denoising-stats.qza \
  --o-visualization EN-denoising-stats.qzv

#Selecting ASVs observed in at least 3 out of 7 extraction negative controls
qiime feature-table filter-features \
  --i-table EN-dada2.qza \
  --p-min-samples 3 \
  --o-filtered-table EN-data2-contingency-filtered-table.qza

qiime feature-table summarize \
  --i-table EN-data2-contingency-filtered-table.qza \
  --o-visualization EN-data2-contingency-filtered-table.qzv

#Visualize and export features (i.e., ASVs) observed in EN-data2-contingency-filtered-table.qza using Qiime2View 
#After exporting, save this new file as Sequences-at-least3-controls.tsv
#Keep only ASVs (EN-rep-seqs.qza) present in Sequences-at-least3-controls.tsv 
qiime feature-table filter-seqs \
--i-data EN-rep-seqs.qza \
--m-metadata-file Sequences-at-least3-controls.tsv \
--p-no-exclude-ids \
--o-filtered-data EN-rep-seqs-atleast3-controls.qza

qiime feature-table tabulate-seqs \
  --i-data EN-rep-seqs-atleast3-controls.qza \
  --o-visualization EN-rep-seqs-atleast3-controls.qzv

#Obtaining taxonomic annotations for ASVs present in EN-rep-seqs-atleast3-controls.qza
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-16s_99_7_levels_classifier250-myprimers.qza \
  --i-reads EN-rep-seqs-atleast3-controls.qza \
  --o-classification Taxonomy-EN-rep-seqs-atleast3-controls.qza

qiime metadata tabulate \
  --m-input-file Taxonomy-EN-rep-seqs-atleast3-controls.qza \
  --o-visualization Taxonomy-EN-rep-seqs-atleast3-controls.qzv

#Removing ASVs (Sputum-dada2.qza) observed in Sequences-at-least3-controls.tsv
qiime feature-table filter-features \
  --i-table Sputum-dada2.qza \
  --m-metadata-file Sequences-at-least3-controls.tsv \
  --p-exclude-ids \
  --o-filtered-table Filtered-Sputum-dada2.qza

qiime feature-table summarize \
  --i-table Filtered-Sputum-dada2.qza \
  --o-visualization Filtered-Sputum-dada2.qzv

#Removing noise (excluding singletons and low abundant features – frequency < 10 across all samples)
qiime feature-table filter-features \
  --i-table Filtered-Sputum-dada2.qza \
  --p-min-samples 2 \
  --p-min-frequency 10 \
  --o-filtered-table Filtered-Sputum-table-contingency-table.qza

qiime feature-table summarize \
  --i-table Filtered-Sputum-table-contingency-table.qza \
  --o-visualization Filtered-Sputum-table-contingency-table.qzv

#Visualize and export features (i.e., ASVs) observed in Filtered-Sputum-table-contingency-table.qza using Qiime2View
#After exporting, save this new file as "Seqs-to-keep-after-controls-at-least3-and-removal-low-abundant-features.tsv"
#Keep only ASVs (Sputum-rep-seqs.qza) observed in Seqs-to-keep-after-controls-at-least3-and-removal-low-abundant-features.tsv 

qiime feature-table filter-seqs \
--i-data Sputum-rep-seqs.qza \
--m-metadata-file Seqs-to-keep-after-controls-at-least3-and-removal-low-abundant-features.tsv \
--p-no-exclude-ids \
--o-filtered-data Filtered-Sputum-rep-seqs.qza

qiime feature-table tabulate-seqs \
  --i-data Filtered-Sputum-rep-seqs.qza \
  --o-visualization Filtered-Sputum-rep-seqs.qzv

#Performing taxonomic analysis (to identify ASVs with no taxonomic annotations at the phylum level)
#Taxonomic database: Silva 132
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-16s_99_7_levels_classifier250-myprimers.qza \
  --i-reads Filtered-Sputum-rep-seqs.qza \
  --o-classification Sputum-Taxonomy132-before-phylum-annotation.qza

qiime metadata tabulate \
  --m-input-file Sputum-Taxonomy132-before-phylum-annotation.qza \
  --o-visualization Sputum-Taxonomy132-before-phylum-annotation.qzv

#Removing noise (excluding ASVs with no taxonomic annotation at the phylum level and contaminants - non-bacterial DNA)
qiime taxa filter-table \
  --i-table Filtered-Sputum-table-contingency-table.qza \
  --i-taxonomy Sputum-Taxonomy132-before-phylum-annotation.qza \
  --p-include D_1__\
  --p-exclude mitochondria,chloroplast,archaea \
  --o-filtered-table Filtered-Sputum-table-contingency-table-with-phylum.qza

qiime feature-table summarize \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum.qza \
  --o-visualization Filtered-Sputum-table-contingency-table-with-phylum.qzv

#Removing samples with very low number of reads (these samples would be removed during rarefaction step for alpha and beta 
diversity analyses)
#Samples removed: COPD-049; COPD-086; COPD-090; COPD-093.

qiime feature-table filter-samples \
--i-table Filtered-Sputum-table-contingency-table-with-phylum.qza \
--m-metadata-file Samples-to-not-keep-for-rarefaction-4.tsv \
--p-exclude-ids \
--o-filtered-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza

qiime feature-table summarize \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --o-visualization Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qzv \
  --m-sample-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv 

#Visualize and export features (i.e., ASVs) observed in Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza 
  using Qiime2View => save as Final-Sputum-features-to-keep.tsv
#Keep only ASVs (Filtered-Sputum-rep-seqs.qza) present in Final-Sputum-features-to-keep.tsv

qiime feature-table filter-seqs \
--i-data Filtered-Sputum-rep-seqs.qza \
--m-metadata-file Final-Sputum-features-to-keep.tsv \
--p-no-exclude-ids \
--o-filtered-data Final-Sputum-rep-seqs.qza

qiime feature-table tabulate-seqs \
  --i-data Final-Sputum-rep-seqs.qza \
  --o-visualization Final-Sputum-rep-seqs.qzv

#Making tree file (using Final-Sputum-rep-seqs.qza) 
qiime alignment mafft \
  --i-sequences Final-Sputum-rep-seqs.qza \
  --o-alignment aligned-Final-Sputum-rep-seqs.qza

qiime alignment mask \
  --i-alignment aligned-Final-Sputum-rep-seqs.qza \
  --o-masked-alignment masked-Final-Sputum-rep-seqs.qza 

qiime phylogeny fasttree \
  --i-alignment masked-Final-Sputum-rep-seqs.qza \
  --o-tree unrooted-tree-Final-Sputum.qza

qiime phylogeny midpoint-root \
  --i-tree unrooted-tree-Final-Sputum.qza \
  --o-rooted-tree rooted-tree-Final-Sputum.qza

#Final taxonomic analysis
#Taxonomic database: Silva 132
qiime feature-classifier classify-sklearn \
  --i-classifier Silva132-16s_99_7_levels_classifier250-myprimers.qza \
   --i-reads Final-Sputum-rep-seqs.qza \
  --o-classification Final-Taxonomy132-after-phylum-102-samples.qza

qiime metadata tabulate \
  --m-input-file Final-Taxonomy132-after-phylum-102-samples.qza \
  --o-visualization Final-Taxonomy132-after-phylum-102-samples.qzv

qiime taxa barplot \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --i-taxonomy Final-Taxonomy132-after-phylum-102-samples.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --o-visualization Final-taxa-bar-plots-Silva132-with-phylum-rarefaction.qzv

#Alpha and beta diversity analyses – 102 patients 
#Rarefaction cut off: 6,430 (lowest number of reads observed across all samples)

qiime diversity core-metrics-phylogenetic \
  --i-phylogeny rooted-tree-Final-Sputum.qza \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --p-sampling-depth 6430 \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --output-dir core-metrics-results

#Move to Core-metric-results folder
#Copy metadata file (102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv) to Core-metric-results folder
#Alpha diversity 

qiime diversity alpha-group-significance \
  --i-alpha-diversity faith_pd_vector.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --o-visualization faith-pd-group-significance.qzv

qiime diversity alpha-group-significance \
  --i-alpha-diversity observed_otus_vector.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --o-visualization observed-otu-group-significance.qzv

qiime diversity alpha-group-significance \
  --i-alpha-diversity shannon_vector.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --o-visualization shannon-group-significance.qzv

qiime diversity alpha-group-significance \
  --i-alpha-diversity evenness_vector.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --o-visualization evenness-group-significance.qzv

#Note: export the raw data for each alpha diversity metric and save into one single file 
#There is an option to download the raw data when visualizing each .qzv file using Qiime2View.
#Here, we are saving as “RTC-sputum-alpha-diversity-from-Qiime2.txt”

#Beta diversity – Unweighted Unifrac
qiime diversity beta-group-significance \
  --i-distance-matrix unweighted_unifrac_distance_matrix.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --m-metadata-column Mortality_1Year\
  --o-visualization Mortality-unweighted-unifrac-significance.qzv \
  --p-pairwise

#Beta-diversity - Weighted Unifrac
qiime diversity beta-group-significance \
  --i-distance-matrix weighted_unifrac_distance_matrix.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --m-metadata-column Mortality_1Year\
  --o-visualization Mortality-weighted-unifrac-significance.qzv \
  --p-pairwise

#Beta-diversity – Bray Curtis
qiime diversity beta-group-significance \
  --i-distance-matrix bray_curtis_distance_matrix.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --m-metadata-column Mortality_1Year \
  --o-visualization Mortality-bray-curtis-significance.qzv \
  --p-pairwise

#Beta-diversity - Jaccard
qiime diversity beta-group-significance \
  --i-distance-matrix jaccard_distance_matrix.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --m-metadata-column Mortality_1Year\
  --o-visualization Mortality-jaccard-significance.qzv \
  --p-pairwise

#Beta-diversity Generalized Unifrac (alpha 0.5)
#Plugin used: beta-phylogenetic-alt: Beta diversity (phylogenetic) - High Performance Computation
#Move one directory up: cd .. 
#Obtaining feature table at the same sampling depth (rarefaction cut-off: 6,430 reads)

qiime feature-table rarefy \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --p-sampling-depth 6430 \
  --o-rarefied-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction-6430.qza

qiime feature-table summarize \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction-6430.qza \
  --o-visualization Filtered-Sputum-table-contingency-table-with-phylum-rarefaction-6430.qzv \
  --m-sample-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv

#Obtaining Generalized Unifrac distance matrix using rarefied feature table
qiime diversity beta-phylogenetic-alt \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction-6430.qza \
  --i-phylogeny rooted-tree-Final-Sputum.qza \
  --p-metric generalized_unifrac \
  --p-alpha 0.5 \
  --o-distance-matrix core-metrics-results/Mortality-alpha-0.5-generalized_unifrac_distance_matrix.qza

#Move to Core-metric-results folder
#Performing beta diversity analysis using Generalized Unifrac distance matrix (alpha 0.5)
qiime diversity beta-group-significance \
  --i-distance-matrix Mortality-alpha-0.5-generalized_unifrac_distance_matrix.qza \
  --m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
  --m-metadata-column Mortality_1Year \
  --o-visualization Mortality-alpha-0.5-generalized_unifrac-significance.qzv \
  --p-pairwise

#Obtaining PCoA file and emperor plot related to Generalized Unifrac distance matrix (alpha 0.5)
qiime diversity pcoa \
--i-distance-matrix Mortality-alpha-0.5-generalized_unifrac_distance_matrix.qza \
--o-pcoa Mortality-alpha-0.5-generalized_unifrac_pcoa_results.qza

qiime emperor plot \
--i-pcoa Mortality-alpha-0.5-generalized_unifrac_pcoa_results.qza \
--m-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv \
--o-visualization Mortality-alpha-0.5-generalized_unifrac_emperor.qzv

#Exporting Generalized Unifrac distance matrix (alpha 0.5)

qiime tools export \
 --input-path Mortality-alpha-0.5-generalized_unifrac_distance_matrix.qza \
 --output-path exported

#Renaming exported GU distance matrix
mv exported/distance-matrix.tsv exported/GU-distance-matrix.txt

#Move one directory up: cd .. 
#Collapsing Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza at the genus level
#Taxonomic database: Silva 132

qiime taxa collapse \
  --i-table Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --i-taxonomy Final-Taxonomy132-after-phylum-102-samples.qza \
  --p-level 6 \
  --o-collapsed-table Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza

qiime feature-table summarize \
  --i-table Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --o-visualization Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qzv \
  --m-sample-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv 

#Exporting collapsed feature table (Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza): 
  provides number of reads for all taxa (up to genus level) across all samples (according to SampleID)

qiime tools export \
 --input-path Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
 --output-path Collapsed-Table

#Renaming exported collapsed feature table
mv Collapsed-Table/feature-table.biom Collapsed-Table/Collapsed-all-samples-method.biom

#Converting BIOM file (Collapsed-all-samples-method.biom) to tsv format
biom convert -i Collapsed-Table/Collapsed-all-samples-method.biom \
  -o Collapsed-Table/collapsed-all-samples.tsv \
  --to-tsv --header-key taxonomy

#Creating presence or absence feature table from Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza
qiime feature-table presence-absence \
--i-table Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
--o-presence-absence-table Binary-Collapsed-Table/Binary-Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
--output-dir Binary-Collapsed-Table

qiime feature-table summarize \
  --i-table Binary-Collapsed-Table/Binary-Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
  --o-visualization Binary-Collapsed-Table/Binary-Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qzv \
  --m-sample-metadata-file 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.tsv

#Exporting binary collapsed feature table (Binary-Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza): provides information regarding presence or absence for all taxa (up to genus level) across all samples (according to SampleID)

qiime tools export \
 --input-path Binary-Collapsed-Table/Binary-Collapsed-Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
 --output-path Binary-Collapsed-Table

#Renaming exported binary collapsed feature table
mv Binary-Collapsed-Table/feature-table.biom Binary-Collapsed-Table/Binary-Collapsed-all-samples-method.biom

#Converting BIOM file (Binary-Collapsed-all-samples-method.biom) to tsv format
biom convert -i Binary-Collapsed-Table/Binary-Collapsed-all-samples-method.biom \
  -o Binary-Collapsed-Table/Binary-Collapsed-all-samples.tsv \
  --to-tsv --header-key taxonomy

#Exporting Feature Table (Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza) as BIOM file
qiime tools export \
 --input-path Filtered-Sputum-table-contingency-table-with-phylum-rarefaction.qza \
 --output-path Exported

#Renaming BIOM file to 102-Sputum-not-rarefied.biom
mv Exported/feature-table.biom Exported/102-Sputum-not-rarefied.biom

#Exporting Taxonomic File (Final-Taxonomy132-after-phylum-102-samples.qza) 
qiime tools export \
 --input-path Final-Taxonomy132-after-phylum-102-samples.qza \
 --output-path Exported

#Change the first line of taxonomy.tsv (i.e., the header) to: #OTUID; taxonomy; confidence
#Save this new file as "taxonomy1.tsv"
#Editing taxonomy1.tsv to remove D_0__; D_1__,… (Optional)
#Adding taxonomic information to BIOM file (102-Sputum-not-rarefied.biom)

biom add-metadata -i Exported/102-Sputum-not-rarefied.biom -o Exported/102-Sputum-not-rarefied-with-taxonomy.biom --observation-metadata-fp Exported/taxonomy1.tsv --sc-separated taxonomy

#Exporting Feature Table – rarefied (Filtered-Sputum-table-contingency-table-with-phylum-rarefaction-6430.qza) as BIOM file
qiime tools export \
 --input-path Filtered-Sputum-table-contingency-table-with-phylum-rarefaction-6430.qza \
 --output-path Exported

#Renaming BIOM file to 102-Sputum-rarefied.biom
mv Exported/feature-table.biom Exported/102-Sputum-rarefied.biom

#Adding taxonomic information to BIOM file (102-Sputum-rarefied.biom)
biom add-metadata -i Exported/102-Sputum-rarefied.biom -o Exported/102-Sputum-rarefied-with-taxonomy.biom --observation-metadata-fp Exported/taxonomy1.tsv --sc-separated taxonomy

#Exporting Tree file (rooted-tree-Final-Sputum.qza) 
qiime tools export \
 --input-path rooted-tree-Final-Sputum.qza \
 --output-path Exported

Part II – R 
#Create a new folder (In our case: Sputum-Mortality-Paper-codes)
#Copy the following files to this folder:
1) Metadata file: 102-patients-Sputum-25-AUG-2018-all-1-year-follow-up.txt (change extension from .tsv to .txt)
2) BIOM file (rarefied): 102-Sputum-rarefied-with-taxonomy.biom (for alpha and beta diversity analyses)
3) BIOM file (not rarefied): 102-Sputum-not-rarefied-with-taxonomy.biom (for making taxa bar plots at phylum and genus levels)
4) Tree file: tree.nwk
5) File with values of alpha diversity metrics (Richness, Shannon, Evenness and Faith’s PD - obtained from QIIME2): 
   RTC-sputum-alpha-diversity-from-Qiime2.txt (This is Optional!)
6) Generalized Unifrac distance matrix (alpha=0.5) exported from QIIME2: GU-distance-matrix.txt
